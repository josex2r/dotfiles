!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/66ba533/
#all	.vim/plugged/editorconfig-vim/tests/spec/editorconfig_spec.rb	/^  describe '#all' do$/;"	d
$TMPDIR	.vim/plugged/ale/plugin/ale.vim	/^    let $TMPDIR = '\/tmp'$/;"	v
$TMPDIR	.vim/plugged/ale/test/.config/nvim/init.vim	/^let $TMPDIR = ''$/;"	v
$TMPDIR	.vim/plugged/ale/test/vimrc	/^let $TMPDIR = ''$/;"	v
'	.vimrc	/^  nnoremap ' `$/;"	m
*::color1	.vim/plugged/vim-css-color/tests/example.css	/^*::color1 { -x-: #359 }$/;"	s
*::color2	.vim/plugged/vim-css-color/tests/example.css	/^*::color2 { -x-: #335599 }$/;"	s
*::color3	.vim/plugged/vim-css-color/tests/example.css	/^*::color3 { -x-: rgba(144, 0, 0, .5) }$/;"	s
*::color4	.vim/plugged/vim-css-color/tests/example.css	/^*::color4 { -x-: hsl(0, 100%, 50%) }$/;"	s
+	.vimrc	/^    map + <C-W>+$/;"	m
,	.vim/plugged/vim-sneak/plugin/sneak.vim	/^    nmap , <Plug>Sneak_,$/;"	m
,	.vim/plugged/vim-sneak/plugin/sneak.vim	/^    omap , <Plug>Sneak_,$/;"	m
,	.vim/plugged/vim-sneak/plugin/sneak.vim	/^    xmap , <Plug>Sneak_,$/;"	m
-	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> -    :<C-U>exe <SID>BlameJump('')<CR>$/;"	m
-	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> -     :<C-U>exe <SID>Edit('edit',0,<SID>buffer().up(v:count1))<Ba/;"	m
-	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> - :<C-U>silent execute <SID>StageToggle(line('.'),line('.')+v:cou/;"	m
-	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    xnoremap <buffer> <silent> - :<C-U>silent execute <SID>StageToggle(line("'<"),line("'>"))<CR/;"	m
-	.vimrc	/^    map - <C-W>-$/;"	m
.	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer>          .     : <C-R>=fnameescape(<SID>recall())<CR><Home>$/;"	m
.	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    nmap . <Plug>(RepeatDot)$/;"	m
.apidocs	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%classes.css	/^VimüUnDoÂ163b6;    padding-left: 16px;5Å_–		flex: 1;5Å_–		flex: 3;5Å_–Åì˘		flex: 0;center;x s/;"	c
.apidocs	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%layout.css	/^VimüUnDoÂ3e8a } *\/5Å_–round-image: url(..\/img\/bg-menu.svg);ı.apidocs {.sidebar {5Å_–W /;"	c
.example	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%main.css	/^VimüUnDoÂ@font-face {C9;5Å_–.example {; \/* webkit *\/.apidocs {pre.code {.apidocs {ht {5Å_–ˇˇ/;"	c
.sidebar	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%index.css	/^VimüUnDoÂontent__detail h2, .wiki-content__detail h3, .wiki-content__detail h4{ relative;.sideba/;"	c
.sidebar	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%wiki.css	/^VimüUnDoÂ  left: 0;ˇˇ.sidebar {5Å_–	: center;ız	.content {.sidebar {;.apis li {.apidocs {/;"	c
3-space indentation	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^3-space indentation$/;"	S	section:Space-based indentation
4-space indentation with tab width of 8	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^4-space indentation with tab width of 8$/;"	S	section:Space-based indentation
5	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%classes.css	/^VimüUnDoÂ163b6;    padding-left: 16px;5Å_–		flex: 1;5Å_–		flex: 3;5Å_–Åì˘		flex: 0;center;x s/;"	s
;	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  nmap ; <Plug>Sneak_;$/;"	m
;	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  omap ; <Plug>Sneak_;$/;"	m
;	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  xmap ; <Plug>Sneak_;$/;"	m
<2-LeftMouse>	.vim/plugged/tagbar/autoload/tagbar.vim	/^    inoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<2-LeftMouse>	.vim/plugged/tagbar/autoload/tagbar.vim	/^    nnoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<BS>	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^      inoremap <expr><BS> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<BS>	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^  snoremap <BS>     a<BS>$/;"	m
<BS>	.vimrc	/^  inoremap <expr><BS> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-G>S	.vim/plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	.vim/plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-H>	.vimrc	/^  map <C-H> <C-W>h$/;"	m
<C-L>	.vimrc	/^  map <C-L> <C-W>l$/;"	m
<C-N>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> <C-N> :<C-U>execute <SID>StageNext(v:count1)<CR>$/;"	m
<C-P>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> <C-P> :<C-U>execute <SID>StagePrevious(v:count1)<CR>$/;"	m
<C-R>	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    nmap <C-R> <Plug>(RepeatRedo)$/;"	m
<C-R><C-G>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^      cnoremap <buffer> <expr> <C-R><C-G> fnameescape(<SID>recall())$/;"	m
<C-S>	.vim/plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-W><C-F>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nmap <buffer> <silent> <C-W><C-F> <SID>:sfind <Plug><cfile><CR>$/;"	m
<C-W>f	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nmap <buffer> <silent> <C-W>f     <SID>:sfind <Plug><cfile><CR>$/;"	m
<C-W>gf	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nmap <buffer> <silent> <C-W>gf  <SID>:tabfind <Plug><cfile><CR>$/;"	m
<C-c>	.vimrc	/^  vmap <C-c> "+yi$/;"	m
<C-e>	.vimrc	/^  nnoremap <C-e> 3<C-e>$/;"	m
<C-g>	.vimrc	/^  inoremap <expr><C-g>     neocomplete#undo_completion()$/;"	m
<C-h>	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^      inoremap <expr><C-h> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-h>	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^  snoremap <C-h>    a<BS>$/;"	m
<C-h>	.vimrc	/^  inoremap <expr><C-h> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-j>	.vimrc	/^  map <C-j> <C-W>j$/;"	m
<C-k>	.vimrc	/^  imap <C-k>     <Plug>(neosnippet_expand_or_jump)$/;"	m
<C-k>	.vimrc	/^  map <C-k> <C-W>k$/;"	m
<C-k>	.vimrc	/^  smap <C-k>     <Plug>(neosnippet_expand_or_jump)$/;"	m
<C-k>	.vimrc	/^  xmap <C-k>     <Plug>(neosnippet_expand_target)$/;"	m
<C-l>	.vimrc	/^  inoremap <expr><C-l>     neocomplete#complete_common_string()$/;"	m
<C-v>	.vimrc	/^  imap <C-v> <ESC>"+pa$/;"	m
<C-v>	.vimrc	/^  vmap <C-v> c<ESC>"+p$/;"	m
<C-x>	.vimrc	/^  vmap <C-x> "+c$/;"	m
<C-y>	.vimrc	/^  nnoremap <C-y> 3<C-y>$/;"	m
<CR>	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^  snoremap <CR>     a<BS>$/;"	m
<CR>	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^  nnoremap <silent><buffer> <CR> :call <SID>OpenLineInPreviewWindow()<CR>$/;"	m
<CR>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> <CR> :<C-U>exe <SID>BlameCommit("exe 'norm q'<Bar>edit")<CR>$/;"	m
<CR>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  nnoremap <buffer> <silent> <CR>    :<C-U>exe <SID>GF("edit")<CR>$/;"	m
<CR>	.vimrc	/^  inoremap <expr> <CR>   pumvisible() ? "\\<C-y>" : "\\<CR>"$/;"	m
<CR>	.vimrc	/^  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>$/;"	m
<Del>	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^  snoremap <Del>    a<BS>$/;"	m
<Down>	.vim/plugged/ack.vim/autoload/ack.vim	/^    nmap <buffer> <silent> <Down> j$/;"	m
<Down>	.vimrc	/^  inoremap <expr> <Down> pumvisible() ? "\\<C-n>" : "\\<Down>"$/;"	m
<Enter>	.vimrc	/^  vmap <Enter> <Plug>(EasyAlign) " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)$/;"	m
<Esc>b	.vimrc	/^  cnoremap <Esc>b <S-Left>$/;"	m
<Esc>f	.vimrc	/^  cnoremap <Esc>f <S-Right>$/;"	m
<F1>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> <F1> :help fugitive-:Gblame<CR>$/;"	m
<F1>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> <F1> :help fugitive-:Gstatus<CR>$/;"	m
<F3>	.vimrc	/^  nnoremap <silent> <F3> :MultipleCursorsFind <C-R>\/<CR>$/;"	m
<F3>	.vimrc	/^  vnoremap <silent> <F3> :MultipleCursorsFind <C-R>\/<CR>$/;"	m
<F8>	.vimrc	/^  nmap <F8> :TagbarToggle<CR>$/;"	m
<Leader><Leader>	.vimrc	/^  map <Leader><Leader> <C-^>$/;"	m
<Leader>a	.vimrc	/^  nmap <Leader>a <Plug>(EasyAlign) " Start interactive EasyAlign for a motion\/text object (e.g./;"	m
<Leader>hp	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    nmap <Leader>hp <Plug>GitGutterPreviewHunk$/;"	m
<Leader>hr	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    nmap <Leader>hr <Plug>GitGutterUndoHunk:echomsg '<Leader>hr is deprecated. Use <Leader>hu'<C/;"	m
<Leader>hs	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    nmap <Leader>hs <Plug>GitGutterStageHunk$/;"	m
<Leader>hu	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    nmap <Leader>hu <Plug>GitGutterUndoHunk$/;"	m
<Leader>ls	.vimrc	/^  map <Leader>ls :buffers<CR>$/;"	m
<Leader>ri	.vim/ftplugin/ri.vim	/^  nmap <unique> <Leader>ri <Plug>Ri$/;"	m
<Leader>rx	.vim/ftplugin/ri.vim	/^  nmap <unique> <Leader>rx <Plug>Rx$/;"	m
<Leader>su	.vim/plugin/visSum.vim	/^nmap <silent> <unique> <Leader>su <Plug>SumNum$/;"	m
<Leader>su	.vim/plugin/visSum.vim	/^vmap <silent> <unique> <Leader>su <Plug>SumNum$/;"	m
<LeftRelease>	.vim/plugged/tagbar/autoload/tagbar.vim	/^    inoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<LeftRelease>	.vim/plugged/tagbar/autoload/tagbar.vim	/^    nnoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<M-I>	.vim/ftplugin/ri.vim	/^  noremap <M-I> :call Ri('', 1)<CR>$/;"	m
<M-[>	.vim/ftplugin/ri.vim	/^  noremap <M-[> :call Ri(expand('<cword>'), 1)<cr>$/;"	m
<M-]>	.vim/ftplugin/ri.vim	/^  noremap <M-]> :call Ri(expand('<cWORD>'), 0)<cr>$/;"	m
<M-i>	.vim/ftplugin/ri.vim	/^  noremap <M-i> :call Ri('', 0)<CR>$/;"	m
<PageDown>	.vimrc	/^  imap <PageDown> <C-O><C-D>$/;"	m
<PageDown>	.vimrc	/^  map <PageDown> <C-D>$/;"	m
<PageUp>	.vimrc	/^  imap <PageUp> <C-O><C-U>$/;"	m
<PageUp>	.vimrc	/^  map <PageUp> <C-U>$/;"	m
<Plug>(EasyAlign)	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^nnoremap <silent> <Plug>(EasyAlign) :set opfunc=<SID>easy_align_op<Enter>g@$/;"	m
<Plug>(EasyAlign)	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^vnoremap <silent> <Plug>(EasyAlign) :<C-U>call <SID>easy_align_op(visualmode(), 1)<Enter>$/;"	m
<Plug>(EasyAlignOperator)	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^nnoremap <silent> <Plug>(EasyAlignOperator) :set opfunc=<SID>easy_align_op<Enter>g@$/;"	m
<Plug>(EasyAlignRepeat)	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^nnoremap <silent> <Plug>(EasyAlignRepeat) :call <SID>easy_align_repeat()<Enter>$/;"	m
<Plug>(EasyAlignRepeat)	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^vnoremap <silent> <Plug>(EasyAlignRepeat) :<C-U>call <SID>repeat_in_visual()<Enter>$/;"	m
<Plug>(LiveEasyAlign)	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^nnoremap <silent> <Plug>(LiveEasyAlign) :set opfunc=<SID>live_easy_align_op<Enter>g@$/;"	m
<Plug>(LiveEasyAlign)	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^vnoremap <silent> <Plug>(LiveEasyAlign) :<C-U>call <SID>live_easy_align_op(visualmode(), 1)<Ente/;"	m
<Plug>(RepeatDot)	.vim/plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatDot)      :<C-U>exe repeat#run(v:count)<CR>$/;"	m
<Plug>(RepeatRedo)	.vim/plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<Plug>(RepeatUndo)	.vim/plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>$/;"	m
<Plug>(RepeatUndoLine)	.vim/plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>$/;"	m
<Plug>(SneakStreak)	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>(SneakStreak)         <Plug>SneakLabel_s$/;"	m
<Plug>(SneakStreak)	.vim/plugged/vim-sneak/plugin/sneak.vim	/^omap <Plug>(SneakStreak)         <Plug>SneakLabel_s$/;"	m
<Plug>(SneakStreak)	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>(SneakStreak)         <Plug>SneakLabel_s$/;"	m
<Plug>(SneakStreakBackward)	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>(SneakStreakBackward) <Plug>SneakLabel_S$/;"	m
<Plug>(SneakStreakBackward)	.vim/plugged/vim-sneak/plugin/sneak.vim	/^omap <Plug>(SneakStreakBackward) <Plug>SneakLabel_S$/;"	m
<Plug>(SneakStreakBackward)	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>(SneakStreakBackward) <Plug>SneakLabel_S$/;"	m
<Plug>(ale_detail)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>$/;"	m
<Plug>(ale_first)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>$/;"	m
<Plug>(ale_fix)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>$/;"	m
<Plug>(ale_last)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_last) :ALELast<Return>$/;"	m
<Plug>(ale_lint)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>$/;"	m
<Plug>(ale_next)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next) :ALENext<Return>$/;"	m
<Plug>(ale_next_wrap)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>$/;"	m
<Plug>(ale_previous)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>$/;"	m
<Plug>(ale_previous_wrap)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>$/;"	m
<Plug>(ale_toggle)	.vim/plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>$/;"	m
<Plug>(multiple-cursors-apply)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-apply) <C-o>:call <SID>apply_user_input_next('i')<CR>$/;"	m
<Plug>(multiple-cursors-apply)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-apply) :call <SID>apply_user_input_next('n')<CR>$/;"	m
<Plug>(multiple-cursors-apply)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^xnoremap <silent> <Plug>(multiple-cursors-apply) :<C-u>call <SID>apply_user_input_next('v')<CR>$/;"	m
<Plug>(multiple-cursors-detect)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-detect) <C-o>:call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-detect)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-detect) :call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-detect)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^xnoremap <silent> <Plug>(multiple-cursors-detect) :<C-u>call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-input) <C-o>:call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-input) :call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^xnoremap <silent> <Plug>(multiple-cursors-input) :<C-u>call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-new)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new) :<C-u>call multiple_cursors#new('v', 0)<CR>$/;"	m
<Plug>(multiple-cursors-new-word)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new-word) :<C-u>call multiple_cursors#new('v', 1)<CR>$/;"	m
<Plug>(multiple-cursors-prev)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-prev) :<C-u>call multiple_cursors#prev()<CR>$/;"	m
<Plug>(multiple-cursors-skip)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-skip) :<C-u>call multiple_cursors#skip()<CR>$/;"	m
<Plug>(multiple-cursors-wait)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-wait) <C-o>:call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-wait)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-wait) :call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-wait)	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^xnoremap <silent> <Plug>(multiple-cursors-wait) :<C-u>call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(neocomplete_auto_refresh)	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^  inoremap <silent> <Plug>(neocomplete_auto_refresh)$/;"	m
<Plug>(neocomplete_start_auto_complete)	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^    inoremap <silent> <Plug>(neocomplete_start_auto_complete)$/;"	m
<Plug>(neocomplete_start_manual_complete)	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^    inoremap <silent> <Plug>(neocomplete_start_manual_complete)$/;"	m
<Plug>(neocomplete_start_omni_complete)	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^    inoremap <silent> <Plug>(neocomplete_start_omni_complete)$/;"	m
<Plug>(neocomplete_start_unite_complete)	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^  inoremap <expr><silent> <Plug>(neocomplete_start_unite_complete)$/;"	m
<Plug>(neocomplete_start_unite_quick_match)	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^  inoremap <expr><silent> <Plug>(neocomplete_start_unite_quick_match)$/;"	m
<Plug>(neosnippet_expand)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^inoremap <silent><expr> <Plug>(neosnippet_expand)$/;"	m
<Plug>(neosnippet_expand)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^snoremap <silent><expr> <Plug>(neosnippet_expand)$/;"	m
<Plug>(neosnippet_expand_or_jump)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^inoremap <silent><expr> <Plug>(neosnippet_expand_or_jump)$/;"	m
<Plug>(neosnippet_expand_or_jump)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^snoremap <silent><expr> <Plug>(neosnippet_expand_or_jump)$/;"	m
<Plug>(neosnippet_expand_target)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^xnoremap <silent> <Plug>(neosnippet_expand_target)$/;"	m
<Plug>(neosnippet_get_selected_text)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^xnoremap <silent> <Plug>(neosnippet_get_selected_text)$/;"	m
<Plug>(neosnippet_jump)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^inoremap <silent><expr> <Plug>(neosnippet_jump)$/;"	m
<Plug>(neosnippet_jump)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^snoremap <silent><expr> <Plug>(neosnippet_jump)$/;"	m
<Plug>(neosnippet_jump_or_expand)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^inoremap <silent><expr> <Plug>(neosnippet_jump_or_expand)$/;"	m
<Plug>(neosnippet_jump_or_expand)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^snoremap <silent><expr> <Plug>(neosnippet_jump_or_expand)$/;"	m
<Plug>(neosnippet_register_oneshot_snippet)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^xnoremap <silent> <Plug>(neosnippet_register_oneshot_snippet)$/;"	m
<Plug>(neosnippet_start_unite_snippet)	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^inoremap <expr><silent> <Plug>(neosnippet_start_unite_snippet)$/;"	m
<Plug>(peekaboo)	.vim/plugged/vim-peekaboo/plugin/peekaboo.vim	/^inoremap <silent> <Plug>(peekaboo) <c-\\><c-o>:<c-u>call peekaboo#aboo()<cr>$/;"	m
<Plug>(peekaboo)	.vim/plugged/vim-peekaboo/plugin/peekaboo.vim	/^nnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>$/;"	m
<Plug>(peekaboo)	.vim/plugged/vim-peekaboo/plugin/peekaboo.vim	/^xnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>$/;"	m
<Plug><cfile>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  cnoremap <buffer> <expr> <Plug><cfile> fugitive#cfile()$/;"	m
<Plug>AirlineSelectNextTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>$/;"	m
<Plug>AirlineSelectNextTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectNextTab :<C-U>exe repeat(':tabn\\|', v:count1)<cr>$/;"	m
<Plug>AirlineSelectPrevTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>$/;"	m
<Plug>AirlineSelectPrevTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectPrevTab gT$/;"	m
<Plug>AirlineSelectTab1	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab1 :call <SID>select_tab(0)<CR>$/;"	m
<Plug>AirlineSelectTab1	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab1 :1tabn<CR>$/;"	m
<Plug>AirlineSelectTab2	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab2 :call <SID>select_tab(1)<CR>$/;"	m
<Plug>AirlineSelectTab2	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab2 :2tabn<CR>$/;"	m
<Plug>AirlineSelectTab3	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab3 :call <SID>select_tab(2)<CR>$/;"	m
<Plug>AirlineSelectTab3	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab3 :3tabn<CR>$/;"	m
<Plug>AirlineSelectTab4	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab4 :call <SID>select_tab(3)<CR>$/;"	m
<Plug>AirlineSelectTab4	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab4 :4tabn<CR>$/;"	m
<Plug>AirlineSelectTab5	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab5 :call <SID>select_tab(4)<CR>$/;"	m
<Plug>AirlineSelectTab5	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab5 :5tabn<CR>$/;"	m
<Plug>AirlineSelectTab6	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab6 :call <SID>select_tab(5)<CR>$/;"	m
<Plug>AirlineSelectTab6	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab6 :6tabn<CR>$/;"	m
<Plug>AirlineSelectTab7	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab7 :call <SID>select_tab(6)<CR>$/;"	m
<Plug>AirlineSelectTab7	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab7 :7tabn<CR>$/;"	m
<Plug>AirlineSelectTab8	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab8 :call <SID>select_tab(7)<CR>$/;"	m
<Plug>AirlineSelectTab8	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab8 :8tabn<CR>$/;"	m
<Plug>AirlineSelectTab9	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectTab9 :call <SID>select_tab(8)<CR>$/;"	m
<Plug>AirlineSelectTab9	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectTab9 :9tabn<CR>$/;"	m
<Plug>CSurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>ChangeCommentary	.vim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>Commentary	.vim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>Commentary     :<C-U>set opfunc=<SID>go<CR>g@$/;"	m
<Plug>Commentary	.vim/plugged/vim-commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(0)<CR>$/;"	m
<Plug>Commentary	.vim/plugged/vim-commentary/plugin/commentary.vim	/^xnoremap <silent> <Plug>Commentary     :<C-U>call <SID>go(line("'<"),line("'>"))<CR>$/;"	m
<Plug>CommentaryLine	.vim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>CommentaryLine :<C-U>set opfunc=<SID>go<Bar>exe 'norm! 'v:count1.'g@_'<C/;"	m
<Plug>CommentaryUndo	.vim/plugged/vim-commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo <Plug>Commentary<Plug>Commentary$/;"	m
<Plug>Csurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>GitGutterNextHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk &diff ? ']c' : ":\\<C-U>execute v:count1 . 'Git/;"	m
<Plug>GitGutterPrevHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk &diff ? '[c' : ":\\<C-U>execute v:count1 . 'Git/;"	m
<Plug>GitGutterPreviewHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk :GitGutterPreviewHunk<CR>$/;"	m
<Plug>GitGutterStageHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk   :GitGutterStageHunk<CR>$/;"	m
<Plug>GitGutterTextObjectInnerPending	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>GitGutterTextObjectInnerPending :<C-U>call gitgutter#hunk#text_object(1)/;"	m
<Plug>GitGutterTextObjectInnerVisual	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^xnoremap <silent> <Plug>GitGutterTextObjectInnerVisual  :<C-U>call gitgutter#hunk#text_object(1)/;"	m
<Plug>GitGutterTextObjectOuterPending	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>GitGutterTextObjectOuterPending :<C-U>call gitgutter#hunk#text_object(0)/;"	m
<Plug>GitGutterTextObjectOuterVisual	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^xnoremap <silent> <Plug>GitGutterTextObjectOuterVisual  :<C-U>call gitgutter#hunk#text_object(0)/;"	m
<Plug>GitGutterUndoHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk    :GitGutterUndoHunk<CR>$/;"	m
<Plug>ISurround	.vim/plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	.vim/plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>Ri	.vim/ftplugin/ri.vim	/^nnoremap <unique> <Plug>Ri :call Ri('', 0)<CR>$/;"	m
<Plug>Rx	.vim/ftplugin/ri.vim	/^nnoremap <unique> <Plug>Rx :call Ri('', 1)<CR>$/;"	m
<Plug>SneakBackward	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>SneakBackward  <Plug>Sneak_S$/;"	m
<Plug>SneakForward	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>SneakForward   <Plug>Sneak_s$/;"	m
<Plug>SneakLabel_S	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>SneakLabel_S :<c-u>call sneak#wrap('', 2, 1, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_S	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>SneakLabel_S :<c-u>call sneak#wrap(v:operator, 2, 1, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_S	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>SneakLabel_S :<c-u>call sneak#wrap(visualmode(), 2, 1, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_s	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>SneakLabel_s :<c-u>call sneak#wrap('', 2, 0, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_s	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>SneakLabel_s :<c-u>call sneak#wrap(v:operator, 2, 0, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_s	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>SneakLabel_s :<c-u>call sneak#wrap(visualmode(), 2, 0, 2, 2)<cr>$/;"	m
<Plug>SneakNext	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>SneakNext     <Plug>Sneak_;$/;"	m
<Plug>SneakNext	.vim/plugged/vim-sneak/plugin/sneak.vim	/^omap <Plug>SneakNext     <Plug>Sneak_;$/;"	m
<Plug>SneakNext	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>SneakNext     <Plug>Sneak_;$/;"	m
<Plug>SneakPrevious	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>SneakPrevious <Plug>Sneak_,$/;"	m
<Plug>SneakPrevious	.vim/plugged/vim-sneak/plugin/sneak.vim	/^omap <Plug>SneakPrevious <Plug>Sneak_,$/;"	m
<Plug>SneakPrevious	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>SneakPrevious <Plug>Sneak_,$/;"	m
<Plug>SneakRepeat	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>SneakRepeat :<c-u>call sneak#wrap(v:operator, sneak#util#getc(), sneak#u/;"	m
<Plug>Sneak_,	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_, :<c-u>call sneak#rpt('', 1)<cr>$/;"	m
<Plug>Sneak_,	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_, :<c-u>call sneak#rpt(v:operator, 1)<cr>$/;"	m
<Plug>Sneak_,	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_, :<c-u>call sneak#rpt(visualmode(), 1)<cr>$/;"	m
<Plug>Sneak_;	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_; :<c-u>call sneak#rpt('', 0)<cr>$/;"	m
<Plug>Sneak_;	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_; :<c-u>call sneak#rpt(v:operator, 0)<cr>$/;"	m
<Plug>Sneak_;	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_; :<c-u>call sneak#rpt(visualmode(), 0)<cr>$/;"	m
<Plug>Sneak_F	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_F :<c-u>call sneak#wrap('', 1, 1, 1, 0)<cr>$/;"	m
<Plug>Sneak_F	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_F :<c-u>call sneak#wrap(v:operator, 1, 1, 1, 0)<cr>$/;"	m
<Plug>Sneak_F	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_F :<c-u>call sneak#wrap(visualmode(), 1, 1, 1, 0)<cr>$/;"	m
<Plug>Sneak_S	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_S :<c-u>call sneak#wrap('', 2, 1, 2, 1)<cr>$/;"	m
<Plug>Sneak_S	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_S :<c-u>call sneak#wrap(v:operator, 2, 1, 2, 1)<cr>$/;"	m
<Plug>Sneak_S	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_S :<c-u>call sneak#wrap(visualmode(), 2, 1, 2, 1)<cr>$/;"	m
<Plug>Sneak_T	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_T :<c-u>call sneak#wrap('', 1, 1, 0, 0)<cr>$/;"	m
<Plug>Sneak_T	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_T :<c-u>call sneak#wrap(v:operator, 1, 1, 0, 0)<cr>$/;"	m
<Plug>Sneak_T	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_T :<c-u>call sneak#wrap(visualmode(), 1, 1, 0, 0)<cr>$/;"	m
<Plug>Sneak_f	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_f :<c-u>call sneak#wrap('', 1, 0, 1, 0)<cr>$/;"	m
<Plug>Sneak_f	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_f :<c-u>call sneak#wrap(v:operator, 1, 0, 1, 0)<cr>$/;"	m
<Plug>Sneak_f	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_f :<c-u>call sneak#wrap(visualmode(), 1, 0, 1, 0)<cr>$/;"	m
<Plug>Sneak_s	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_s :<c-u>call sneak#wrap('', 2, 0, 2, 1)<cr>$/;"	m
<Plug>Sneak_s	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_s :<c-u>call sneak#wrap(v:operator, 2, 0, 2, 1)<cr>$/;"	m
<Plug>Sneak_s	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_s :<c-u>call sneak#wrap(visualmode(), 2, 0, 2, 1)<cr>$/;"	m
<Plug>Sneak_t	.vim/plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_t :<c-u>call sneak#wrap('', 1, 0, 0, 0)<cr>$/;"	m
<Plug>Sneak_t	.vim/plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_t :<c-u>call sneak#wrap(v:operator, 1, 0, 0, 0)<cr>$/;"	m
<Plug>Sneak_t	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_t :<c-u>call sneak#wrap(visualmode(), 1, 0, 0, 0)<cr>$/;"	m
<Plug>SumNum\t:call	.vim/plugin/visSum.vim	/^	nmap <silent> <unique> <script> <Plug>SumNum	:call <SID>SumNumbers_Float() <CR>$/;"	m
<Plug>SumNum\t:call	.vim/plugin/visSum.vim	/^	nmap <silent> <unique> <script> <Plug>SumNum	:call <SID>SumNumbers_Int() <CR>$/;"	m
<Plug>SumNum\t:call	.vim/plugin/visSum.vim	/^	vmap <silent> <unique> <script> <Plug>SumNum	:call <SID>SumNumbers_Float() <CR>$/;"	m
<Plug>SumNum\t:call	.vim/plugin/visSum.vim	/^	vmap <silent> <unique> <script> <Plug>SumNum	:call <SID>SumNumbers_Int() <CR>$/;"	m
<Plug>SurroundRepeat	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>VSneakBackward	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>VSneakBackward <Plug>Sneak_S$/;"	m
<Plug>VSneakForward	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>VSneakForward  <Plug>Sneak_s$/;"	m
<Plug>VSneakNext	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>VSneakNext     <Plug>Sneak_;$/;"	m
<Plug>VSneakPrevious	.vim/plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>VSneakPrevious <Plug>Sneak_,$/;"	m
<Plug>VSurround	.vim/plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 /;"	m
<Plug>VgSurround	.vim/plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 /;"	m
<Plug>YSsurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<SID>:	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<TAB>	.vimrc	/^  inoremap <expr><TAB>  pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
<TAB>	.vimrc	/^  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?$/;"	m
<Up>	.vim/plugged/ack.vim/autoload/ack.vim	/^    nmap <buffer> <silent> <Up> k$/;"	m
<Up>	.vimrc	/^  inoremap <expr> <Up>   pumvisible() ? "\\<C-p>" : "\\<Up>"$/;"	m
<c-\\>	.vimrc	/^  nnoremap <c-\\> <c-w>v<c-]>mzzMzvzz15<c-e>`z:Pulse<cr>$/;"	m
<c-]>	.vimrc	/^  nnoremap <c-]> <c-]>mzzvzz15<c-e>`z:Pulse<cr>$/;"	m
<c-b>	.vimrc	/^  noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>$/;"	m
<c-d>	.vimrc	/^  noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>$/;"	m
<c-f>	.vimrc	/^  noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>$/;"	m
<c-u>	.vimrc	/^  noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>$/;"	m
<cr>	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <cr> :silent! call <SID>preview_commit()<cr>$/;"	m
<cr>	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    nnoremap <silent> <buffer> <cr> :call nerdtree#ui_glue#invokeKeyMap(g:NERDTreeMapActivateNod/;"	m
<esc>	.vim/plugged/vim-sneak/plugin/sneak.vim	/^    nmap <expr> <silent> <esc> sneak#cancel() . "\\<esc>"$/;"	m
<leader>*	.vimrc	/^  nnoremap <leader>* :%s\/\\<<C-r><C-w>\\>\/\/<Left>$/;"	m
<leader>*	.vimrc	/^  vnoremap <leader>* "hy:%s\/\\V<C-r>h\/\/<left>$/;"	m
<leader>1	.vimrc	/^  nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>$/;"	m
<leader>2	.vimrc	/^  nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>$/;"	m
<leader>3	.vimrc	/^  nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>$/;"	m
<leader>4	.vimrc	/^  nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>$/;"	m
<leader>5	.vimrc	/^  nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>$/;"	m
<leader>6	.vimrc	/^  nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>$/;"	m
<leader>W	.vimrc	/^  noremap <leader>W :w !sudo tee %<CR>$/;"	m
<leader>bD	.vimrc	/^  map <leader>bD :bufdo bd<CR>$/;"	m
<leader>bd	.vimrc	/^  map <leader>bd :lclose<bar>b#<bar>bd #<CR>$/;"	m
<leader>bn	.vimrc	/^  map <leader>bn :bnext<CR>$/;"	m
<leader>bp	.vimrc	/^  map <leader>bp :bprev<CR>$/;"	m
<leader>bt	.vimrc	/^  map <leader>bt :enew<CR>$/;"	m
<leader>c	.vimrc	/^  nnoremap <silent> <leader>c :set nolist!<CR>$/;"	m
<leader>lj	.vimrc	/^  map <leader>lj :lnext<CR>$/;"	m
<leader>lk	.vimrc	/^  map <leader>lk :lprev<CR>$/;"	m
<leader>ll	.vimrc	/^  map <leader>ll :ll<CR>$/;"	m
<leader>lo	.vimrc	/^  map <leader>lo :lopen<CR>$/;"	m
<leader>lq	.vimrc	/^  map <leader>lq :lclose<CR>$/;"	m
<leader>n	.vimrc	/^  map <leader>n :NERDTreeToggle<CR>$/;"	m
<leader>p	.vimrc	/^  nnoremap <leader>p :CtrlPBuffer<CR>$/;"	m
<leader>qc	.vimrc	/^  map <leader>qc :cc<CR>$/;"	m
<leader>qj	.vimrc	/^  map <leader>qj :cnext<CR>$/;"	m
<leader>qk	.vimrc	/^  map <leader>qk :cprev<CR>$/;"	m
<leader>qo	.vimrc	/^  map <leader>qo :copen<CR>$/;"	m
<leader>qq	.vimrc	/^  map <leader>qq :cclose<CR>$/;"	m
<leader>qs	.vimrc	/^  map <silent> <leader>qs <Esc>:noh<CR>$/;"	m
<leader>rp	.vimrc	/^  nnoremap <leader>rp :RainbowParenthesesToggle<CR>$/;"	m
<leader>ss	.vimrc	/^  noremap <leader>ss :call StripWhitespace ()<CR>$/;"	m
<leader>t	.vimrc	/^  map <leader>t :NERDTreeFind<CR>$/;"	m
<leader>w	.vimrc	/^  noremap <leader>w :w<CR>$/;"	m
<plug>NERDCommenterAltDelims	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterInsert	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInsert <SPACE><BS><ESC>:call NERDComment('i', "insert")<CR>$/;"	m
?	.vim/plugged/ack.vim/autoload/ack.vim	/^  nnoremap <buffer> <silent> ? :call <SID>QuickHelp()<CR>$/;"	m
?	.vim/plugged/ack.vim/autoload/ack.vim	/^  nnoremap <buffer> <silent> ? :q!<CR>:call ack#ShowResults()<CR>$/;"	m
A	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> A    :<C-u>exe "vertical resize ".(<SID>linechars('.\\{-\\}\\/;"	m
ALEBufferFixGroup	.vim/plugged/ale/autoload/ale/fix.vim	/^augroup ALEBufferFixGroup$/;"	a
ALECleanupGroup	.vim/plugged/ale/plugin/ale.vim	/^augroup ALECleanupGroup$/;"	a
ALECursorGroup	.vim/plugged/ale/plugin/ale.vim	/^    augroup ALECursorGroup$/;"	a
ALEDetail	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEDetail :call ale#cursor#ShowCursorDetail()$/;"	c
ALEDisable	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEDisable :if g:ale_enabled | ALEToggle | endif$/;"	c
ALEEnable	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEEnable :if !g:ale_enabled | ALEToggle | endif$/;"	c
ALEFirst	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEFirst :call ale#loclist_jumping#JumpToIndex(0)$/;"	c
ALEFix	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEFix :call ale#fix#Fix()$/;"	c
ALEFixSuggest	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEFixSuggest :call ale#fix#registry#Suggest(&filetype)$/;"	c
ALEGetStatusLine	.vim/plugged/ale/plugin/ale.vim	/^function! ALEGetStatusLine() abort$/;"	f
ALEHighlightBufferGroup	.vim/plugged/ale/autoload/ale/highlight.vim	/^augroup ALEHighlightBufferGroup$/;"	a
ALEInfo	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEInfo :call ale#debugging#Info()$/;"	c
ALEInfoToClipboard	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEInfoToClipboard :call ale#debugging#InfoToClipboard()$/;"	c
ALEInitAuGroups	.vim/plugged/ale/plugin/ale.vim	/^function! ALEInitAuGroups() abort$/;"	f
ALELast	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALELast :call ale#loclist_jumping#JumpToIndex(-1)$/;"	c
ALELint	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALELint :call ale#Queue(0, 'lint_file')$/;"	c
ALELint	.vim/plugged/ale/plugin/ale.vim	/^function! ALELint(delay) abort$/;"	f
ALENext	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALENext :call ale#loclist_jumping#Jump('after', 0)$/;"	c
ALENextWrap	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALENextWrap :call ale#loclist_jumping#Jump('after', 1)$/;"	c
ALEPatternOptionsGroup	.vim/plugged/ale/plugin/ale.vim	/^    augroup ALEPatternOptionsGroup$/;"	a
ALEPrevious	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEPrevious :call ale#loclist_jumping#Jump('before', 0)$/;"	c
ALEPreviousWrap	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEPreviousWrap :call ale#loclist_jumping#Jump('before', 1)$/;"	c
ALERunOnEnterGroup	.vim/plugged/ale/plugin/ale.vim	/^    augroup ALERunOnEnterGroup$/;"	a
ALERunOnFiletypeChangeGroup	.vim/plugged/ale/plugin/ale.vim	/^    augroup ALERunOnFiletypeChangeGroup$/;"	a
ALERunOnInsertLeave	.vim/plugged/ale/plugin/ale.vim	/^    augroup ALERunOnInsertLeave$/;"	a
ALERunOnSaveGroup	.vim/plugged/ale/plugin/ale.vim	/^    augroup ALERunOnSaveGroup$/;"	a
ALERunOnTextChangedGroup	.vim/plugged/ale/plugin/ale.vim	/^    augroup ALERunOnTextChangedGroup$/;"	a
ALEToggle	.vim/plugged/ale/plugin/ale.vim	/^command! -bar ALEToggle :call s:ALEToggle()$/;"	c
ALLSPHINXOPTS	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
ALLSPHINXOPTS	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/make.bat	/^	set ALLSPHINXOPTS=-D latex_paper_size=%PAPER% %ALLSPHINXOPTS%$/;"	v
ALLSPHINXOPTS	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/make.bat	/^set ALLSPHINXOPTS=-d %BUILDDIR%\/doctrees %SPHINXOPTS% .$/;"	v
ALWAYS	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^ALWAYS = 'always'$/;"	v
ARCHIVE	.vim/plugged/vim-coffee-script/Makefile	/^ARCHIVE = vim-coffee-script-$(VERSION).zip$/;"	m
ARCHIVE_DIRS	.vim/plugged/vim-coffee-script/Makefile	/^ARCHIVE_DIRS = after autoload compiler doc ftdetect ftplugin indent syntax$/;"	m
Ack	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file Ack           call ack#Ack('grep<bang>', <q-args>)$/;"	c
AckAdd	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckAdd        call ack#Ack('grepadd<bang>', <q-args>)$/;"	c
AckFile	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckFile       call ack#Ack('grep<bang> -g', <q-args>)$/;"	c
AckFromSearch	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckFromSearch call ack#AckFromSearch('grep<bang>', <q-arg/;"	c
AckHelp	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=help AckHelp       call ack#AckHelp('grep<bang>', <q-args>)$/;"	c
AckWindow	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=*                AckWindow     call ack#AckWindow('grep<bang>', <q-args>)$/;"	c
AddHighlighting	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^augroup AddHighlighting$/;"	a
AirlineRefresh	.vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineRefresh call s:airline_refresh()$/;"	c
AirlineTheme	.vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airli/;"	c
AirlineToggle	.vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggle call s:airline_toggle()$/;"	c
AirlineToggleWhitespace	.vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()$/;"	c
Align	.vim/plugged/vim-gitgutter/test/runner.vim	/^function Align(left, right)$/;"	f
AnonymousFunctione8eca1130100	.vim/plugged/vim-css-color/tests/example.jsx	/^	render: function() {$/;"	f
BUILDDIR	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^BUILDDIR      = _build$/;"	m
BUILDDIR	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/make.bat	/^set BUILDDIR=_build$/;"	v
Bar	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^class Bar():$/;"	c
Bookmark	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
Bundling EditorConfig Python Core with Plugin	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/plugins.rst	/^Bundling EditorConfig Python Core with Plugin$/;"	s	chapter:Writing Plugins
Bundling as a Submodule in Git	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/plugins.rst	/^Bundling as a Submodule in Git$/;"	S	section:Bundling EditorConfig Python Core with Plugin
Bundling as a Subtree in Git	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/plugins.rst	/^Bundling as a Subtree in Git$/;"	S	section:Bundling EditorConfig Python Core with Plugin
C	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> C    :<C-u>exe "vertical resize ".(<SID>linechars('^\\S\\+')+/;"	m
C	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> C     :<C-U>exe <SID>Edit('edit',0,<SID>buffer().containing_commi/;"	m
C	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> C :<C-U>Gcommit<CR>$/;"	m
CSCOPE_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -R$/;"	v
CSCOPE_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -i %TAGS_FILE%.files$/;"	v
CSCOPE_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_EXE	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CSSColor	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	augroup CSSColor$/;"	a
CTAGS_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
Canvas	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^class Canvas(object):$/;"	c
CanvasTestCase	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^class CanvasTestCase(TestCase):$/;"	c
Checking for Final Newline	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/insert_final_newline.rst	/^Checking for Final Newline$/;"	s	chapter:Insert Final Newline Property
ClearAllBookmarks	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearAllCtrlPCaches	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearAllCtrlPCaches cal ctrlp#clra()$/;"	c
ClearBookmarks	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
ClearCtrlPCache	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearCtrlPCache     cal ctrlp#clr()$/;"	c
CoffeeAuWatch	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^  augroup CoffeeAuWatch$/;"	a
CoffeeBufNew	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^augroup CoffeeBufNew | augroup END$/;"	a
CoffeeBufUpdate	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^augroup CoffeeBufUpdate | augroup END$/;"	a
CoffeeCompile	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^\\        CoffeeCompile call s:CoffeeCompile(<line1>, <line2>, <q-args>)$/;"	c
CoffeeLint	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^command! -buffer -range=% -bang -bar -nargs=* CoffeeLint$/;"	c
CoffeeMake	.vim/plugged/vim-coffee-script/compiler/coffee.vim	/^command! -bang -bar -nargs=* CoffeeMake$/;"	c
CoffeeRun	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^command! -buffer -range=% -bar -nargs=* CoffeeRun$/;"	c
CoffeeUpdateMakePrg	.vim/plugged/vim-coffee-script/compiler/coffee.vim	/^augroup CoffeeUpdateMakePrg$/;"	a
CoffeeWatch	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^\\        CoffeeWatch call s:CoffeeWatch(<q-args>)$/;"	c
Command Line Usage	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/command_line_usage.rst	/^Command Line Usage$/;"	c
Commentary	.vim/plugged/vim-commentary/plugin/commentary.vim	/^command! -range -bar Commentary call s:go(<line1>,<line2>)$/;"	c
CompareRank	.vim/plugged/neocomplete/test/neocomplete.vim	/^  function! CompareRank(i1, i2) abort$/;"	f
CompilerSet	.vim/plugged/vim-javascript/compiler/eslint.vim	/^  command! -nargs=* CompilerSet setlocal <args>$/;"	c
CopyPath	.vimrc	/^  command! -nargs=0 CopyPath execute "let @+ = expand('%')"$/;"	c
CtrlP	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlP         cal ctrlp#init(0, { 'dir': <q-args> })$/;"	c
CtrlPAug	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^	aug CtrlPAug$/;"	a
CtrlPBookmarkDir	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBookmarkDir cal ctrlp#init(ctrlp#bookmarkdir#id())$/;"	c
CtrlPBookmarkDirAdd	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir -bang CtrlPBookmarkDirAdd$/;"	c
CtrlPBufTag	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPBufTag$/;"	c
CtrlPBufTagAll	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBufTagAll cal ctrlp#init(ctrlp#buffertag#cmd(1))$/;"	c
CtrlPBuffer	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBuffer   cal ctrlp#init('buf')$/;"	c
CtrlPChange	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPChange$/;"	c
CtrlPChangeAll	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPChangeAll   cal ctrlp#init(ctrlp#changes#cmd(1))$/;"	c
CtrlPClearAllCaches	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearAllCaches cal ctrlp#clra()$/;"	c
CtrlPClearCache	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearCache     cal ctrlp#clr()$/;"	c
CtrlPCurFile	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurFile cal ctrlp#init('fil', { 'mode': 'c' })$/;"	c
CtrlPCurWD	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurWD   cal ctrlp#init('fil', { 'mode': '' })$/;"	c
CtrlPDir	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPDir$/;"	c
CtrlPLastMode	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? CtrlPLastMode cal ctrlp#init(-1, { 'args': <q-args> })$/;"	c
CtrlPLazy	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^		aug CtrlPLazy$/;"	a
CtrlPLine	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPLine$/;"	c
CtrlPMRUF	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^	aug CtrlPMRUF$/;"	a
CtrlPMRUFiles	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPMRUFiles cal ctrlp#init('mru', { 'dir': <q-args> })$/;"	c
CtrlPMixed	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPMixed       cal ctrlp#init(ctrlp#mixed#id())$/;"	c
CtrlPPyMatch	.vim/plugged/ctrlp-py-matcher/autoload/pymatcher.py	/^def CtrlPPyMatch():$/;"	f
CtrlPQuickfix	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPQuickfix cal ctrlp#init(ctrlp#quickfix#id())$/;"	c
CtrlPRTS	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRTS       cal ctrlp#init(ctrlp#rtscript#id())$/;"	c
CtrlPRoot	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRoot    cal ctrlp#init('fil', { 'mode': 'r' })$/;"	c
CtrlPTag	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPTag      cal ctrlp#init(ctrlp#tag#id())$/;"	c
CtrlPUndo	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPUndo      cal ctrlp#init(ctrlp#undo#id())$/;"	c
D	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
D	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> D    :<C-u>exe "vertical resize ".(<SID>linechars('.\\{-\\}\\/;"	m
D	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> D :<C-U>execute <SID>StageDiff('Gdiff')<CR>$/;"	m
DB_FILE	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
Discovering EditorConfig properties	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/command_line_usage.rst	/^Discovering EditorConfig properties$/;"	s	chapter:Command Line Usage
Discovering EditorConfig properties	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/usage.rst	/^Discovering EditorConfig properties$/;"	s	chapter:Usage
DoneParseArgs	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
EasyAlign	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^command! -nargs=* -range -bang EasyAlign <line1>,<line2>call easy_align#align('<bang>' == '!', 0/;"	c
EditorConfig Project	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/README.rst	/^EditorConfig Project$/;"	c
EditorConfig Python Core	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/README.rst	/^EditorConfig Python Core$/;"	c
EditorConfig Python Core -- Process EditorConfig Files With Python	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/index.rst	/^EditorConfig Python Core -- Process EditorConfig Files With Python$/;"	c
EditorConfigError	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/exceptions.py	/^class EditorConfigError(Exception):$/;"	c
EditorConfigHandler	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/handler.py	/^class EditorConfigHandler(object):$/;"	c
EditorConfigParser	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^class EditorConfigParser(object):$/;"	c
EditorConfigReload	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^command! EditorConfigReload call s:UseConfigFiles() " Reload EditorConfig files$/;"	c
EmojiSort	.vim/plugged/vim-emoji/autoload/emoji.vim	/^    function! EmojiSort(t1, t2)$/;"	f
EnMasse	.vim/plugged/vim-enmasse/plugin/enmasse.vim	/^command! EnMasse :call enmasse#Open()$/;"	c
EnMasseDefault	.vim/plugged/vim-enmasse/plugin/enmasse.vim	/^augroup EnMasseDefault$/;"	a
EnMasseVersion	.vim/plugged/vim-enmasse/plugin/enmasse.vim	/^command! EnMasseVersion :echo enmasse#GetVersion()$/;"	c
Example	.vim/plugged/vim-css-color/tests/example.jsx	/^var Example = React.createClass({$/;"	v
Exception	.vim/plugged/vim-gitgutter/test/runner.vim	/^function Exception()$/;"	f
Exception handling example	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/usage.rst	/^Exception handling example$/;"	S	section:Handling Exceptions
Exceptions module reference	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/usage.rst	/^Exceptions module reference$/;"	S	section:Handling Exceptions
FILE_LIST_CMD	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FZFPreview	.vimrc	/^  function! FZFPreview() " {{{$/;"	f
FastEscape	.vimrc	/^  augroup FastEscape$/;"	a
Filename	.vim/plugged/neosnippet/autoload/neosnippet/init.vim	/^    function! Filename(...) abort$/;"	f
Finding Trailing Whitespace	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/trim_trailing_whitespace.rst	/^Finding Trailing Whitespace$/;"	s	chapter:Trim Trailing Whitespace Property
FormatJSON	.vimrc	/^  command! -nargs=0 FormatJSON execute "%!python -m json.tool"$/;"	c
FriendlyName	.vim/plugged/vim-gitgutter/test/runner.vim	/^function FriendlyName(test_name)$/;"	f
GetCoffeeHtmlIndent	.vim/plugged/vim-coffee-script/after/indent/html.vim	/^function! GetCoffeeHtmlIndent(curlinenum)$/;"	f
GetCoffeeIndent	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! GetCoffeeIndent(curlnum)$/;"	f
GetHandlebarsIndent	.vim/plugged/vim-mustache-handlebars/indent/handlebars.vim	/^function! GetHandlebarsIndent(...)$/;"	f
GetJavascriptIndent	.vim/plugged/vim-javascript/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
GetLitCoffeeIndent	.vim/plugged/vim-coffee-script/indent/litcoffee.vim	/^function GetLitCoffeeIndent()$/;"	f
Getting Help	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/README.rst	/^Getting Help$/;"	c
GitGutter	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 0)$/;"	c
GitGutterAll	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterAll call gitgutter#all()$/;"	c
GitGutterDebug	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterDebug call gitgutter#debug#debug()$/;"	c
GitGutterDisable	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterDisable call gitgutter#disable()$/;"	c
GitGutterEnable	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterEnable  call gitgutter#enable()$/;"	c
GitGutterGetHunkSummary	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunkSummary()$/;"	f
GitGutterGetHunks	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunks()$/;"	f
GitGutterLineHighlightsDisable	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterLineHighlightsDisable call gitgutter#line_highlights_disable()$/;"	c
GitGutterLineHighlightsEnable	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterLineHighlightsEnable  call gitgutter#line_highlights_enable()$/;"	c
GitGutterLineHighlightsToggle	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterLineHighlightsToggle  call gitgutter#line_highlights_toggle()$/;"	c
GitGutterNextHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)$/;"	c
GitGutterPrevHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)$/;"	c
GitGutterPreviewHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterPreviewHunk call gitgutter#preview_hunk()$/;"	c
GitGutterRevertHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterRevertHunk  echomsg 'GitGutterRevertHunk is deprecated. Use GitGutterUndoH/;"	c
GitGutterSignsDisable	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterSignsDisable call gitgutter#signs_disable()$/;"	c
GitGutterSignsEnable	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterSignsEnable  call gitgutter#signs_enable()$/;"	c
GitGutterSignsToggle	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterSignsToggle  call gitgutter#signs_toggle()$/;"	c
GitGutterStageHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterStageHunk   call gitgutter#stage_hunk()$/;"	c
GitGutterToggle	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterToggle  call gitgutter#toggle()$/;"	c
GitGutterUndoHunk	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterUndoHunk    call gitgutter#undo_hunk()$/;"	c
GutentagsToggleEnabled	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUnlock	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^command! GutentagsUnlock :call gutentags#delete_lock_files()$/;"	c
GutentagsUpdate	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
HL	.vim/colors/badwolf.vim	/^function! HL(group, fg, ...)$/;"	f
Handling Exceptions	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/usage.rst	/^Handling Exceptions$/;"	s	chapter:Usage
HiInterestingWord	.vimrc	/^  function! HiInterestingWord(n) " {{{$/;"	f
HiLink	.vim/plugged/vim-javascript/extras/flow.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.vim/plugged/vim-javascript/extras/flow.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.vim/plugged/vim-javascript/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.vim/plugged/vim-javascript/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.vim/plugged/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.vim/plugged/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.vim/syntax/json.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.vim/syntax/json.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	.vim/syntax/ri.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	.vim/syntax/ri.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HtmlHiLink	.vim/plugged/vim-mustache-handlebars/syntax/mustache.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	.vim/plugged/vim-mustache-handlebars/syntax/mustache.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
INDEX_WHOLE_PROJECT	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
INTP_VER	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^INTP_VER = sys.version_info[:2]$/;"	v
IS_PY3	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^IS_PY3 = version_info[0] == 3$/;"	v
Insert Final Newline Property	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/insert_final_newline.rst	/^Insert Final Newline Property$/;"	c
Installation	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/README.rst	/^Installation$/;"	c
Installation	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/usage.rst	/^Installation$/;"	s	chapter:Usage
J	.vimrc	/^  nnoremap J mjJ`j$/;"	m
L	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	.vim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
LAck	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file LAck          call ack#Ack('lgrep<bang>', <q-args>)$/;"	c
LAckAdd	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file LAckAdd       call ack#Ack('lgrepadd<bang>', <q-args>)$/;"	c
LAckHelp	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=help LAckHelp      call ack#AckHelp('lgrep<bang>', <q-args>)$/;"	c
LAckWindow	.vim/plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=*                LAckWindow    call ack#AckWindow('lgrep<bang>', <q-args>)$/;"	c
LEFT_BRACE	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^LEFT_BRACE = re.compile($/;"	v
LOG_FILE	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
Latin1 Character Set	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/charset.rst	/^Latin1 Character Set$/;"	s	chapter:Tests for Newlines
Latin1 Character Set with Unicode	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/charset.rst	/^Latin1 Character Set with Unicode$/;"	s	chapter:Tests for Newlines
License	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/README.rst	/^License$/;"	c
LineTestCase	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^class LineTestCase(TestCase):$/;"	c
LiveEasyAlign	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^command! -nargs=* -range -bang LiveEasyAlign <line1>,<line2>call easy_align#align('<bang>' == '!/;"	c
Log	.vim/plugged/vim-gitgutter/test/runner.vim	/^function Log(msg)$/;"	f
LoopParseArgs	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
MINIMAP	.vim/plugged/vim-minimap/autoload/minimap.py	/^MINIMAP = "vim-minimap"$/;"	v
MarkdownFold	.vim/plugged/vim-markdown/ftplugin/markdown.vim	/^function! MarkdownFold()$/;"	f
MarkdownFoldText	.vim/plugged/vim-markdown/ftplugin/markdown.vim	/^function! MarkdownFoldText()$/;"	f
Minimap	.vim/plugged/vim-minimap/plugin/minimap.vim	/^command! Minimap call minimap#ShowMinimap()$/;"	c
MinimapClose	.vim/plugged/vim-minimap/plugin/minimap.vim	/^command! MinimapClose call minimap#CloseMinimap()$/;"	c
MinimapToggle	.vim/plugged/vim-minimap/plugin/minimap.vim	/^command! MinimapToggle call minimap#ToggleMinimap()$/;"	c
MinimapUpdate	.vim/plugged/vim-minimap/plugin/minimap.vim	/^command! MinimapUpdate call minimap#UpdateMinimap()$/;"	c
Multiple Cursors	.vim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^describe "Multiple Cursors" do$/;"	d
Multiple Cursors	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors" do$/;"	d
Multiple Cursors op pending & exit from insert|visual mode	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors op pending & exit from insert|visual mode" do$/;"	d
Multiple Cursors when normal_maps is empty	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors when normal_maps is empty" do$/;"	d
Multiple Cursors when visual_maps is empty	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^describe "Multiple Cursors when visual_maps is empty" do$/;"	d
MultipleCursorsFind	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^command! -nargs=1 -range=% MultipleCursorsFind$/;"	c
MyAppend1	.vim/plugged/vim-airline/t/airline.vim	/^function! MyAppend1(...)$/;"	f
MyAppend2	.vim/plugged/vim-airline/t/airline.vim	/^function! MyAppend2(...)$/;"	f
MyFuncref	.vim/plugged/vim-airline/t/airline.vim	/^function! MyFuncref(...)$/;"	f
MyIgnoreFuncref	.vim/plugged/vim-airline/t/airline.vim	/^function! MyIgnoreFuncref(...)$/;"	f
NERDComment	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function! NERDComment(mode, type) range$/;"	f
NERDCommentIsLineCommented	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function! NERDCommentIsLineCommented(lineNo)$/;"	f
NERDCommenter	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^augroup NERDCommenter$/;"	a
NERDCompactSexyComs	.vimrc	/^  let NERDCompactSexyComs=1$/;"	v
NERDSpaceDelims	.vimrc	/^  let NERDSpaceDelims=1$/;"	v
NERDTree	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTreeAddKeyMap	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeClose	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	.vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	.vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeFind	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFocus	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeGetCWDGitStatus	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! g:NERDTreeGetCWDGitStatus()$/;"	f
NERDTreeGetGitStatusPrefix	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! g:NERDTreeGetGitStatusPrefix(path)$/;"	f
NERDTreeGitStatusRefresh	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! g:NERDTreeGitStatusRefresh()$/;"	f
NERDTreeGitStatusRefreshListener	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! NERDTreeGitStatusRefreshListener(event)$/;"	f
NERDTreeHijackNetrw	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealInFinder	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeToggle	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NEVER	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^NEVER = 'never'$/;"	v
NUMERIC_RANGE	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^NUMERIC_RANGE = re.compile($/;"	v
NeoCompleteAutoCompletionLength	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^  command! -nargs=1 NeoCompleteAutoCompletionLength$/;"	c
NeoCompleteBufferMakeCache	.vim/plugged/neocomplete/plugin/neocomplete/buffer.vim	/^      \\ NeoCompleteBufferMakeCache$/;"	c
NeoCompleteClean	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteClean$/;"	c
NeoCompleteDictionaryMakeCache	.vim/plugged/neocomplete/plugin/neocomplete/dictionary.vim	/^      \\ NeoCompleteDictionaryMakeCache$/;"	c
NeoCompleteDisable	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^  command! -nargs=0 -bar NeoCompleteDisable$/;"	c
NeoCompleteDisable	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteDisable$/;"	c
NeoCompleteEnable	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteEnable$/;"	c
NeoCompleteLock	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteLock$/;"	c
NeoCompleteMemberMakeCache	.vim/plugged/neocomplete/plugin/neocomplete/member.vim	/^      \\ NeoCompleteMemberMakeCache$/;"	c
NeoCompleteSetFileType	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^command! -nargs=1 -bar -complete=filetype NeoCompleteSetFileType$/;"	c
NeoCompleteTagMakeCache	.vim/plugged/neocomplete/plugin/neocomplete/tag.vim	/^      \\ NeoCompleteTagMakeCache$/;"	c
NeoCompleteToggle	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteToggle$/;"	c
NeoCompleteUnlock	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteUnlock$/;"	c
NeoSnippetClearMarkers	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^command! -bar NeoSnippetClearMarkers$/;"	c
NeoSnippetEdit	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^      \\ NeoSnippetEdit$/;"	c
NeoSnippetMakeCache	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^      \\ NeoSnippetMakeCache$/;"	c
NeoSnippetSource	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^      \\ NeoSnippetSource$/;"	c
NeosnippetSnippets_Goiferr	.vim/plugged/neosnippet-snippets/neosnippets/go.vim	/^function! g:NeosnippetSnippets_Goiferr() abort$/;"	f
Not Trimming Whitespace	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/trim_trailing_whitespace.rst	/^Not Trimming Whitespace$/;"	s	chapter:Trim Trailing Whitespace Property
O	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> O    :<C-U>exe <SID>BlameCommit("tabedit")<CR>$/;"	m
O	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> O     :<C-U>exe <SID>GF("tabedit")<CR>$/;"	m
OPTCRE	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^    OPTCRE = re.compile($/;"	v	class:EditorConfigParser
Old Mac-style Newlines	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/end_of_line.rst	/^Old Mac-style Newlines$/;"	S	section:Tests for Newlines
OpenBookmark	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark :call/;"	c
OrderedDict	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^class OrderedDict(dict):$/;"	c
P	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> P    :<C-U>exe <SID>BlameJump('^'.v:count1)<CR>$/;"	m
P	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> P     :<C-U>exe <SID>Edit('edit',0,<SID>buffer().commit().'^'.v:c/;"	m
P	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> P :<C-U>execute <SID>StagePatch(line('.'),line('.')+v:count1-1)<C/;"	m
P	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    xnoremap <buffer> <silent> P :<C-U>execute <SID>StagePatch(line("'<"),line("'>"))<CR>$/;"	m
PAPER	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^PAPER         =$/;"	m
PAPER	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/make.bat	/^	echo.  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter$/;"	v
PAPEROPT_a4	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PAUSE_BEFORE_EXIT	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PY3	.vim/plugged/vim-minimap/autoload/minimap.py	/^PY3 = sys.version_info[0] == 3$/;"	v
ParseArgs	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParsingError	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/exceptions.py	/^class ParsingError(_ParsingError, EditorConfigError):$/;"	c
PathError	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/exceptions.py	/^class PathError(ValueError, EditorConfigError):$/;"	c
Plug	.vim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	.vim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	.vim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
PluginXoloxHideMode	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^      augroup PluginXoloxHideMode$/;"	a
PluginXoloxMisc	.vim/plugged/vim-misc/plugin/xolox/misc.vim	/^augroup PluginXoloxMisc$/;"	a
Point3D	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^class Point3D:$/;"	c
Pulse	.vimrc	/^  command! -nargs=0 Pulse call s:Pulse()$/;"	c
R	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
R	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> R :<C-U>edit<CR>$/;"	m
R	.vimrc	/^  command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile/;"	c
REF	.vim/plugged/vim-coffee-script/Makefile	/^REF = HEAD$/;"	m
RIGHT_BRACE	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^RIGHT_BRACE = re.compile($/;"	v
RainbowParenthesesActivate	.vim/plugged/rainbow_parentheses.vim/plugin/rainbow_parentheses.vim	/^com! RainbowParenthesesActivate     cal rainbow_parentheses#activate()$/;"	c
RainbowParenthesesLoadBraces	.vim/plugged/rainbow_parentheses.vim/plugin/rainbow_parentheses.vim	/^com! RainbowParenthesesLoadBraces   cal rainbow_parentheses#load(2)$/;"	c
RainbowParenthesesLoadChevrons	.vim/plugged/rainbow_parentheses.vim/plugin/rainbow_parentheses.vim	/^com! RainbowParenthesesLoadChevrons cal rainbow_parentheses#load(3)$/;"	c
RainbowParenthesesLoadRound	.vim/plugged/rainbow_parentheses.vim/plugin/rainbow_parentheses.vim	/^com! RainbowParenthesesLoadRound    cal rainbow_parentheses#load(0)$/;"	c
RainbowParenthesesLoadSquare	.vim/plugged/rainbow_parentheses.vim/plugin/rainbow_parentheses.vim	/^com! RainbowParenthesesLoadSquare   cal rainbow_parentheses#load(1)$/;"	c
RainbowParenthesesToggle	.vim/plugged/rainbow_parentheses.vim/plugin/rainbow_parentheses.vim	/^com! RainbowParenthesesToggle       cal rainbow_parentheses#toggle()$/;"	c
RainbowParenthesesToggleAll	.vim/plugged/rainbow_parentheses.vim/plugin/rainbow_parentheses.vim	/^com! RainbowParenthesesToggleAll    cal rainbow_parentheses#toggleall()$/;"	c
Random	.vim/plugged/vim-gitgutter/test/runner.vim	/^function Random(min, max)$/;"	f
ReadBookmarks	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
RevealBookmark	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
Ri	.vim/ftplugin/ri.vim	/^augroup Ri$/;"	a
Ri	.vim/ftplugin/ri.vim	/^command! -nargs=1 Ri	   :call Ri('<args>', 0)$/;"	c
Ri	.vim/ftplugin/ri.vim	/^function! Ri(term, expand)$/;"	f
RiExpand	.vim/ftplugin/ri.vim	/^command! -nargs=1 RiExpand :call Ri('<args>', 1)$/;"	c
RunTest	.vim/plugged/vim-gitgutter/test/runner.vim	/^function RunTest(test)$/;"	f
Running Test Cases	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/README.rst	/^Running Test Cases$/;"	c
Running Tests	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/README.rst	/^Running Tests$/;"	s	chapter:Tests for EditorConfig Plugins
S	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> S     :<C-U>exe <SID>GF("vsplit")<CR>$/;"	m
S	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  nmap S <Plug>Sneak_S$/;"	m
S	.vim/plugged/vim-surround/plugin/surround.vim	/^  xmap S   <Plug>VSurround$/;"	m
SECTCRE	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^    SECTCRE = re.compile($/;"	v	class:EditorConfigParser
SPHINXBUILD	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXBUILD	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/make.bat	/^	set SPHINXBUILD=sphinx-build$/;"	v
SPHINXOPTS	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^SPHINXOPTS    =$/;"	m
SectionSpec	.vim/plugged/vim-airline/t/section.vim	/^function! SectionSpec()$/;"	f
SetUp	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function SetUp()$/;"	f
ShowUsage	.vim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	.vim/plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Shuffle	.vim/plugged/vim-gitgutter/test/runner.vim	/^function Shuffle(list)$/;"	f
SneakEcho	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^  augroup SneakEcho$/;"	a
SneakPlugin	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  augroup SneakPlugin$/;"	a
SneakPluginNetrw	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  augroup SneakPluginNetrw$/;"	a
SnippetsIndent	.vim/plugged/neosnippet/indent/neosnippet.vim	/^function! SnippetsIndent() abort "{{{$/;"	f
SolarizedHiTrail	.vim/colors/solarized.vim	/^augroup SolarizedHiTrail$/;"	a
SolarizedMenu	.vim/colors/solarized.vim	/^function! SolarizedMenu()$/;"	f
SolarizedOptions	.vim/colors/solarized.vim	/^    command SolarizedOptions :call s:SolarizedOptions()$/;"	c
Source	.vim/plugged/neosnippet/rplugin/python3/deoplete/sources/neosnippet.py	/^class Source(Base):$/;"	c
Space-based indentation	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^Space-based indentation$/;"	s	chapter:Tests for Indentation Properties
Space-based indentation with no size specified	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^Space-based indentation with no size specified$/;"	S	section:Space-based indentation
StripWhitespace	.vimrc	/^  function! StripWhitespace () " {{{$/;"	f
SumNumbers_Float	.vim/plugin/visSum.vim	/^function! <SID>SumNumbers_Float(...) range  "{{{$/;"	f
SumNumbers_Int	.vim/plugin/visSum.vim	/^function! <SID>SumNumbers_Int(...) range  "{{{$/;"	f
TAGS_FILE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
Tab-based indentation	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^Tab-based indentation$/;"	s	chapter:Tests for Indentation Properties
Tab-based indentation with no size specified	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^Tab-based indentation with no size specified$/;"	S	section:Tab-based indentation
Tab-based indentation with size of 4	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^Tab-based indentation with size of 4$/;"	S	section:Tab-based indentation
Tab-based indentation with size of 4 and tab width of 8	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^Tab-based indentation with size of 4 and tab width of 8$/;"	S	section:Tab-based indentation
Tagbar	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 Tagbar              call tagbar#ToggleWindow()$/;"	c
TagbarAutoCmds	.vim/plugged/tagbar/autoload/tagbar.vim	/^    augroup TagbarAutoCmds$/;"	a
TagbarBalloonExpr	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarClose	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarGetTypeConfig	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarOpen	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	.vim/plugged/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call tagbar#ToggleWindow()$/;"	c
TagbarTogglePause	.vim/plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
TearDown	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function TearDown()$/;"	f
Test for Newline	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/insert_final_newline.rst	/^Test for Newline$/;"	S	section:Tests for Newline at end of File
Test for No Newline	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/insert_final_newline.rst	/^Test for No Newline$/;"	S	section:Tests for Newline at end of File
Test_add_lines	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines()$/;"	f
Test_add_lines_fish	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines_fish()$/;"	f
Test_edit_file_with_same_name_as_a_branch	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_edit_file_with_same_name_as_a_branch()$/;"	f
Test_file_added_to_git	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_added_to_git()$/;"	f
Test_filename_with_equals	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_equals()$/;"	f
Test_filename_with_square_brackets	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_square_brackets()$/;"	f
Test_follow_symlink	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_follow_symlink()$/;"	f
Test_hunk_outside_noop	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_outside_noop()$/;"	f
Test_hunk_stage	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage()$/;"	f
Test_hunk_stage_nearby_hunk	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_nearby_hunk()$/;"	f
Test_hunk_undo	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo()$/;"	f
Test_keep_alt	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_alt()$/;"	f
Test_keep_modified	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_modified()$/;"	f
Test_keep_op_marks	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_op_marks()$/;"	f
Test_modify_lines	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_modify_lines()$/;"	f
Test_no_modifications	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_no_modifications()$/;"	f
Test_orphaned_signs	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_orphaned_signs()$/;"	f
Test_remove_first_lines	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_first_lines()$/;"	f
Test_remove_lines	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_lines()$/;"	f
Test_sign_column_always	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_sign_column_always()$/;"	f
Test_undo_nearby_hunk	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_undo_nearby_hunk()$/;"	f
Test_untracked_file_outside_repo	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_outside_repo()$/;"	f
Test_untracked_file_square_brackets_within_repo	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_square_brackets_within_repo()$/;"	f
Test_untracked_file_within_repo	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_within_repo()$/;"	f
Tests for EditorConfig Plugins	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/README.rst	/^Tests for EditorConfig Plugins$/;"	c
Tests for End of Line Property	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/end_of_line.rst	/^Tests for End of Line Property$/;"	c
Tests for Indentation Properties	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/indentation.rst	/^Tests for Indentation Properties$/;"	c
Tests for Newline at end of File	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/insert_final_newline.rst	/^Tests for Newline at end of File$/;"	s	chapter:Insert Final Newline Property
Tests for Newlines	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/charset.rst	/^Tests for Newlines$/;"	c
Tests for Newlines	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/end_of_line.rst	/^Tests for Newlines$/;"	s	chapter:Tests for End of Line Property
Trim Trailing Whitespace Property	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/trim_trailing_whitespace.rst	/^Trim Trailing Whitespace Property$/;"	c
Trimming Whitespace	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/trim_trailing_whitespace.rst	/^Trimming Whitespace$/;"	s	chapter:Trim Trailing Whitespace Property
Turtle	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^class Turtle(Canvas):$/;"	c
TurtleTestCase	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^class TurtleTestCase(TestCase):$/;"	c
U	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	.vim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> U :<C-U>execute <SID>StageUndo()<CR>$/;"	m
U	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    nmap U <Plug>(RepeatUndoLine)$/;"	m
UPDATED_SOURCE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
UTF-16BE Character Set	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/charset.rst	/^UTF-16BE Character Set$/;"	s	chapter:Tests for Newlines
UTF-16LE Character Set	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/charset.rst	/^UTF-16LE Character Set$/;"	s	chapter:Tests for Newlines
UTF-8 Character Set	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/charset.rst	/^UTF-8 Character Set$/;"	s	chapter:Tests for Newlines
UTF-8 with BOM Character Set	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/charset.rst	/^UTF-8 with BOM Character Set$/;"	s	chapter:Tests for Newlines
UnDo	.vim/undo/%Users%jose.represa%workspace%60fps-workshop%assets%css%bootstrap.min.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%60fps-workshop%assets%css%botstrap-theme.min.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%60fps-workshop%assets%css%ie10-viewport-workaround.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%bbvabuzz-sources%html%yuidoc%default%assets%css%custom.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%check-in-ftw%app%src%main%assets%styles%bootstrap.min.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%check-in-ftw%app%src%main%assets%styles%custom.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%check-in-ftw%app%src%main%assets%styles%select2-bootstrap.min.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%check-in-ftw%app%src%main%assets%styles%select2.min.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%examples-responsive-pwa%challenge%css%style.css	/^VimüUnDoÂekheader h1{5Å_–nav i.fa {  .menu {}5Å_–  .fa.fa {5Å_–  .fa.fa {  .fa.fa {5Å_– { /;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%messyblonde%wp-content%themes%activello%inc%css%custom.css	/^VimüUnDoÂ: -15px;ıat;/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%mws-restaurant-stage-1%css%styles.css	/^VimüUnDoÂˇ    margin5Å_–Y⁄Qè/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%classes.css	/^VimüUnDoÂ163b6;    padding-left: 16px;5Å_–		flex: 1;5Å_–		flex: 3;5Å_–Åì˘		flex: 0;center;x s/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%component-list.css	/^VimüUnDoÂ    background-color: #2ecc71;ı/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%components.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%index.css	/^VimüUnDoÂontent__detail h2, .wiki-content__detail h3, .wiki-content__detail h4{ relative;.sideba/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%layout.css	/^VimüUnDoÂ3e8a } *\/5Å_–round-image: url(..\/img\/bg-menu.svg);ı.apidocs {.sidebar {5Å_–W /;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%main.css	/^VimüUnDoÂ@font-face {C9;5Å_–.example {; \/* webkit *\/.apidocs {pre.code {.apidocs {ht {5Å_–ˇˇ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%prettify.css	/^VimüUnDoÂ/;"	s
UnDo	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%wiki.css	/^VimüUnDoÂ  left: 0;ˇˇ.sidebar {5Å_–	: center;ız	.content {.sidebar {;.apis li {.apidocs {/;"	s
Unix-style Newlines	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/end_of_line.rst	/^Unix-style Newlines$/;"	S	section:Tests for Newlines
Unlock	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Usage	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/usage.rst	/^Usage$/;"	c
Usage	.vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Use as a library	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/plugins.rst	/^Use as a library$/;"	s	chapter:Writing Plugins
Using as a Library	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/README.rst	/^Using as a Library$/;"	c
Using with an external Python interpreter	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/plugins.rst	/^Using with an external Python interpreter$/;"	s	chapter:Writing Plugins
Util1	.vim/plugged/vim-airline/t/util.vim	/^function! Util1()$/;"	f
Util2	.vim/plugged/vim-airline/t/util.vim	/^function! Util2()$/;"	f
Util3	.vim/plugged/vim-airline/t/util.vim	/^function! Util3(...)$/;"	f
VERSION	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/__init__.py	/^VERSION = (0, 12, 0, "final")$/;"	v
VERSION	.vim/plugged/vim-coffee-script/Makefile	/^VERSION = $(shell git describe --always $(REF))$/;"	m
VIM	.vim/plugged/vim-sneak/Makefile	/^VIM = vim -N -u NORC -i NONE --cmd 'set rtp+=tests\/vader rtp+=tests\/repeat rtp+=$$PWD'$/;"	m
Verifying Character Set	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/charset.rst	/^Verifying Character Set$/;"	c
Verifying Newline Style	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/end_of_line.rst	/^Verifying Newline Style$/;"	s	chapter:Tests for End of Line Property
VersionError	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/exceptions.py	/^class VersionError(ValueError, EditorConfigError):$/;"	c
Vim	.vim/undo/%Users%jose.represa%workspace%60fps-workshop%assets%css%bootstrap.min.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%60fps-workshop%assets%css%botstrap-theme.min.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%60fps-workshop%assets%css%ie10-viewport-workaround.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%bbvabuzz-sources%html%yuidoc%default%assets%css%custom.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%check-in-ftw%app%src%main%assets%styles%bootstrap.min.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%check-in-ftw%app%src%main%assets%styles%custom.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%check-in-ftw%app%src%main%assets%styles%select2-bootstrap.min.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%check-in-ftw%app%src%main%assets%styles%select2.min.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%examples-responsive-pwa%challenge%css%style.css	/^VimüUnDoÂekheader h1{5Å_–nav i.fa {  .menu {}5Å_–  .fa.fa {5Å_–  .fa.fa {  .fa.fa {5Å_– { /;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%messyblonde%wp-content%themes%activello%inc%css%custom.css	/^VimüUnDoÂ: -15px;ıat;/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%mws-restaurant-stage-1%css%styles.css	/^VimüUnDoÂˇ    margin5Å_–Y⁄Qè/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%classes.css	/^VimüUnDoÂ163b6;    padding-left: 16px;5Å_–		flex: 1;5Å_–		flex: 3;5Å_–Åì˘		flex: 0;center;x s/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%component-list.css	/^VimüUnDoÂ    background-color: #2ecc71;ı/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%components.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%index.css	/^VimüUnDoÂontent__detail h2, .wiki-content__detail h3, .wiki-content__detail h4{ relative;.sideba/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%layout.css	/^VimüUnDoÂ3e8a } *\/5Å_–round-image: url(..\/img\/bg-menu.svg);ı.apidocs {.sidebar {5Å_–W /;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%main.css	/^VimüUnDoÂ@font-face {C9;5Å_–.example {; \/* webkit *\/.apidocs {pre.code {.apidocs {ht {5Å_–ˇˇ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%prettify.css	/^VimüUnDoÂ/;"	s
Vim	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%wiki.css	/^VimüUnDoÂ  left: 0;ˇˇ.sidebar {5Å_–	: center;ız	.content {.sidebar {;.apis li {.apidocs {/;"	s
VimüUnDoÂ	.vim/undo/%Users%jose.represa%.gradle%gradle.properties	/^VimüUnDoÂY¬/;"	k
VimüUnDoÂclean	.vim/undo/%Users%jose.represa%workspace%bbvabuzz-sources%html%bin%build.sh	/^VimüUnDoÂconst conditionalCall = (condition, func, ...args) => { APPCACHE = [pcache',emaps}`,cli/;"	f
VisSum	.vim/plugin/visSum.vim	/^	command! -nargs=? -range -register VisSum call <SID>SumNumbers_Float("<reg>")$/;"	c
VisSum	.vim/plugin/visSum.vim	/^	command! -nargs=? -range -register VisSum call <SID>SumNumbers_Int("<reg>")$/;"	c
W	.vimrc	/^  command! W w$/;"	c
WIDTH	.vim/plugged/vim-minimap/autoload/minimap.py	/^WIDTH = 20$/;"	v
WP	.vimrc	/^  com! WP call WordProcessorMode()$/;"	c
Windows-style Newlines	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/tests/end_of_line.rst	/^Windows-style Newlines$/;"	S	section:Tests for Newlines
WordProcessorMode	.vimrc	/^  function! WordProcessorMode() " {{{$/;"	f
WriteBookmarks	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
Writing Plugins	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/plugins.rst	/^Writing Plugins$/;"	c
X	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
Y	.vimrc	/^  nnoremap Y y\$$/;"	m
Z	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  omap Z <Plug>Sneak_S$/;"	m
Z	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  xmap Z <Plug>Sneak_S$/;"	m
[[	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[[	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^nnoremap <silent> <buffer> [[ :<C-U>call <SID>sectionmovement('{{','b','n',v:count1)<CR>$/;"	m
[[	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^xnoremap <silent> <buffer> [[ :<C-U>call <SID>sectionmovement('{{','b','v',v:count1)<CR>$/;"	m
[c	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    nmap [c <Plug>GitGutterPrevHunk$/;"	m
\\	.vim/plugged/vim-sneak/plugin/sneak.vim	/^    nmap \\ <Plug>Sneak_,$/;"	m
\\	.vim/plugged/vim-sneak/plugin/sneak.vim	/^    omap \\ <Plug>Sneak_,$/;"	m
\\	.vim/plugged/vim-sneak/plugin/sneak.vim	/^    xmap \\ <Plug>Sneak_,$/;"	m
]]	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]]	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^nnoremap <silent> <buffer> ]] :<C-U>call <SID>sectionmovement('{{','' ,'n',v:count1)<CR>$/;"	m
]]	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^xnoremap <silent> <buffer> ]] :<C-U>call <SID>sectionmovement('{{','' ,'v',v:count1)<CR>$/;"	m
]c	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    nmap ]c <Plug>GitGutterNextHunk$/;"	m
_	.vim/undo/%Users%jose.represa%workspace%mws-restaurant-stage-1%css%styles.css	/^VimüUnDoÂˇ    margin5Å_–Y⁄Qè/;"	s
_	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%classes.css	/^VimüUnDoÂ163b6;    padding-left: 16px;5Å_–		flex: 1;5Å_–		flex: 3;5Å_–Åì˘		flex: 0;center;x s/;"	s
_ParsingError	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/exceptions.py	/^    from ConfigParser import ParsingError as _ParsingError$/;"	x
_ParsingError	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/exceptions.py	/^    from configparser import ParsingError as _ParsingError$/;"	x
__all__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/__init__.py	/^__all__ = ['get_properties', 'EditorConfigError', 'exceptions']$/;"	v
__all__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/compat.py	/^__all__ = ['force_unicode', 'u']$/;"	v
__all__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^__all__ = ["fnmatch", "fnmatchcase", "translate"]$/;"	v
__all__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/handler.py	/^__all__ = ['EditorConfigHandler']$/;"	v
__all__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^__all__ = ["ParsingError", "EditorConfigParser"]$/;"	v
__all__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^__all__ = ['OrderedDict']$/;"	v
__all__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/versiontools.py	/^__all__ = ['join_version', 'split_version']$/;"	v
__deepcopy__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __deepcopy__(self, memo):$/;"	m	class:OrderedDict
__delitem__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __delitem__(self, key):$/;"	m	class:OrderedDict
__docformat__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^__docformat__ = "restructuredtext en"$/;"	v
__eq__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __eq__(self, other):$/;"	m	class:OrderedDict
__ge__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __ge__(self, other):$/;"	m	class:OrderedDict
__getattr__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __getattr__(self, name):$/;"	m	class:OrderedDict
__getitem__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __getitem__(self, key):$/;"	m	class:OrderedDict
__gt__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __gt__(self, other):$/;"	m	class:OrderedDict
__init__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/handler.py	/^    def __init__(self, filepath, conf_filename='.editorconfig',$/;"	m	class:EditorConfigHandler
__init__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^    def __init__(self, filename):$/;"	m	class:EditorConfigParser
__init__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __init__(self, init_val=(), strict=False):$/;"	m	class:OrderedDict
__init__	.vim/plugged/neosnippet/rplugin/python3/deoplete/sources/neosnippet.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def __init__(self, line_ending=os.linesep):$/;"	m	class:Canvas
__init__	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def __init__(self, pos_x=0, pos_y=0):$/;"	m	class:Turtle
__init__	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^    def __init__(self, bar_width, cap_height=4, space=3*13):$/;"	m	class:Bar
__init__	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def __init__(self, x = 0, y = 0, z = 0):$/;"	m	class:Point3D
__iter__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    __iter__ = iterkeys$/;"	v	class:OrderedDict	file:
__le__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __le__(self, other):$/;"	m	class:OrderedDict
__lt__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __lt__(self, other):$/;"	m	class:OrderedDict
__main__	.vim/plugged/vim-minimap/autoload/drawille/examples/image2term.py	/^def __main__():$/;"	f
__main__	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^def __main__(stdscr, projection=False):$/;"	f
__main__	.vim/plugged/vim-minimap/autoload/drawille/examples/sine_tracking.py	/^def __main__():$/;"	f
__ne__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __ne__(self, other):$/;"	m	class:OrderedDict
__repr__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __repr__(self):$/;"	m	class:OrderedDict
__setattr__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __setattr__(self, name, value):$/;"	m	class:OrderedDict
__setitem__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def __setitem__(self, key, val):$/;"	m	class:OrderedDict
__str__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    __str__ = __repr__$/;"	v	class:OrderedDict	file:
__version__	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/__init__.py	/^__version__ = join_version(VERSION)$/;"	v
_cache	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^_cache = {}$/;"	v
_escape	.vim/plugged/ctrlp-py-matcher/autoload/pymatcher.py	/^_escape = dict((c , "\\\\" + c) for c in ['^','$','.','{','}','(',')','[',']','\\\\','\/','+'])$/;"	v
_parse_comments	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def _parse_comments(s):$/;"	f
_read	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^    def _read(self, fp, fpname):$/;"	m	class:EditorConfigParser
_version_re	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/versiontools.py	/^_version_re = re.compile(r'^(\\d+)\\.(\\d+)\\.(\\d+)(\\..*)?$', re.VERBOSE)$/;"	v
a	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> a :<C-U>let b:fugitive_display_format += v:count1<Bar>exe <SI/;"	m
a	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> a :<C-U>let b:fugitive_display_format += 1<Bar>exe <SID>BufReadIn/;"	m
ac	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    omap ac <Plug>GitGutterTextObjectOuterPending$/;"	m
ac	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    xmap ac <Plug>GitGutterTextObjectOuterVisual$/;"	m
ack#Ack	.vim/plugged/ack.vim/autoload/ack.vim	/^function! ack#Ack(cmd, args) "{{{$/;"	f
ack#AckFromSearch	.vim/plugged/ack.vim/autoload/ack.vim	/^function! ack#AckFromSearch(cmd, args) "{{{$/;"	f
ack#AckHelp	.vim/plugged/ack.vim/autoload/ack.vim	/^function! ack#AckHelp(cmd, args) "{{{$/;"	f
ack#AckWindow	.vim/plugged/ack.vim/autoload/ack.vim	/^function! ack#AckWindow(cmd, args) "{{{$/;"	f
ack#ShowResults	.vim/plugged/ack.vim/autoload/ack.vim	/^function! ack#ShowResults() "{{{$/;"	f
ack_config	.vimrc	/^augroup ack_config$/;"	a
ae	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  onoremap <silent> <buffer> ae :<C-U>call <SID>wrap_around()<CR>$/;"	m
ae	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  xnoremap <silent> <buffer> ae :<C-U>call <SID>wrap_around()<CR>$/;"	m
after	.vim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def after(string)$/;"	f
after	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def after(string)$/;"	f
airline	.vim/plugged/vim-airline/plugin/airline.vim	/^    augroup airline$/;"	a
airline#add_inactive_statusline_func	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_func(name)$/;"	f
airline#add_statusline_func	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_func(name)$/;"	f
airline#add_statusline_funcref	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_funcref(function)$/;"	f
airline#builder#new	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#new(context)$/;"	f
airline#check_mode	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#check_mode(winnr)$/;"	f
airline#cmdwinenter	.vim/plugged/vim-airline/plugin/airline.vim	/^function! airline#cmdwinenter(...)$/;"	f
airline#debug#profile1	.vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile1()$/;"	f
airline#debug#profile2	.vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile2()$/;"	f
airline#debug#profile3	.vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile3()$/;"	f
airline#extensions#ale#get_errors	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_errors()$/;"	f
airline#extensions#ale#get_warnings	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_warnings()$/;"	f
airline#extensions#ale#init	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#init(ext)$/;"	f
airline#extensions#append_to_section	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#append_to_section(name, value)$/;"	f
airline#extensions#apply	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply(...)$/;"	f
airline#extensions#apply_left_override	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply_left_override(section1, section2)$/;"	f
airline#extensions#branch#get_head	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#get_head()$/;"	f
airline#extensions#branch#head	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#head()$/;"	f
airline#extensions#branch#init	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#init(ext)$/;"	f
airline#extensions#bufferline#init	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^function! airline#extensions#bufferline#init(ext)$/;"	f
airline#extensions#capslock#init	.vim/plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#init(ext)$/;"	f
airline#extensions#capslock#status	.vim/plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#status()$/;"	f
airline#extensions#commandt#apply	.vim/plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#apply(...)$/;"	f
airline#extensions#commandt#init	.vim/plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#init(ext)$/;"	f
airline#extensions#csv#apply	.vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#apply(...)$/;"	f
airline#extensions#csv#get_column	.vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#get_column()$/;"	f
airline#extensions#csv#init	.vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#init(ext)$/;"	f
airline#extensions#ctrlp#apply	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#apply(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline_status	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline_status(...)$/;"	f
airline#extensions#ctrlp#generate_color_map	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#generate_color_map(dark, light, white)$/;"	f
airline#extensions#ctrlp#init	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#init(ext)$/;"	f
airline#extensions#ctrlp#load_theme	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#load_theme(palette)$/;"	f
airline#extensions#ctrlspace#init	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#init(ext)$/;"	f
airline#extensions#ctrlspace#statusline	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#statusline(...)$/;"	f
airline#extensions#default#apply	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! airline#extensions#default#apply(builder, context)$/;"	f
airline#extensions#denite#apply	.vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#apply(...)$/;"	f
airline#extensions#denite#check_denite_mode	.vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#check_denite_mode(bufnr)$/;"	f
airline#extensions#denite#init	.vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#init(ext)$/;"	f
airline#extensions#eclim#creat_line	.vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#creat_line(...)$/;"	f
airline#extensions#eclim#get_warnings	.vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#get_warnings()$/;"	f
airline#extensions#eclim#init	.vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#init(ext)$/;"	f
airline#extensions#example#apply	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#apply(...)$/;"	f
airline#extensions#example#get_cats	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#get_cats()$/;"	f
airline#extensions#example#init	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#init(ext)$/;"	f
airline#extensions#hunks#get_hunks	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_hunks()$/;"	f
airline#extensions#hunks#init	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#init(ext)$/;"	f
airline#extensions#load	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load()$/;"	f
airline#extensions#load_theme	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load_theme()$/;"	f
airline#extensions#neomake#get_errors	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_errors()$/;"	f
airline#extensions#neomake#get_warnings	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_warnings()$/;"	f
airline#extensions#neomake#init	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#init(ext)$/;"	f
airline#extensions#netrw#apply	.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#apply(...)$/;"	f
airline#extensions#netrw#init	.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#init(ext)$/;"	f
airline#extensions#netrw#sortstring	.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#sortstring()$/;"	f
airline#extensions#nrrwrgn#apply	.vim/plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#apply(...)$/;"	f
airline#extensions#nrrwrgn#init	.vim/plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#init(ext)$/;"	f
airline#extensions#obsession#get_status	.vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#get_status()$/;"	f
airline#extensions#obsession#init	.vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#init(ext)$/;"	f
airline#extensions#po#apply	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#apply(...)$/;"	f
airline#extensions#po#init	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#init(ext)$/;"	f
airline#extensions#po#stats	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#stats()$/;"	f
airline#extensions#prepend_to_section	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#prepend_to_section(name, value)$/;"	f
airline#extensions#promptline#init	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#init(ext)$/;"	f
airline#extensions#promptline#set_prompt_colors	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#set_prompt_colors(palette)$/;"	f
airline#extensions#quickfix#apply	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#apply(...)$/;"	f
airline#extensions#quickfix#inactive_qf_window	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#inactive_qf_window(...)$/;"	f
airline#extensions#quickfix#init	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#init(ext)$/;"	f
airline#extensions#syntastic#get_warnings	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_warnings()$/;"	f
airline#extensions#syntastic#init	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#init(ext)$/;"	f
airline#extensions#tabline#autoshow#off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#off()$/;"	f
airline#extensions#tabline#autoshow#on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#on()$/;"	f
airline#extensions#tabline#buffers#clickbuf	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#clickbuf(minwid, clicks, button, modifiers) abort$/;"	f
airline#extensions#tabline#buffers#get	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#get()$/;"	f
airline#extensions#tabline#buffers#invalidate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#invalidate()$/;"	f
airline#extensions#tabline#buffers#off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#off()$/;"	f
airline#extensions#tabline#buffers#on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#on()$/;"	f
airline#extensions#tabline#buflist#invalidate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#invalidate()$/;"	f
airline#extensions#tabline#buflist#list	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#list()$/;"	f
airline#extensions#tabline#ctrlspace#add_buffer_section	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_buffer_section(builder, cur_tab, cur_buf, pos/;"	f
airline#extensions#tabline#ctrlspace#add_tab_section	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_tab_section(builder, pos)$/;"	f
airline#extensions#tabline#ctrlspace#get	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#get()$/;"	f
airline#extensions#tabline#ctrlspace#invalidate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#invalidate()$/;"	f
airline#extensions#tabline#ctrlspace#off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#off()$/;"	f
airline#extensions#tabline#ctrlspace#on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#on()$/;"	f
airline#extensions#tabline#formatters#default#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^function! airline#extensions#tabline#formatters#default#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#default#wrap_name	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^function! airline#extensions#tabline#formatters#default#wrap_name(bufnr, buffer_name)$/;"	f
airline#extensions#tabline#formatters#unique_tail#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim	/^function! airline#extensions#tabline#formatters#unique_tail#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#unique_tail_improved#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^function! airline#extensions#tabline#formatters#unique_tail_improved#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#get	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#get()$/;"	f
airline#extensions#tabline#get_buffer_name	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#get_buffer_name(nr, ...)$/;"	f
airline#extensions#tabline#group_of_bufnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#group_of_bufnr(tab_bufs, bufnr)$/;"	f
airline#extensions#tabline#init	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#init(ext)$/;"	f
airline#extensions#tabline#load_theme	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#load_theme(palette)$/;"	f
airline#extensions#tabline#new_builder	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#new_builder()$/;"	f
airline#extensions#tabline#tabs#get	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#get()$/;"	f
airline#extensions#tabline#tabs#invalidate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#invalidate()$/;"	f
airline#extensions#tabline#tabs#map_keys	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#map_keys()$/;"	f
airline#extensions#tabline#tabs#off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#off()$/;"	f
airline#extensions#tabline#tabs#on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#on()$/;"	f
airline#extensions#tabline#title	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#title(n)$/;"	f
airline#extensions#tagbar#currenttag	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#currenttag()$/;"	f
airline#extensions#tagbar#get_status	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#get_status(...)$/;"	f
airline#extensions#tagbar#inactive_apply	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#inactive_apply(...)$/;"	f
airline#extensions#tagbar#init	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#init(ext)$/;"	f
airline#extensions#tmuxline#init	.vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#init(ext)$/;"	f
airline#extensions#tmuxline#set_tmux_colors	.vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#set_tmux_colors(palette)$/;"	f
airline#extensions#undotree#apply	.vim/plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#apply(...)$/;"	f
airline#extensions#undotree#init	.vim/plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#init(ext)$/;"	f
airline#extensions#unicode#apply	.vim/plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#apply(...)$/;"	f
airline#extensions#unicode#init	.vim/plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#init(ext)$/;"	f
airline#extensions#unite#apply	.vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#apply(...)$/;"	f
airline#extensions#unite#init	.vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#init(ext)$/;"	f
airline#extensions#vimagit#apply	.vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#apply(...)$/;"	f
airline#extensions#vimagit#get_mode	.vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#get_mode()$/;"	f
airline#extensions#vimagit#init	.vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#init(ext)$/;"	f
airline#extensions#vimtex#apply	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#apply(...)$/;"	f
airline#extensions#vimtex#get_scope	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#get_scope()$/;"	f
airline#extensions#vimtex#init	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#init(ext)$/;"	f
airline#extensions#virtualenv#apply	.vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#apply(...)$/;"	f
airline#extensions#virtualenv#init	.vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#init(ext)$/;"	f
airline#extensions#virtualenv#update	.vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#update()$/;"	f
airline#extensions#whitespace#check	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#check()$/;"	f
airline#extensions#whitespace#disable	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#disable()$/;"	f
airline#extensions#whitespace#init	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#init(...)$/;"	f
airline#extensions#whitespace#toggle	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#toggle()$/;"	f
airline#extensions#windowswap#get_status	.vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#get_status()$/;"	f
airline#extensions#windowswap#init	.vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#init(ext)$/;"	f
airline#extensions#wordcount#apply	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#apply(...)$/;"	f
airline#extensions#wordcount#formatters#default#format	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#format()$/;"	f
airline#extensions#wordcount#init	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#init(ext)$/;"	f
airline#extensions#xkblayout#init	.vim/plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#init(ext)$/;"	f
airline#extensions#xkblayout#status	.vim/plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#status()$/;"	f
airline#extensions#ycm#get_error_count	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_error_count()$/;"	f
airline#extensions#ycm#get_warning_count	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_warning_count()$/;"	f
airline#extensions#ycm#init	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#init(ext)$/;"	f
airline#highlighter#add_accent	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#add_accent(accent)$/;"	f
airline#highlighter#add_separator	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#add_separator(from, to, inverse)$/;"	f
airline#highlighter#exec	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#exec(group, colors)$/;"	f
airline#highlighter#get_highlight	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#get_highlight(group, ...)$/;"	f
airline#highlighter#get_highlight2	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#get_highlight2(fg, bg, ...)$/;"	f
airline#highlighter#highlight	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#highlight(modes, ...)$/;"	f
airline#highlighter#highlight_modified_inactive	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#highlight_modified_inactive(bufnr)$/;"	f
airline#highlighter#load_theme	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#load_theme()$/;"	f
airline#init#bootstrap	.vim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#bootstrap()$/;"	f
airline#init#gui_mode	.vim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#gui_mode()$/;"	f
airline#init#sections	.vim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#sections()$/;"	f
airline#load_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#load_theme()$/;"	f
airline#msdos#round_msdos_colors	.vim/plugged/vim-airline/autoload/airline/msdos.vim	/^function! airline#msdos#round_msdos_colors(rgblist)$/;"	f
airline#parts#crypt	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#crypt()$/;"	f
airline#parts#define	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define(key, config)$/;"	f
airline#parts#define_accent	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_accent(key, accent)$/;"	f
airline#parts#define_condition	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_condition(key, predicate)$/;"	f
airline#parts#define_empty	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_empty(keys)$/;"	f
airline#parts#define_function	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_function(key, name)$/;"	f
airline#parts#define_minwidth	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_minwidth(key, width)$/;"	f
airline#parts#define_raw	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_raw(key, raw)$/;"	f
airline#parts#define_text	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_text(key, text)$/;"	f
airline#parts#ffenc	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#ffenc()$/;"	f
airline#parts#filetype	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#filetype()$/;"	f
airline#parts#get	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#get(key)$/;"	f
airline#parts#iminsert	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#iminsert()$/;"	f
airline#parts#mode	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#mode()$/;"	f
airline#parts#paste	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#paste()$/;"	f
airline#parts#readonly	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#readonly()$/;"	f
airline#parts#spell	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#spell()$/;"	f
airline#remove_statusline_func	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#remove_statusline_func(name)$/;"	f
airline#section#create	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create(parts)$/;"	f
airline#section#create_left	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_left(parts)$/;"	f
airline#section#create_right	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_right(parts)$/;"	f
airline#statusline	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#statusline(winnr)$/;"	f
airline#switch_matching_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_matching_theme()$/;"	f
airline#switch_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_theme(name)$/;"	f
airline#themes#generate_color_map	.vim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#generate_color_map(sect1, sect2, sect3, ...)$/;"	f
airline#themes#get_highlight	.vim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#get_highlight(group, ...)$/;"	f
airline#themes#get_highlight2	.vim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#get_highlight2(fg, bg, ...)$/;"	f
airline#themes#patch	.vim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#patch(palette)$/;"	f
airline#update_statusline	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline()$/;"	f
airline#util#append	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#append(text, minwidth)$/;"	f
airline#util#exec_funcrefs	.vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#exec_funcrefs(list, ...)$/;"	f
airline#util#getwinvar	.vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getwinvar(winnr, key, def)$/;"	f
airline#util#prepend	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#prepend(text, minwidth)$/;"	f
airline#util#shorten	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#shorten(text, winwidth, minwidth, ...)$/;"	f
airline#util#system	.vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#system(cmd)$/;"	f
airline#util#warning	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#warning(msg)$/;"	f
airline#util#wrap	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#wrap(text, minwidth)$/;"	f
airline_config	.vimrc	/^augroup airline_config$/;"	a
airline_denite	.vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^  augroup airline_denite$/;"	a
airline_tabline_autoshow	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^  augroup airline_tabline_autoshow$/;"	a
airline_tabline_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  augroup airline_tabline_buffers$/;"	a
airline_tabline_ctrlspace	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^  augroup airline_tabline_ctrlspace$/;"	a
airline_tabline_tabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  augroup airline_tabline_tabs$/;"	a
airline_whitespace	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^    augroup airline_whitespace$/;"	a
airline_whitespace	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^  augroup airline_whitespace$/;"	a
ale#Escape	.vim/plugged/ale/autoload/ale.vim	/^function! ale#Escape(str) abort$/;"	f
ale#FileTooLarge	.vim/plugged/ale/autoload/ale.vim	/^function! ale#FileTooLarge() abort$/;"	f
ale#Has	.vim/plugged/ale/autoload/ale.vim	/^function! ale#Has(feature) abort$/;"	f
ale#Lint	.vim/plugged/ale/autoload/ale.vim	/^function! ale#Lint(...) abort$/;"	f
ale#Queue	.vim/plugged/ale/autoload/ale.vim	/^function! ale#Queue(delay, ...) abort$/;"	f
ale#ResetLintFileMarkers	.vim/plugged/ale/autoload/ale.vim	/^function! ale#ResetLintFileMarkers() abort$/;"	f
ale#Set	.vim/plugged/ale/autoload/ale.vim	/^function! ale#Set(variable_name, default) abort$/;"	f
ale#ShouldDoNothing	.vim/plugged/ale/autoload/ale.vim	/^function! ale#ShouldDoNothing() abort$/;"	f
ale#Var	.vim/plugged/ale/autoload/ale.vim	/^function! ale#Var(buffer, variable_name) abort$/;"	f
ale#balloon#Disable	.vim/plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Disable() abort$/;"	f
ale#balloon#Enable	.vim/plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Enable() abort$/;"	f
ale#balloon#Expr	.vim/plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Expr() abort$/;"	f
ale#balloon#MessageForPos	.vim/plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#MessageForPos(bufnr, lnum, col) abort$/;"	f
ale#cleanup#Buffer	.vim/plugged/ale/autoload/ale/cleanup.vim	/^function! ale#cleanup#Buffer(buffer) abort$/;"	f
ale#command#FormatCommand	.vim/plugged/ale/autoload/ale/command.vim	/^function! ale#command#FormatCommand(buffer, command, pipe_file_if_needed) abort$/;"	f
ale#cursor#EchoCursorWarning	.vim/plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarning(...) abort$/;"	f
ale#cursor#EchoCursorWarningWithDelay	.vim/plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarningWithDelay() abort$/;"	f
ale#cursor#ShowCursorDetail	.vim/plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#ShowCursorDetail() abort$/;"	f
ale#cursor#TruncatedEcho	.vim/plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#TruncatedEcho(message) abort$/;"	f
ale#debugging#Info	.vim/plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#Info() abort$/;"	f
ale#debugging#InfoToClipboard	.vim/plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToClipboard() abort$/;"	f
ale#engine#CreateDirectory	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#CreateDirectory(buffer) abort$/;"	f
ale#engine#EscapeCommandPart	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#EscapeCommandPart(command_part) abort$/;"	f
ale#engine#FixLocList	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#FixLocList(buffer, linter, loclist) abort$/;"	f
ale#engine#GetLoclist	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#GetLoclist(buffer) abort$/;"	f
ale#engine#InitBufferInfo	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#InitBufferInfo(buffer) abort$/;"	f
ale#engine#Invoke	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#Invoke(buffer, linter) abort$/;"	f
ale#engine#ManageDirectory	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ManageDirectory(buffer, directory) abort$/;"	f
ale#engine#ManageFile	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ManageFile(buffer, filename) abort$/;"	f
ale#engine#ProcessChain	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ProcessChain(buffer, linter, chain_index, input) abort$/;"	f
ale#engine#RemoveManagedFiles	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#RemoveManagedFiles(buffer) abort$/;"	f
ale#engine#SetResults	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#SetResults(buffer, loclist) abort$/;"	f
ale#engine#StopCurrentJobs	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#StopCurrentJobs(buffer, include_lint_file_jobs) abort$/;"	f
ale#engine#WaitForJobs	.vim/plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#WaitForJobs(deadline) abort$/;"	f
ale#events#SaveEvent	.vim/plugged/ale/autoload/ale/events.vim	/^function! ale#events#SaveEvent() abort$/;"	f
ale#filetypes#GuessExtension	.vim/plugged/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#GuessExtension(filetype) abort$/;"	f
ale#filetypes#LoadExtensionMap	.vim/plugged/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#LoadExtensionMap() abort$/;"	f
ale#fix#ApplyFixes	.vim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyFixes(buffer, output) abort$/;"	f
ale#fix#ApplyQueuedFixes	.vim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyQueuedFixes() abort$/;"	f
ale#fix#Fix	.vim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#Fix(...) abort$/;"	f
ale#fix#InitBufferData	.vim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#InitBufferData(buffer, fixing_flag) abort$/;"	f
ale#fix#ManageDirectory	.vim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ManageDirectory(buffer, directory) abort$/;"	f
ale#fix#RemoveManagedFiles	.vim/plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#RemoveManagedFiles(buffer) abort$/;"	f
ale#fix#registry#Add	.vim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Add(name, func, filetypes, desc) abort$/;"	f
ale#fix#registry#Clear	.vim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Clear() abort$/;"	f
ale#fix#registry#GetFunc	.vim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetFunc(name) abort$/;"	f
ale#fix#registry#ResetToDefaults	.vim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#ResetToDefaults() abort$/;"	f
ale#fix#registry#Suggest	.vim/plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Suggest(filetype) abort$/;"	f
ale#fixers#autopep8#Fix	.vim/plugged/ale/autoload/ale/fixers/autopep8.vim	/^function! ale#fixers#autopep8#Fix(buffer) abort$/;"	f
ale#fixers#eslint#Fix	.vim/plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#Fix(buffer) abort$/;"	f
ale#fixers#generic#RemoveTrailingBlankLines	.vim/plugged/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#RemoveTrailingBlankLines(buffer, lines) abort$/;"	f
ale#fixers#generic_python#AddLinesBeforeControlStatements	.vim/plugged/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#AddLinesBeforeControlStatements(buffer, lines) abort$/;"	f
ale#fixers#isort#Fix	.vim/plugged/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#Fix(buffer) abort$/;"	f
ale#fixers#prettier#Fix	.vim/plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#Fix(buffer) abort$/;"	f
ale#fixers#prettier#GetExecutable	.vim/plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier_eslint#Fix	.vim/plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#Fix(buffer, lines) abort$/;"	f
ale#fixers#prettier_eslint#GetExecutable	.vim/plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#GetExecutable(buffer) abort$/;"	f
ale#fixers#yapf#Fix	.vim/plugged/ale/autoload/ale/fixers/yapf.vim	/^function! ale#fixers#yapf#Fix(buffer) abort$/;"	f
ale#handlers#c#FindLocalHeaderPaths	.vim/plugged/ale/autoload/ale/handlers/c.vim	/^function! ale#handlers#c#FindLocalHeaderPaths(buffer) abort$/;"	f
ale#handlers#c#FindProjectRoot	.vim/plugged/ale/autoload/ale/handlers/c.vim	/^function! ale#handlers#c#FindProjectRoot(buffer) abort$/;"	f
ale#handlers#c#IncludeOptions	.vim/plugged/ale/autoload/ale/handlers/c.vim	/^function! ale#handlers#c#IncludeOptions(include_paths) abort$/;"	f
ale#handlers#cppcheck#HandleCppCheckFormat	.vim/plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#HandleCppCheckFormat(buffer, lines) abort$/;"	f
ale#handlers#cpplint#HandleCppLintFormat	.vim/plugged/ale/autoload/ale/handlers/cpplint.vim	/^function! ale#handlers#cpplint#HandleCppLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleCSSLintFormat	.vim/plugged/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleCSSLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleStyleLintFormat	.vim/plugged/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleStyleLintFormat(buffer, lines) abort$/;"	f
ale#handlers#eslint#GetExecutable	.vim/plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#gcc#HandleGCCFormat	.vim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#ParseGCCVersion	.vim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#ParseGCCVersion(lines) abort$/;"	f
ale#handlers#haskell#HandleGHCFormat	.vim/plugged/ale/autoload/ale/handlers/haskell.vim	/^function! ale#handlers#haskell#HandleGHCFormat(buffer, lines) abort$/;"	f
ale#handlers#python#GetExecutable	.vim/plugged/ale/autoload/ale/handlers/python.vim	/^function! ale#handlers#python#GetExecutable(buffer, cmd_name) abort$/;"	f
ale#handlers#python#HandlePEP8Format	.vim/plugged/ale/autoload/ale/handlers/python.vim	/^function! ale#handlers#python#HandlePEP8Format(buffer, lines) abort$/;"	f
ale#handlers#ruby#HandleSyntaxErrors	.vim/plugged/ale/autoload/ale/handlers/ruby.vim	/^function! ale#handlers#ruby#HandleSyntaxErrors(buffer, lines) abort$/;"	f
ale#handlers#rust#HandleRustErrors	.vim/plugged/ale/autoload/ale/handlers/rust.vim	/^function! ale#handlers#rust#HandleRustErrors(buffer, lines) abort$/;"	f
ale#handlers#rust#HandleRustErrorsForFile	.vim/plugged/ale/autoload/ale/handlers/rust.vim	/^function! ale#handlers#rust#HandleRustErrorsForFile(buffer, full_filename, lines) abort$/;"	f
ale#handlers#unix#HandleAsError	.vim/plugged/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsError(buffer, lines) abort$/;"	f
ale#handlers#unix#HandleAsWarning	.vim/plugged/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsWarning(buffer, lines) abort$/;"	f
ale#highlight#BufferHidden	.vim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#BufferHidden(buffer) abort$/;"	f
ale#highlight#CreatePositions	.vim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#CreatePositions(line, col, end_line, end_col) abort$/;"	f
ale#highlight#RemoveHighlights	.vim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#RemoveHighlights(loclist) abort$/;"	f
ale#highlight#SetHighlights	.vim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#SetHighlights(buffer, loclist) abort$/;"	f
ale#highlight#UnqueueHighlights	.vim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#UnqueueHighlights(buffer) abort$/;"	f
ale#highlight#UpdateHighlights	.vim/plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#UpdateHighlights() abort$/;"	f
ale#history#Add	.vim/plugged/ale/autoload/ale/history.vim	/^function! ale#history#Add(buffer, status, job_id, command) abort$/;"	f
ale#history#RememberOutput	.vim/plugged/ale/autoload/ale/history.vim	/^function! ale#history#RememberOutput(buffer, job_id, output) abort$/;"	f
ale#history#SetExitCode	.vim/plugged/ale/autoload/ale/history.vim	/^function! ale#history#SetExitCode(buffer, job_id, exit_code) abort$/;"	f
ale#job#IsRunning	.vim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#IsRunning(job_id) abort$/;"	f
ale#job#JoinNeovimOutput	.vim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#JoinNeovimOutput(job, last_line, data, callback) abort$/;"	f
ale#job#ParseVim8ProcessID	.vim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#ParseVim8ProcessID(job_string) abort$/;"	f
ale#job#PrepareCommand	.vim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#PrepareCommand(command) abort$/;"	f
ale#job#SendRaw	.vim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#SendRaw(job_id, string) abort$/;"	f
ale#job#Start	.vim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#Start(command, options) abort$/;"	f
ale#job#Stop	.vim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#Stop(job_id) abort$/;"	f
ale#job#ValidateArguments	.vim/plugged/ale/autoload/ale/job.vim	/^function! ale#job#ValidateArguments(command, options) abort$/;"	f
ale#linter#Define	.vim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Define(filetype, linter) abort$/;"	f
ale#linter#Get	.vim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Get(original_filetypes) abort$/;"	f
ale#linter#GetAll	.vim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAll(filetypes) abort$/;"	f
ale#linter#PreProcess	.vim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#PreProcess(linter) abort$/;"	f
ale#linter#Reset	.vim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Reset() abort$/;"	f
ale#linter#ResolveFiletype	.vim/plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#ResolveFiletype(original_filetype) abort$/;"	f
ale#list#CloseWindowIfNeeded	.vim/plugged/ale/autoload/ale/list.vim	/^function! ale#list#CloseWindowIfNeeded(buffer) abort$/;"	f
ale#list#IsQuickfixOpen	.vim/plugged/ale/autoload/ale/list.vim	/^function! ale#list#IsQuickfixOpen() abort$/;"	f
ale#list#SetLists	.vim/plugged/ale/autoload/ale/list.vim	/^function! ale#list#SetLists(buffer, loclist) abort$/;"	f
ale#loclist_jumping#FindNearest	.vim/plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#FindNearest(direction, wrap) abort$/;"	f
ale#loclist_jumping#Jump	.vim/plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#Jump(direction, wrap) abort$/;"	f
ale#loclist_jumping#JumpToIndex	.vim/plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#JumpToIndex(index) abort$/;"	f
ale#lsp#CreateMessageData	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CreateMessageData(message) abort$/;"	f
ale#lsp#GetNextMessageID	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetNextMessageID() abort$/;"	f
ale#lsp#HandleMessage	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleMessage(conn, message) abort$/;"	f
ale#lsp#ReadMessageData	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ReadMessageData(data) abort$/;"	f
ale#lsp#SendMessageToAddress	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#SendMessageToAddress(address, message, ...) abort$/;"	f
ale#lsp#SendMessageToProgram	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#SendMessageToProgram(executable, command, message, ...) abort$/;"	f
ale#lsp#message#DidChange	.vim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidChange(uri, version, text) abort$/;"	f
ale#lsp#message#DidClose	.vim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidClose(uri) abort$/;"	f
ale#lsp#message#DidOpen	.vim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidOpen(uri, language_id, version, text) abort$/;"	f
ale#lsp#message#DidSave	.vim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidSave(uri) abort$/;"	f
ale#lsp#message#Exit	.vim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Exit() abort$/;"	f
ale#lsp#message#Initialize	.vim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialize(root_uri) abort$/;"	f
ale#lsp#message#Initialized	.vim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialized() abort$/;"	f
ale#lsp#message#Shutdown	.vim/plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Shutdown() abort$/;"	f
ale#lsp#response#ReadDiagnostics	.vim/plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadDiagnostics(params) abort$/;"	f
ale#lsp#tsserver_message#Change	.vim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Change(buffer) abort$/;"	f
ale#lsp#tsserver_message#Close	.vim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Close(buffer) abort$/;"	f
ale#lsp#tsserver_message#Geterr	.vim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Geterr(buffer) abort$/;"	f
ale#lsp#tsserver_message#Open	.vim/plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Open(buffer) abort$/;"	f
ale#node#FindExecutable	.vim/plugged/ale/autoload/ale/node.vim	/^function! ale#node#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#path#BufferCdString	.vim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#BufferCdString(buffer) abort$/;"	f
ale#path#CdString	.vim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#CdString(directory) abort$/;"	f
ale#path#FindNearestDirectory	.vim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestDirectory(buffer, directory_name) abort$/;"	f
ale#path#FindNearestFile	.vim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestFile(buffer, filename) abort$/;"	f
ale#path#IsAbsolute	.vim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsAbsolute(filename) abort$/;"	f
ale#path#IsBufferPath	.vim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsBufferPath(buffer, complex_filename) abort$/;"	f
ale#path#ResolveLocalPath	.vim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#ResolveLocalPath(buffer, search_string, global_fallback) abort$/;"	f
ale#path#Upwards	.vim/plugged/ale/autoload/ale/path.vim	/^function! ale#path#Upwards(path) abort$/;"	f
ale#pattern_options#SetOptions	.vim/plugged/ale/autoload/ale/pattern_options.vim	/^function! ale#pattern_options#SetOptions() abort$/;"	f
ale#python#FindProjectRoot	.vim/plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRoot(buffer) abort$/;"	f
ale#python#FindVirtualenv	.vim/plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindVirtualenv(buffer) abort$/;"	f
ale#semver#GreaterOrEqual	.vim/plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#GreaterOrEqual(lhs, rhs) abort$/;"	f
ale#semver#Parse	.vim/plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#Parse(text) abort$/;"	f
ale#sign#FindCurrentSigns	.vim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#FindCurrentSigns(buffer) abort$/;"	f
ale#sign#GetSignType	.vim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignType(sublist) abort$/;"	f
ale#sign#ParseSigns	.vim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParseSigns(line_list) abort$/;"	f
ale#sign#ReadSigns	.vim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ReadSigns(buffer) abort$/;"	f
ale#sign#RemoveDummySignIfNeeded	.vim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#RemoveDummySignIfNeeded(buffer) abort$/;"	f
ale#sign#SetSignColumnHighlight	.vim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#SetSignColumnHighlight(has_problems) abort$/;"	f
ale#sign#SetSigns	.vim/plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#SetSigns(buffer, loclist) abort$/;"	f
ale#statusline#Count	.vim/plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Count(buffer) abort$/;"	f
ale#statusline#Status	.vim/plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Status() abort$/;"	f
ale#statusline#Update	.vim/plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Update(buffer, loclist) abort$/;"	f
ale#util#BinarySearch	.vim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#BinarySearch(loclist, line, column) abort$/;"	f
ale#util#ClockMilliseconds	.vim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#ClockMilliseconds() abort$/;"	f
ale#util#FunctionArgCount	.vim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#FunctionArgCount(function) abort$/;"	f
ale#util#GetFunction	.vim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetFunction(string_or_ref) abort$/;"	f
ale#util#GetLineCount	.vim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetLineCount(buffer) abort$/;"	f
ale#util#GetMatches	.vim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetMatches(lines, patterns) abort$/;"	f
ale#util#InSandbox	.vim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#InSandbox() abort$/;"	f
ale#util#LocItemCompare	.vim/plugged/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompare(left, right) abort$/;"	f
ale_config	.vimrc	/^augroup ale_config$/;"	a
ale_linters#asm#gcc#GetCommand	.vim/plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#asm#gcc#Handle	.vim/plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#awk#gawk#GetCommand	.vim/plugged/ale/ale_linters/awk/gawk.vim	/^function! ale_linters#awk#gawk#GetCommand(buffer) abort$/;"	f
ale_linters#awk#gawk#GetExecutable	.vim/plugged/ale/ale_linters/awk/gawk.vim	/^function! ale_linters#awk#gawk#GetExecutable(buffer) abort$/;"	f
ale_linters#c#clang#GetCommand	.vim/plugged/ale/ale_linters/c/clang.vim	/^function! ale_linters#c#clang#GetCommand(buffer) abort$/;"	f
ale_linters#c#cppcheck#GetCommand	.vim/plugged/ale/ale_linters/c/cppcheck.vim	/^function! ale_linters#c#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#c#gcc#GetCommand	.vim/plugged/ale/ale_linters/c/gcc.vim	/^function! ale_linters#c#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#chef#foodcritic#GetCommand	.vim/plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#GetCommand(buffer) abort$/;"	f
ale_linters#chef#foodcritic#Handle	.vim/plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#cmake#cmakelint#Command	.vim/plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Command(buffer) abort$/;"	f
ale_linters#cmake#cmakelint#Executable	.vim/plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Executable(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetCommand	.vim/plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetExecutable	.vim/plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetCommand	.vim/plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetExecutable	.vim/plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#Handle	.vim/plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#Handle(buffer, lines) abort$/;"	f
ale_linters#cpp#clang#GetCommand	.vim/plugged/ale/ale_linters/cpp/clang.vim	/^function! ale_linters#cpp#clang#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangtidy#GetCommand	.vim/plugged/ale/ale_linters/cpp/clangtidy.vim	/^function! ale_linters#cpp#clangtidy#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cppcheck#GetCommand	.vim/plugged/ale/ale_linters/cpp/cppcheck.vim	/^function! ale_linters#cpp#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#gcc#GetCommand	.vim/plugged/ale/ale_linters/cpp/gcc.vim	/^function! ale_linters#cpp#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#crystal#GetCommand	.vim/plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#crystal#Handle	.vim/plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcs#GetCommand	.vim/plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcs#Handle	.vim/plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#Handle(buffer, lines) abort$/;"	f
ale_linters#css#csslint#GetCommand	.vim/plugged/ale/ale_linters/css/csslint.vim	/^function! ale_linters#css#csslint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetCommand	.vim/plugged/ale/ale_linters/css/stylelint.vim	/^function! ale_linters#css#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetExecutable	.vim/plugged/ale/ale_linters/css/stylelint.vim	/^function! ale_linters#css#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#d#dmd#DMDCommand	.vim/plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#DMDCommand(buffer, dub_output) abort$/;"	f
ale_linters#d#dmd#DUBCommand	.vim/plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#DUBCommand(buffer) abort$/;"	f
ale_linters#d#dmd#Handle	.vim/plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#hadolint#Handle	.vim/plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#credo#Handle	.vim/plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dogma#Handle	.vim/plugged/ale/ale_linters/elixir/dogma.vim	/^function! ale_linters#elixir#dogma#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#GetCommand	.vim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCommand(buffer) abort$/;"	f
ale_linters#elm#make#Handle	.vim/plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#erlc#GetCommand	.vim/plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#erlc#Handle	.vim/plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#gcc#GetCommand	.vim/plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#fortran#gcc#GetExecutable	.vim/plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#GetExecutable(buffer) abort$/;"	f
ale_linters#fortran#gcc#Handle	.vim/plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#go#gobuild#GetCommand	.vim/plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetCommand(buffer, goenv_output) abort$/;"	f
ale_linters#go#gobuild#GetMatches	.vim/plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetMatches(lines) abort$/;"	f
ale_linters#go#gobuild#GoEnv	.vim/plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GoEnv(buffer) abort$/;"	f
ale_linters#go#gobuild#Handler	.vim/plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gometalinter#GetCommand	.vim/plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetMatches	.vim/plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetMatches(lines) abort$/;"	f
ale_linters#go#gometalinter#Handler	.vim/plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#Handler(buffer, lines) abort$/;"	f
ale_linters#haml#hamllint#Handle	.vim/plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetCommand	.vim/plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetCommand(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetExecutable	.vim/plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetExecutable(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#Handle	.vim/plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#hlint#Handle	.vim/plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#Handle(buffer, lines) abort$/;"	f
ale_linters#html#htmlhint#GetCommand	.vim/plugged/ale/ale_linters/html/htmlhint.vim	/^function! ale_linters#html#htmlhint#GetCommand(buffer) abort$/;"	f
ale_linters#html#htmlhint#GetExecutable	.vim/plugged/ale/ale_linters/html/htmlhint.vim	/^function! ale_linters#html#htmlhint#GetExecutable(buffer) abort$/;"	f
ale_linters#html#tidy#GetCommand	.vim/plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#GetCommand(buffer) abort$/;"	f
ale_linters#html#tidy#GetExecutable	.vim/plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#GetExecutable(buffer) abort$/;"	f
ale_linters#html#tidy#Handle	.vim/plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#Handle(buffer, lines) abort$/;"	f
ale_linters#java#checkstyle#GetCommand	.vim/plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#GetCommand(buffer) abort$/;"	f
ale_linters#java#checkstyle#Handle	.vim/plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#java#javac#GetCommand	.vim/plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetCommand(buffer, import_paths) abort$/;"	f
ale_linters#java#javac#GetImportPaths	.vim/plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetImportPaths(buffer) abort$/;"	f
ale_linters#java#javac#Handle	.vim/plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#eslint#GetCommand	.vim/plugged/ale/ale_linters/javascript/eslint.vim	/^function! ale_linters#javascript#eslint#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#eslint#Handle	.vim/plugged/ale/ale_linters/javascript/eslint.vim	/^function! ale_linters#javascript#eslint#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#GetCommand	.vim/plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#flow#GetExecutable	.vim/plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#flow#Handle	.vim/plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#jshint#GetCommand	.vim/plugged/ale/ale_linters/javascript/jshint.vim	/^function! ale_linters#javascript#jshint#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#jshint#GetExecutable	.vim/plugged/ale/ale_linters/javascript/jshint.vim	/^function! ale_linters#javascript#jshint#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#standard#GetCommand	.vim/plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetExecutable	.vim/plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#standard#Handle	.vim/plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#xo#GetCommand	.vim/plugged/ale/ale_linters/javascript/xo.vim	/^function! ale_linters#javascript#xo#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#xo#GetExecutable	.vim/plugged/ale/ale_linters/javascript/xo.vim	/^function! ale_linters#javascript#xo#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#xo#Handle	.vim/plugged/ale/ale_linters/javascript/xo.vim	/^function! ale_linters#javascript#xo#Handle(buffer, lines) abort$/;"	f
ale_linters#json#jsonlint#Handle	.vim/plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#kotlinc#GetCommand	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetCommand(buffer, import_paths) abort$/;"	f
ale_linters#kotlin#kotlinc#GetImportPaths	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetImportPaths(buffer) abort$/;"	f
ale_linters#kotlin#kotlinc#Handle	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#ktlint#GetCommand	.vim/plugged/ale/ale_linters/kotlin/ktlint.vim	/^function! ale_linters#kotlin#ktlint#GetCommand(buffer) abort$/;"	f
ale_linters#kotlin#ktlint#Handle	.vim/plugged/ale/ale_linters/kotlin/ktlint.vim	/^function! ale_linters#kotlin#ktlint#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#luacheck#GetCommand	.vim/plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#GetCommand(buffer) abort$/;"	f
ale_linters#lua#luacheck#GetExecutable	.vim/plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#GetExecutable(buffer) abort$/;"	f
ale_linters#lua#luacheck#Handle	.vim/plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#mdl#Handle	.vim/plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#Handle(buffer, lines) abort$/;"	f
ale_linters#matlab#mlint#GetCommand	.vim/plugged/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#GetCommand(buffer) abort$/;"	f
ale_linters#matlab#mlint#GetExecutable	.vim/plugged/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#GetExecutable(buffer) abort$/;"	f
ale_linters#matlab#mlint#Handle	.vim/plugged/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimcheck#GetCommand	.vim/plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimcheck#Handle	.vim/plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#nix#nix#Handle	.vim/plugged/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Handle(buffer, lines) abort$/;"	f
ale_linters#objc#clang#GetCommand	.vim/plugged/ale/ale_linters/objc/clang.vim	/^function! ale_linters#objc#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clang#GetCommand	.vim/plugged/ale/ale_linters/objcpp/clang.vim	/^function! ale_linters#objcpp#clang#GetCommand(buffer) abort$/;"	f
ale_linters#ocaml#merlin#Handle	.vim/plugged/ale/ale_linters/ocaml/merlin.vim	/^function! ale_linters#ocaml#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perl#GetCommand	.vim/plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perl#GetExecutable	.vim/plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#GetExecutable(buffer) abort$/;"	f
ale_linters#perl#perl#Handle	.vim/plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perlcritic#Handle	.vim/plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#php#hack#Handle	.vim/plugged/ale/ale_linters/php/hack.vim	/^function! ale_linters#php#hack#Handle(buffer, lines) abort$/;"	f
ale_linters#php#php#Handle	.vim/plugged/ale/ale_linters/php/php.vim	/^function! ale_linters#php#php#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpcs#GetCommand	.vim/plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpcs#Handle	.vim/plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpmd#GetCommand	.vim/plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpmd#Handle	.vim/plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#puppet#Handle	.vim/plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#puppetlint#GetCommand	.vim/plugged/ale/ale_linters/puppet/puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#puppetlint#GetExecutable	.vim/plugged/ale/ale_linters/puppet/puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#ClearVersionCache	.vim/plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#ClearVersionCache() abort$/;"	f
ale_linters#python#flake8#GetCommand	.vim/plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#python#flake8#GetExecutable	.vim/plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#VersionCheck	.vim/plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#VersionCheck(buffer) abort$/;"	f
ale_linters#python#mypy#GetCommand	.vim/plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCommand(buffer) abort$/;"	f
ale_linters#python#mypy#GetExecutable	.vim/plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#Handle	.vim/plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylint#GetCommand	.vim/plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCommand(buffer) abort$/;"	f
ale_linters#python#pylint#GetExecutable	.vim/plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylint#Handle	.vim/plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#Handle(buffer, lines) abort$/;"	f
ale_linters#reason#merlin#Handle	.vim/plugged/ale/ale_linters/reason/merlin.vim	/^function! ale_linters#reason#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#brakeman#GetCommand	.vim/plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#brakeman#Handle	.vim/plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#reek#Handle	.vim/plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rubocop#GetCommand	.vim/plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetExecutable	.vim/plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetExecutable(buffer) abort$/;"	f
ale_linters#ruby#rubocop#Handle	.vim/plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#Handle(buffer, lines) abort$/;"	f
ale_linters#rust#cargo#GetCargoExecutable	.vim/plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCargoExecutable(bufnr) abort$/;"	f
ale_linters#rust#cargo#GetCommand	.vim/plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCommand(buffer) abort$/;"	f
ale_linters#rust#rustc#RustcCommand	.vim/plugged/ale/ale_linters/rust/rustc.vim	/^function! ale_linters#rust#rustc#RustcCommand(buffer_number) abort$/;"	f
ale_linters#sass#stylelint#GetCommand	.vim/plugged/ale/ale_linters/sass/stylelint.vim	/^function! ale_linters#sass#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#sass#stylelint#GetExecutable	.vim/plugged/ale/ale_linters/sass/stylelint.vim	/^function! ale_linters#sass#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#scala#scalac#Handle	.vim/plugged/ale/ale_linters/scala/scalac.vim	/^function! ale_linters#scala#scalac#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#scsslint#Handle	.vim/plugged/ale/ale_linters/scss/scsslint.vim	/^function! ale_linters#scss#scsslint#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#stylelint#GetCommand	.vim/plugged/ale/ale_linters/scss/stylelint.vim	/^function! ale_linters#scss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#scss#stylelint#GetExecutable	.vim/plugged/ale/ale_linters/scss/stylelint.vim	/^function! ale_linters#scss#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#GetCommand	.vim/plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetCommand(buffer) abort$/;"	f
ale_linters#sh#shell#GetExecutable	.vim/plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#Handle	.vim/plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#shellcheck#GetCommand	.vim/plugged/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetCommand(buffer) abort$/;"	f
ale_linters#sh#shellcheck#GetExecutable	.vim/plugged/ale/ale_linters/sh/shellcheck.vim	/^function! ale_linters#sh#shellcheck#GetExecutable(buffer) abort$/;"	f
ale_linters#slim#slimlint#Handle	.vim/plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sml#smlnj#Handle	.vim/plugged/ale/ale_linters/sml/smlnj.vim	/^function! ale_linters#sml#smlnj#Handle(buffer, lines) abort$/;"	f
ale_linters#spec#rpmlint#GetCommand	.vim/plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetCommand(buffer) abort$/;"	f
ale_linters#spec#rpmlint#GetExecutable	.vim/plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetExecutable(buffer) abort$/;"	f
ale_linters#spec#rpmlint#Handle	.vim/plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqlint#Handle	.vim/plugged/ale/ale_linters/sql/sqlint.vim	/^function! ale_linters#sql#sqlint#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#chktex#GetCommand	.vim/plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#GetCommand(buffer) abort$/;"	f
ale_linters#tex#chktex#Handle	.vim/plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#lacheck#GetCommand	.vim/plugged/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#GetCommand(buffer) abort$/;"	f
ale_linters#tex#lacheck#GetExecutable	.vim/plugged/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#GetExecutable(buffer) abort$/;"	f
ale_linters#tex#lacheck#Handle	.vim/plugged/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#tslint#BuildLintCommand	.vim/plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#BuildLintCommand(buffer) abort$/;"	f
ale_linters#typescript#tslint#GetExecutable	.vim/plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#GetExecutable(buffer) abort$/;"	f
ale_linters#typescript#tslint#Handle	.vim/plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#typecheck#Handle	.vim/plugged/ale/ale_linters/typescript/typecheck.vim	/^function! ale_linters#typescript#typecheck#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#iverilog#Handle	.vim/plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#verilator#GetCommand	.vim/plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#verilator#Handle	.vim/plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#vint#GetCommand	.vim/plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#GetCommand(buffer, version_output) abort$/;"	f
ale_linters#vim#vint#VersionCommand	.vim/plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#VersionCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#GetCommand	.vim/plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#GetCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#GetExecutable	.vim/plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#GetExecutable(buffer) abort$/;"	f
ale_linters#xml#xmllint#Handle	.vim/plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#yamllint#GetCommand	.vim/plugged/ale/ale_linters/yaml/yamllint.vim	/^function! ale_linters#yaml#yamllint#GetCommand(buffer) abort$/;"	f
ale_linters#yaml#yamllint#GetExecutable	.vim/plugged/ale/ale_linters/yaml/yamllint.vim	/^function! ale_linters#yaml#yamllint#GetExecutable(buffer) abort$/;"	f
ale_linters#yaml#yamllint#Handle	.vim/plugged/ale/ale_linters/yaml/yamllint.vim	/^function! ale_linters#yaml#yamllint#Handle(buffer, lines) abort$/;"	f
all	.vim/plugged/vim-coffee-script/Makefile	/^all:$/;"	t
animate	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^def animate(canvas, fn, delay=1.\/24, *args, **kwargs):$/;"	f
animation	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def animation(stdscr):$/;"	f	function:animate	file:
archive	.vim/plugged/vim-coffee-script/Makefile	/^archive:$/;"	t
argparser	.vim/plugged/vim-minimap/autoload/drawille/examples/image2term.py	/^def argparser():$/;"	f
author	.vim/plugged/vim-snippets/addon-info.json	/^  "author" : "community",$/;"	s
b	.vim/plugged/vim-css-color/tests/example.css	/^b { background: #335599 }$/;"	s
b:	.vim/plugged/vim-markdown/syntax/markdown.vim	/^    let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:current_syntax	.vim/plugged/neosnippet/syntax/neosnippet.vim	/^let b:current_syntax = "snippet"$/;"	v
b:current_syntax	.vim/plugged/tagbar/syntax/tagbar.vim	/^let b:current_syntax = "tagbar"$/;"	v
b:current_syntax	.vim/plugged/vim-coffee-script/after/syntax/haml.vim	/^  let b:current_syntax = s:current_syntax_save$/;"	v
b:current_syntax	.vim/plugged/vim-coffee-script/after/syntax/html.vim	/^  let b:current_syntax = s:current_syntax_save$/;"	v
b:current_syntax	.vim/plugged/vim-coffee-script/syntax/coffee.vim	/^  let b:current_syntax = 'coffee'$/;"	v
b:current_syntax	.vim/plugged/vim-coffee-script/syntax/litcoffee.vim	/^let b:current_syntax = "litcoffee"$/;"	v
b:current_syntax	.vim/plugged/vim-javascript/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	.vim/plugged/vim-markdown/syntax/markdown.vim	/^let b:current_syntax = "markdown"$/;"	v
b:current_syntax	.vim/plugged/vim-mustache-handlebars/syntax/mustache.vim	/^let b:current_syntax = "mustache"$/;"	v
b:current_syntax	.vim/syntax/json.vim	/^let b:current_syntax = "json"$/;"	v
b:current_syntax	.vim/syntax/per.vim	/^let b:current_syntax = "per"$/;"	v
b:current_syntax	.vim/syntax/ri.vim	/^let b:current_syntax = "ri"$/;"	v
b:did_ftplugin	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	.vim/plugged/neosnippet/indent/neosnippet.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.vim/plugged/vim-coffee-script/indent/litcoffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.vim/plugged/vim-javascript/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.vim/plugged/vim-mustache-handlebars/indent/handlebars.vim	/^let b:did_indent = 1$/;"	v
b:did_indent_hbs	.vim/plugged/vim-mustache-handlebars/indent/handlebars.vim	/^let b:did_indent_hbs = 1$/;"	v
b:done_vimsnippets	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^let b:done_vimsnippets = 1$/;"	v
b:dummy_sign_set_map	.vim/plugged/ale/autoload/ale/sign.vim	/^let b:dummy_sign_set_map = {}$/;"	v
b:handlebars_subtype_indentexpr	.vim/plugged/vim-mustache-handlebars/indent/handlebars.vim	/^let b:handlebars_subtype_indentexpr = &l:indentexpr$/;"	v
b:html_indent_script1	.vim/plugged/vim-javascript/indent/javascript.vim	/^let b:html_indent_script1 = 'inc'$/;"	v
b:html_indent_usestate	.vim/plugged/vim-mustache-handlebars/indent/handlebars.vim	/^let b:html_indent_usestate = 0$/;"	v
b:match_words	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  let b:match_words = b:match_words$/;"	v
b:syng_str	.vim/plugged/vim-javascript/indent/javascript.vim	/^let b:syng_str = get(b:,'syng_str','string\\|template\\|special')$/;"	v
b:syng_strcom	.vim/plugged/vim-javascript/indent/javascript.vim	/^let b:syng_strcom = get(b:,'syng_strcom','string\\|comment\\|regex\\|special\\|doc\\|template\\%/;"	v
b:undo_ftplugin	.vim/plugged/neosnippet/ftplugin/neosnippet.vim	/^    let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	.vim/plugged/neosnippet/ftplugin/neosnippet.vim	/^    let b:undo_ftplugin = '|'$/;"	v
b:undo_ftplugin	.vim/plugged/neosnippet/ftplugin/neosnippet.vim	/^let b:undo_ftplugin .= '$/;"	v
b:undo_ftplugin	.vim/plugged/vim-javascript/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	.vim/plugged/vim-javascript/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	.vim/plugged/vim-markdown/ftplugin/markdown.vim	/^  let b:undo_ftplugin .= " foldexpr< foldmethod< foldtext<"$/;"	v
b:undo_ftplugin	.vim/plugged/vim-markdown/ftplugin/markdown.vim	/^  let b:undo_ftplugin .= "|setl cms< com< fo< flp<"$/;"	v
b:undo_ftplugin	.vim/plugged/vim-markdown/ftplugin/markdown.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp<"$/;"	v
b:undo_indent	.vim/plugged/neosnippet/indent/neosnippet.vim	/^    let b:undo_indent .= '|'$/;"	v
b:undo_indent	.vim/plugged/neosnippet/indent/neosnippet.vim	/^    let b:undo_indent = ''$/;"	v
b:undo_indent	.vim/plugged/neosnippet/indent/neosnippet.vim	/^let b:undo_indent .= 'setlocal$/;"	v
b:undo_indent	.vim/plugged/vim-javascript/indent/javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
back	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def back(self, step):$/;"	m	class:Turtle
backgroundColor	.vim/plugged/vim-css-color/tests/example.jsx	/^			backgroundColor: 'green',$/;"	p	class:AnonymousFunctione8eca1130100.style
badwolf_tex	.vim/colors/molotov.vim	/^augroup badwolf_tex$/;"	a
before	.vim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def before(string)$/;"	f
before	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def before(string)$/;"	f
bin	.vim/undo/%Users%jose.represa%workspace%bamboo-auto-merge%package.json	/^VimüUnDoÂ_– {  "bin": {bel-plugin-transform-regenerator": "6.14.0",2",t": "node_modules\/.bin\//;"	o
bird	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^bird = []$/;"	v
bird_map	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^bird_map = [$/;"	v
bk	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    bk = back$/;"	v	class:Turtle
border	.vim/plugged/vim-css-color/tests/example.jsx	/^			border: '3px dotted rgba(255,0,0)'$/;"	p	class:AnonymousFunctione8eca1130100.style
braille_char_offset	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^braille_char_offset = 0x2800$/;"	v
buffer_control	.vimrc	/^augroup buffer_control$/;"	a
c	.vim/plugged/vim-airline/t/airline.vim	/^    let c = len(g:airline_statusline_funcrefs)$/;"	v
c	.vim/plugged/vim-minimap/autoload/drawille/examples/speed_test.py	/^c = Canvas()$/;"	v
c	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    c = urllib2.urlopen(url).read()$/;"	v
c	.vimrc	/^    let c += 1$/;"	v
c	.vimrc	/^  let c = 1$/;"	v
cA	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> cA :<C-U>Gcommit --amend --reuse-message=HEAD<CR>$/;"	m
cO	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> cO    :<C-U>exe <SID>Edit('tabedit',0,<SID>buffer().containing_co/;"	m
cP	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> cP    :<C-U>exe <SID>Edit('pedit',0,<SID>buffer().containing_comm/;"	m
cS	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> cS    :<C-U>exe <SID>Edit('vsplit',0,<SID>buffer().containing_com/;"	m
cS	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
ca	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> ca :<C-U>Gcommit --amend<CR>$/;"	m
cached_translate	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^def cached_translate(pat):$/;"	f
can	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    can = Canvas()$/;"	v
cc	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> cc    :<C-U>exe <SID>Edit('edit',0,<SID>buffer().containing_commi/;"	m
cc	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> cc :<C-U>Gcommit<CR>$/;"	m
cgc	.vim/plugged/vim-commentary/plugin/commentary.vim	/^    nmap cgc <Plug>ChangeCommentary$/;"	m
changes	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^changes:$/;"	t
check_assertions	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/handler.py	/^    def check_assertions(self):$/;"	m	class:EditorConfigHandler
check_collision	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^def check_collision(bird_pos, bar):$/;"	f
check_errors	.vim/plugged/ale/custom-checks	/^check_errors() {$/;"	f
clean	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^clean:$/;"	t
clean	.vim/plugged/vim-coffee-script/Makefile	/^clean:$/;"	t
clear	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def clear(self):$/;"	m	class:OrderedDict
clear	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def clear(self):$/;"	m	class:Canvas
closeminimap	.vim/plugged/vim-minimap/autoload/minimap.py	/^def closeminimap():$/;"	f
co	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> co    :<C-U>exe <SID>Edit('split',0,<SID>buffer().containing_comm/;"	m
coffee#CoffeeSetUpErrorFormat	.vim/plugged/vim-coffee-script/autoload/coffee.vim	/^function! coffee#CoffeeSetUpErrorFormat()$/;"	f
coffee#CoffeeSetUpVariables	.vim/plugged/vim-coffee-script/autoload/coffee.vim	/^function! coffee#CoffeeSetUpVariables()$/;"	f
coffeeAll	.vim/plugged/vim-coffee-script/Makefile	/^coffeeAll:$/;"	t
color	.vim/plugged/vim-css-color/tests/example.jsx	/^			color: '#ffde00',$/;"	p	class:AnonymousFunctione8eca1130100.style
color-vader-output	.vim/plugged/ale/run-tests	/^function color-vader-output() {$/;"	f
colors	.vim/plugged/vim-airline/t/themes.vim	/^    let colors = airline#themes#get_highlight('Foo')$/;"	v
colors_name	.vim/colors/badwolf.vim	/^let colors_name = "badwolf"$/;"	v
colors_name	.vim/colors/molotov.vim	/^let colors_name = "molotov"$/;"	v
colors_name	.vim/colors/solarized.vim	/^let colors_name = "solarized"$/;"	v
commentary_config	.vimrc	/^augroup commentary_config$/;"	a
complete	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def complete(tab, opts):$/;"	f
copy	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def copy(self):$/;"	m	class:OrderedDict
copyright	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^copyright = u'2012, EditorConfig Team'$/;"	v
cs	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
css_color#disable	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#disable()$/;"	f
css_color#enable	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#enable()$/;"	f
css_color#extend	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	function! css_color#extend(groups)$/;"	f
css_color#init	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	function! css_color#init(type, keywords, groups)$/;"	f
css_color#init	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#init(type, keywords, groups)$/;"	f
css_color#reinit	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#reinit()$/;"	f
css_color#toggle	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! css_color#toggle()$/;"	f
ctrlp#acceptfile	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#acceptfile(...)$/;"	f
ctrlp#addfile	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#addfile(ch, file)$/;"	f
ctrlp#autoignore#get_patterns	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^function! ctrlp#autoignore#get_patterns(root_dir) abort$/;"	f
ctrlp#autoignore#ignore	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^function! ctrlp#autoignore#ignore(item, type) abort$/;"	f
ctrlp#autoignore#ignore_close	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^function! ctrlp#autoignore#ignore_close() abort$/;"	f
ctrlp#autoignore#ignore_init	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^function! ctrlp#autoignore#ignore_init() abort$/;"	f
ctrlp#bookmarkdir#accept	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#accept(mode, str)$/;"	f
ctrlp#bookmarkdir#add	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#add(bang, dir, ...)$/;"	f
ctrlp#bookmarkdir#id	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#id()$/;"	f
ctrlp#bookmarkdir#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#init()$/;"	f
ctrlp#bookmarkdir#remove	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#remove(entries)$/;"	f
ctrlp#buffers	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#buffers(...)$/;"	f
ctrlp#buffertag#accept	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#accept(mode, str)$/;"	f
ctrlp#buffertag#cmd	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#cmd(mode, ...)$/;"	f
ctrlp#buffertag#exit	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#exit()$/;"	f
ctrlp#buffertag#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#init(fname)$/;"	f
ctrlp#buffertag#opts	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#opts()$/;"	f
ctrlp#call	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#call(func, ...)$/;"	f
ctrlp#changes#accept	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#accept(mode, str)$/;"	f
ctrlp#changes#cmd	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#cmd(mode, ...)$/;"	f
ctrlp#changes#exit	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#exit()$/;"	f
ctrlp#changes#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#init(original_bufnr, bufnr)$/;"	f
ctrlp#clearmarkedlist	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clearmarkedlist()$/;"	f
ctrlp#clr	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clr(...)$/;"	f
ctrlp#clra	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clra()$/;"	f
ctrlp#complen	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#complen(...)$/;"	f
ctrlp#dir#accept	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#accept(mode, str)$/;"	f
ctrlp#dir#id	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#id()$/;"	f
ctrlp#dir#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#init(...)$/;"	f
ctrlp#dirnfile	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#dirnfile(entries)$/;"	f
ctrlp#exit	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#exit()$/;"	f
ctrlp#files	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#files()$/;"	f
ctrlp#getcline	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getcline()$/;"	f
ctrlp#getmarkedlist	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getmarkedlist()$/;"	f
ctrlp#getvar	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getvar(var)$/;"	f
ctrlp#hicheck	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#hicheck(grp, defgrp)$/;"	f
ctrlp#igncwd	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#igncwd(cwd)$/;"	f
ctrlp#init	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#init(type, ...)$/;"	f
ctrlp#j2l	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#j2l(nr)$/;"	f
ctrlp#line#accept	.vim/plugged/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#accept(mode, str)$/;"	f
ctrlp#line#cmd	.vim/plugged/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#cmd(mode, ...)$/;"	f
ctrlp#line#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#init(bufnr)$/;"	f
ctrlp#mixed#id	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#id()$/;"	f
ctrlp#mixed#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#init(clim)$/;"	f
ctrlp#modfilecond	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#modfilecond(w)$/;"	f
ctrlp#mrufiles#add	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#add(fn)$/;"	f
ctrlp#mrufiles#bufs	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#bufs()$/;"	f
ctrlp#mrufiles#cachefile	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#cachefile()$/;"	f
ctrlp#mrufiles#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#init()$/;"	f
ctrlp#mrufiles#list	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#list(...)$/;"	f
ctrlp#mrufiles#opts	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#opts()$/;"	f
ctrlp#mrufiles#refresh	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#refresh(...)$/;"	f
ctrlp#mrufiles#remove	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#remove(files)$/;"	f
ctrlp#mrufiles#tgrel	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#tgrel()$/;"	f
ctrlp#normcmd	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#normcmd(cmd, ...)$/;"	f
ctrlp#nosy	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#nosy()$/;"	f
ctrlp#progress	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#progress(enum, ...)$/;"	f
ctrlp#prtclear	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#prtclear()$/;"	f
ctrlp#quickfix#accept	.vim/plugged/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#accept(mode, str)$/;"	f
ctrlp#quickfix#id	.vim/plugged/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#id()$/;"	f
ctrlp#quickfix#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#init()$/;"	f
ctrlp#recordhist	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#recordhist()$/;"	f
ctrlp#rmbasedir	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#rmbasedir(items)$/;"	f
ctrlp#rtscript#id	.vim/plugged/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#id()$/;"	f
ctrlp#rtscript#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#init(caching)$/;"	f
ctrlp#setdir	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setdir(path, ...)$/;"	f
ctrlp#setlcdir	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlcdir()$/;"	f
ctrlp#setlines	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlines(...)$/;"	f
ctrlp#setpathmode	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setpathmode(pmode, ...)$/;"	f
ctrlp#statusline	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#statusline()$/;"	f
ctrlp#switchtype	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#switchtype(id)$/;"	f
ctrlp#syntax	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#syntax()$/;"	f
ctrlp#tabcount	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#tabcount()$/;"	f
ctrlp#tag#accept	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#accept(mode, str)$/;"	f
ctrlp#tag#enter	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#enter()$/;"	f
ctrlp#tag#id	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#id()$/;"	f
ctrlp#tag#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#init()$/;"	f
ctrlp#undo#accept	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#accept(mode, str)$/;"	f
ctrlp#undo#enter	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#enter()$/;"	f
ctrlp#undo#exit	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#exit()$/;"	f
ctrlp#undo#id	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#id()$/;"	f
ctrlp#undo#init	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#init()$/;"	f
ctrlp#utils#cachedir	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachedir()$/;"	f
ctrlp#utils#cachefile	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachefile(...)$/;"	f
ctrlp#utils#fnesc	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#fnesc(path, type, ...)$/;"	f
ctrlp#utils#glob	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#glob(...)$/;"	f
ctrlp#utils#globpath	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#globpath(...)$/;"	f
ctrlp#utils#lash	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#lash()$/;"	f
ctrlp#utils#mkdir	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#mkdir(dir)$/;"	f
ctrlp#utils#opts	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#opts()$/;"	f
ctrlp#utils#readfile	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#readfile(file)$/;"	f
ctrlp#utils#writecache	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#writecache(lines, ...)$/;"	f
ctrlp_config	.vimrc	/^augroup ctrlp_config$/;"	a
current_compiler	.vim/plugged/vim-coffee-script/compiler/cake.vim	/^let current_compiler = 'cake'$/;"	v
current_compiler	.vim/plugged/vim-coffee-script/compiler/coffee.vim	/^let current_compiler = 'coffee'$/;"	v
current_compiler	.vim/plugged/vim-javascript/compiler/eslint.vim	/^let current_compiler = "eslint"$/;"	v
custom_commands	.vimrc	/^augroup custom_commands$/;"	a
cva	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> cva :<C-U>Gcommit --amend --verbose<CR>$/;"	m
cvc	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> cvc :<C-U>Gcommit --verbose<CR>$/;"	m
d	.vim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	.vim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
dd	.vim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
dd	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> dd :<C-U>execute <SID>StageDiff('Gdiff')<CR>$/;"	m
delta	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^delta = frame_no \/ fps$/;"	v
dependencies	.vim/plugged/vim-misc/addon-info.json	/^{"vim_script_nr": 4597, "dependencies": {}, "homepage": "http:\/\/peterodding.com\/code\/vim\/mi/;"	o
dependencies	.vim/plugged/vim-snippets/addon-info.json	/^  "dependencies" : {$/;"	o
description	.vim/plugged/vim-snippets/addon-info.json	/^  "description" : "community driven set of snippets for snipmate"$/;"	s
devhelp	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^devhelp:$/;"	t
dh	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> dh :<C-U>execute <SID>StageDiff('Gsdiff')<CR>$/;"	m
did_help_syntax_inits	.vim/syntax/ri.vim	/^    let did_help_syntax_inits = 1$/;"	v
did_javascript_syn_inits	.vim/plugged/vim-javascript/extras/flow.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	.vim/plugged/vim-javascript/extras/jsdoc.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	.vim/plugged/vim-javascript/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_json_syn_inits	.vim/syntax/json.vim	/^    let did_json_syn_inits = 1$/;"	v
dirhtml	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^dirhtml:$/;"	t
doctest	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^doctest:$/;"	t
down	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def down(self):$/;"	m	class:Turtle
dp	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> dp :<C-U>execute <SID>StageDiffEdit()<CR>$/;"	m
draw	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^    def draw(self):$/;"	m	class:Bar
draw	.vim/plugged/vim-minimap/autoload/minimap.py	/^        def draw(lengths,indents, startline=0):$/;"	f	function:updateminimap	file:
ds	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> ds :<C-U>execute <SID>StageDiff('Gsdiff')<CR>$/;"	m
ds	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dv	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> dv :<C-U>execute <SID>StageDiff('Gvdiff')<CR>$/;"	m
e	.vim/undo/%Users%jose.represa%workspace%examples-responsive-pwa%challenge%css%style.css	/^VimüUnDoÂekheader h1{5Å_–nav i.fa {  .menu {}5Å_–  .fa.fa {5Å_–  .fa.fa {  .fa.fa {5Å_– { /;"	s
easy_align#align	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! easy_align#align(bang, live, visualmode, expr) range$/;"	f
easy_align_config	.vimrc	/^augroup easy_align_config$/;"	a
ec_UseConfigFiles	.vim/plugged/editorconfig-vim/plugin/editorconfig.py	/^    def ec_UseConfigFiles():$/;"	f
ec_data	.vim/plugged/editorconfig-vim/plugin/editorconfig.py	/^    ec_data = {}$/;"	v
editorconfig	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^augroup editorconfig$/;"	a
editorconfig#AddNewHook	.vim/plugged/editorconfig-vim/autoload/editorconfig.vim	/^function editorconfig#AddNewHook(func) " {{{1$/;"	f
editorconfig#ApplyHooks	.vim/plugged/editorconfig-vim/autoload/editorconfig.vim	/^function editorconfig#ApplyHooks(config) " {{{1$/;"	f
editorconfig_except	.vim/plugged/editorconfig-vim/plugin/editorconfig.py	/^        import editorconfig.exceptions as editorconfig_except$/;"	I
editorconfig_trim_trailing_whitespace	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    augroup editorconfig_trim_trailing_whitespace$/;"	a
el	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%build%assets%js%nav.js	/^VimüUnDoÂ			var el;	activeElement = 'nav >' + lastLocationSelector;5Å_–			var el;r);/;"	v
emoji#available	.vim/plugged/vim-emoji/autoload/emoji.vim	/^function! emoji#available()$/;"	f
emoji#complete	.vim/plugged/vim-emoji/autoload/emoji.vim	/^function! emoji#complete(findstart, base)$/;"	f
emoji#data#dict	.vim/plugged/vim-emoji/autoload/emoji/data.vim	/^function! emoji#data#dict()$/;"	f
emoji#for	.vim/plugged/vim-emoji/autoload/emoji.vim	/^function! emoji#for(name, ...)$/;"	f
emoji#list	.vim/plugged/vim-emoji/autoload/emoji.vim	/^function! emoji#list()$/;"	f
emoji_complete_redraw	.vim/plugged/vim-emoji/autoload/emoji.vim	/^    augroup emoji_complete_redraw$/;"	a
emoji_config	.vimrc	/^augroup emoji_config$/;"	a
end	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/make.bat	/^:end$/;"	l
enmasse#DisplayQuickfixEntryForCurrentLine	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! enmasse#DisplayQuickfixEntryForCurrentLine()$/;"	f
enmasse#GetVersion	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! enmasse#GetVersion()$/;"	f
enmasse#Open	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! enmasse#Open()$/;"	f
enmasse#WriteCurrentBuffer	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! enmasse#WriteCurrentBuffer()$/;"	f
epub	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^epub:$/;"	t
exclude_patterns	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^exclude_patterns = ['_build']$/;"	v
extensions	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^extensions = ['sphinx.ext.autodoc']$/;"	v
faces	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^faces = [(0,1,2,3),(1,5,6,2),(5,4,7,6),(4,0,3,7),(0,4,5,1),(3,2,6,7)]$/;"	v
fd	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    fd = forward$/;"	v	class:Turtle
filename_score	.vim/plugged/ctrlp-py-matcher/autoload/pymatcher.py	/^    def filename_score(line):$/;"	f	function:CtrlPPyMatch	file:
filetype_c	.vimrc	/^augroup filetype_c$/;"	a
filetype_clojure	.vimrc	/^augroup filetype_clojure$/;"	a
filetype_coffee	.vimrc	/^augroup filetype_coffee$/;"	a
filetype_fish	.vimrc	/^augroup filetype_fish$/;"	a
filetype_hbs	.vimrc	/^augroup filetype_hbs$/;"	a
filetype_jade	.vimrc	/^augroup filetype_jade$/;"	a
filetype_javascript	.vimrc	/^augroup filetype_javascript$/;"	a
filetype_json	.vimrc	/^augroup filetype_json$/;"	a
filetype_markdown	.vimrc	/^augroup filetype_markdown$/;"	a
filetype_nu	.vimrc	/^augroup filetype_nu$/;"	a
filetype_ruby	.vimrc	/^augroup filetype_ruby$/;"	a
filetype_xml	.vimrc	/^augroup filetype_xml$/;"	a
filetype_zsh	.vimrc	/^augroup filetype_zsh$/;"	a
filetypedetect	.vim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filter-vader-output	.vim/plugged/ale/run-tests	/^function filter-vader-output() {$/;"	f
flex: 0	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%classes.css	/^VimüUnDoÂ163b6;    padding-left: 16px;5Å_–		flex: 1;5Å_–		flex: 3;5Å_–Åì˘		flex: 0;center;x s/;"	s
flex: 1	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%classes.css	/^VimüUnDoÂ163b6;    padding-left: 16px;5Å_–		flex: 1;5Å_–		flex: 3;5Å_–Åì˘		flex: 0;center;x s/;"	s
flex: 3	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%classes.css	/^VimüUnDoÂ163b6;    padding-left: 16px;5Å_–		flex: 1;5Å_–		flex: 3;5Å_–Åì˘		flex: 0;center;x s/;"	s
fnmatch	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^def fnmatch(name, pat):$/;"	f
fnmatchcase	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^def fnmatchcase(name, pat):$/;"	f
foldmarker	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def foldmarker():$/;"	f
force_unicode	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/compat.py	/^def force_unicode(string):$/;"	f
forward	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def forward(self, step):$/;"	m	class:Turtle
fps	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^fps = 20$/;"	v
frame	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def frame(self, min_x=None, min_y=None, max_x=None, max_y=None):$/;"	m	class:Canvas
frame_no	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^frame_no = 0$/;"	v
frames	.vim/plugged/vim-minimap/autoload/drawille/examples/speed_test.py	/^frames = 1000 * 10$/;"	v
friendly_name	.vim/plugged/vim-gitgutter/test/runner.vim	/^  let friendly_name = FriendlyName(test)$/;"	v
fugitive	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#buffer	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#can_diffoff	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#can_diffoff(buf) abort$/;"	f
fugitive#cfile	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#cfile() abort$/;"	f
fugitive#cwindow	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#cwindow() abort$/;"	f
fugitive#detect	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#foldtext	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#git_commands	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#git_commands() abort$/;"	f
fugitive#git_version	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#git_version(...) abort$/;"	f
fugitive#head	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#reload_status	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#reload_status() abort$/;"	f
fugitive#repo	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#statusline	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive_blame	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_commit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive_diff	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_files	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_files$/;"	a
fugitive_foldtext	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_foldtext$/;"	a
fugitive_remove	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_remove$/;"	a
fugitive_status	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_statusline	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_statusline$/;"	a
fugitive_temp	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_temp$/;"	a
fzf_config	.vimrc	/^augroup fzf_config$/;"	a
g:	.vim/plugged/ale/autoload/ale.vim	/^    let g:[l:full_name] = l:value$/;"	v
g:	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^  let g:{magic_name} = global_value$/;"	v
g:CtrlSpaceStatuslineFunction	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^  let g:CtrlSpaceStatuslineFunction = "airline#extensions#ctrlspace#statusline()"$/;"	v
g:EditorConfig_exclude_patterns	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_exclude_patterns = []$/;"	v
g:EditorConfig_exec_path	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_exec_path = ''$/;"	v
g:EditorConfig_max_line_indicator	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_max_line_indicator = 'line'$/;"	v
g:EditorConfig_preserve_formatoptions	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_preserve_formatoptions = 0$/;"	v
g:EditorConfig_python_files_dir	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_python_files_dir = 'plugin\/editorconfig-core-py'$/;"	v
g:EditorConfig_verbose	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_verbose = 0$/;"	v
g:NERDCustomDelimiters	.vimrc	/^  let g:NERDCustomDelimiters = { 'racket': { 'left': ';', 'leftAlt': '#|', 'rightAlt': '|#' } }$/;"	v
g:NERDDelimiterMap	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let g:NERDDelimiterMap = s:delimiterMap$/;"	v
g:NERDTree	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoDeleteBuffer	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeCreator	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirNode	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	.vim/plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeIgnore	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeInvalidBookmarks	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapNextHunk	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^    let g:NERDTreeMapNextHunk = ']c'$/;"	v
g:NERDTreeMapPrevHunk	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^    let g:NERDTreeMapPrevHunk = '[c'$/;"	v
g:NERDTreeMenuController	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuItem	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeOpener	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeShowGitStatus	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^    let g:NERDTreeShowGitStatus = 1$/;"	v
g:NERDTreeShowHidden	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeShowHidden = 1$/;"	v
g:NERDTreeShowHidden	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeShowHidden = showhidden$/;"	v
g:NERDTreeShowIgnoredStatus	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^    let g:NERDTreeShowIgnoredStatus = 0$/;"	v
g:NERDTreeSortOrder	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"$/;"	v
g:NERDTreeUI	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUpdateOnCursorHold	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^    let g:NERDTreeUpdateOnCursorHold = 1$/;"	v
g:NERDTreeUpdateOnWrite	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^    let g:NERDTreeUpdateOnWrite = 1$/;"	v
g:UltiSnipsEditSplit	.vimrc	/^  let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsExpandTrigger	.vimrc	/^  let g:UltiSnipsExpandTrigger="<c-s>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	.vimrc	/^  let g:UltiSnipsJumpBackwardTrigger="<c-z>"$/;"	v
g:UltiSnipsJumpForwardTrigger	.vimrc	/^  let g:UltiSnipsJumpForwardTrigger="<c-b>"$/;"	v
g:_plug_bang	.vim/autoload/plug.vim	/^    let g:_plug_bang = '!'.escape(cmd, '#!%')$/;"	v
g:ack_apply_lmappings	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_apply_lmappings = !exists("g:ack_lhandler")$/;"	v
g:ack_apply_qmappings	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_apply_qmappings = !exists("g:ack_qhandler")$/;"	v
g:ack_autoclose	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_autoclose = 0$/;"	v
g:ack_autofold_results	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_autofold_results = 0$/;"	v
g:ack_default_options	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_default_options = " -s -H --nopager --nocolor --nogroup --column"$/;"	v
g:ack_lhandler	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_lhandler = "botright lopen"$/;"	v
g:ack_mappings	.vim/plugged/ack.vim/autoload/ack.vim	/^  let g:ack_mappings.q = l:closemap$/;"	v
g:ack_mappings	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_mappings = extend(s:ack_mappings, g:ack_mappings)$/;"	v
g:ack_mappings	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_mappings = s:ack_mappings$/;"	v
g:ack_qhandler	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_qhandler = "botright copen"$/;"	v
g:ack_use_cword_for_empty_search	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ack_use_cword_for_empty_search = 1$/;"	v
g:ack_use_dispatch	.vim/plugged/ack.vim/autoload/ack.vim	/^    let g:ack_use_dispatch = 0$/;"	v
g:ack_use_dispatch	.vim/plugged/ack.vim/autoload/ack.vim	/^  let g:ack_use_dispatch = 0$/;"	v
g:ackhighlight	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ackhighlight = 0$/;"	v
g:ackprg	.vim/plugged/ack.vim/plugin/ack.vim	/^    let g:ackprg = "ack"$/;"	v
g:ackprg	.vim/plugged/ack.vim/plugin/ack.vim	/^    let g:ackprg = "ack-grep"$/;"	v
g:ackprg	.vim/plugged/ack.vim/plugin/ack.vim	/^  let g:ackprg .= g:ack_default_options$/;"	v
g:ackprg	.vimrc	/^  let g:ackprg = 'ag --vimgrep'$/;"	v
g:acp_enableAtStartup	.vimrc	/^  let g:acp_enableAtStartup = 0$/;"	v
g:airline#extensions#default#layout	.vim/plugged/vim-airline/t/extensions_default.vim	/^let g:airline#extensions#default#layout = [$/;"	v
g:airline#extensions#example#number_of_cats	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^  let g:airline#extensions#example#number_of_cats = 42$/;"	v
g:airline#extensions#obsession#indicator_text	.vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^  let g:airline#extensions#obsession#indicator_text = '$'$/;"	v
g:airline#extensions#quickfix#location_text	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^let g:airline#extensions#quickfix#location_text = 'Location'$/;"	v
g:airline#extensions#quickfix#quickfix_text	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'$/;"	v
g:airline#extensions#tabline#buffer_nr_format	.vimrc	/^  let g:airline#extensions#tabline#buffer_nr_format = '%s '$/;"	v
g:airline#extensions#tabline#buffer_nr_show	.vimrc	/^  let g:airline#extensions#tabline#buffer_nr_show = 1$/;"	v
g:airline#extensions#tabline#enabled	.vimrc	/^  let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#fnamecollapse	.vimrc	/^  let g:airline#extensions#tabline#fnamecollapse = 0$/;"	v
g:airline#extensions#tabline#fnamemod	.vimrc	/^  let g:airline#extensions#tabline#fnamemod = ':t'$/;"	v
g:airline#extensions#whitespace#enabled	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^    let g:airline#extensions#whitespace#enabled = s:enabled$/;"	v
g:airline#extensions#windowswap#indicator_text	.vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^  let g:airline#extensions#windowswap#indicator_text = 'WS'$/;"	v
g:airline#extensions#wordcount#filetypes	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let g:airline#extensions#wordcount#filetypes = get(g:, 'airline#extensions#wordcount#filetypes',$/;"	v
g:airline#highlighter#normal_fg_hi	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^    let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm'/;"	v
g:airline#init#bootstrapping	.vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#init#bootstrapping = 1$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^  let g:airline#themes#dark#palette.ctrlp = airline#extensions#ctrlp#generate_color_map($/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette = {}$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.accents = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive = airline#themes#generate_color_map(s:IA1, s:IA2, s:I/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert = airline#themes#generate_color_map(s:I1, s:I2, s:I3)$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_paste = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal = airline#themes#generate_color_map(s:N1, s:N2, s:N3)$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace = copy(g:airline#themes#dark#palette.insert)$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace.airline_a = [ s:I2[0]   , '#af0000' , s:I2[2] , 124   /;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace_modified = g:airline#themes#dark#palette.insert_modifi/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual = airline#themes#generate_color_map(s:V1, s:V2, s:V3)$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual_modified = {$/;"	v
g:airline#util#async	.vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#util#async = v:version >= 800 && has('job')$/;"	v
g:airline#util#is_windows	.vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#util#is_windows = has('win32') || has('win64')$/;"	v
g:airline_enable_syntastic	.vimrc	/^  let g:airline_enable_syntastic = 1$/;"	v
g:airline_gui_mode	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^    let g:airline_gui_mode = airline#init#gui_mode()$/;"	v
g:airline_gui_mode	.vim/plugged/vim-airline/plugin/airline.vim	/^  let g:airline_gui_mode = airline#init#gui_mode()$/;"	v
g:airline_inactive_collapse	.vim/plugged/vim-airline/t/airline.vim	/^    let g:airline_inactive_collapse = 0$/;"	v
g:airline_inactive_collapse	.vim/plugged/vim-airline/t/airline.vim	/^    let g:airline_inactive_collapse = 1$/;"	v
g:airline_last_window_changed	.vim/plugged/vim-airline/plugin/airline.vim	/^  let g:airline_last_window_changed = l:key$/;"	v
g:airline_powerline_fonts	.vimrc	/^  let g:airline_powerline_fonts = 1$/;"	v
g:airline_section_	.vim/plugged/vim-airline/t/init.vim	/^      let g:airline_section_{s} = s$/;"	v
g:airline_section_a	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_a = airline#section#create_left(['mode', 'crypt', 'paste', 'spell', 'c/;"	v
g:airline_section_a	.vim/plugged/vim-airline/t/airline.vim	/^    let g:airline_section_a = airline#section#create(['mode', 'mode'])$/;"	v
g:airline_section_b	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_b = airline#section#create(['hunks', 'branch'])$/;"	v
g:airline_section_c	.vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_c = airline#section#create(['%<', 'file', spc, 'readonly'])$/;"	v
g:airline_section_c	.vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_c = airline#section#create(['%<', 'path', spc, 'readonly'])$/;"	v
g:airline_section_error	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_error = airline#section#create(['ycm_error_count', 'syntastic', 'eclim/;"	v
g:airline_section_gutter	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_gutter = airline#section#create(['%='])$/;"	v
g:airline_section_warning	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^      let g:airline_section_warning .= airline#section#create(['whitespace'])$/;"	v
g:airline_section_warning	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_warning = airline#section#create(['ycm_warning_count',  'neomake_warni/;"	v
g:airline_section_x	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_x = airline#section#create_right(['tagbar', 'filetype'])$/;"	v
g:airline_section_y	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_y = airline#section#create_right(['ffenc'])$/;"	v
g:airline_section_z	.vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_z = airline#section#create(['%3p%%'.spc, 'linenr',  ':%3v'])$/;"	v
g:airline_section_z	.vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_z = airline#section#create(['windowswap', 'obsession', '%3p%%'.spc, /;"	v
g:airline_statusline_funcrefs	.vim/plugged/vim-airline/autoload/airline.vim	/^let g:airline_statusline_funcrefs = get(g:, 'airline_statusline_funcrefs', [])$/;"	v
g:airline_statusline_funcrefs	.vim/plugged/vim-airline/t/airline.vim	/^    let g:airline_statusline_funcrefs = []$/;"	v
g:airline_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^      let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^    let g:airline_theme = a:name$/;"	v
g:airline_theme	.vim/plugged/vim-airline/plugin/airline.vim	/^      let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/plugin/airline.vim	/^    let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/t/airline.vim	/^let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/t/builder.vim	/^let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/t/highlighter.vim	/^let g:airline_theme = 'dark'$/;"	v
g:ale#util#nul_file	.vim/plugged/ale/autoload/ale/util.vim	/^    let g:ale#util#nul_file = 'nul'$/;"	v
g:ale#util#nul_file	.vim/plugged/ale/autoload/ale/util.vim	/^let g:ale#util#nul_file = '\/dev\/null'$/;"	v
g:ale_asm_gcc_options	.vim/plugged/ale/ale_linters/asm/gcc.vim	/^let g:ale_asm_gcc_options = get(g:, 'ale_asm_gcc_options', '-Wall')$/;"	v
g:ale_awk_gawk_executable	.vim/plugged/ale/ale_linters/awk/gawk.vim	/^let g:ale_awk_gawk_executable =$/;"	v
g:ale_awk_gawk_options	.vim/plugged/ale/ale_linters/awk/gawk.vim	/^let g:ale_awk_gawk_options =$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale.vim	/^        let g:ale_buffer_info[l:buffer].lint_file_loclist = []$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale.vim	/^    let g:ale_buffer_info[l:buffer].new_loclist = []$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale/engine.vim	/^        let g:ale_buffer_info[a:buffer] = {$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale/engine.vim	/^        let g:ale_buffer_info[l:buffer].history = []$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale/engine.vim	/^    let g:ale_buffer_info[a:buffer].temporary_directory_list = []$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale/engine.vim	/^    let g:ale_buffer_info[a:buffer].temporary_file_list = []$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale/history.vim	/^        let g:ale_buffer_info[a:buffer].history = []$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale/history.vim	/^    let g:ale_buffer_info[a:buffer].history = l:history$/;"	v
g:ale_buffer_info	.vim/plugged/ale/autoload/ale/statusline.vim	/^    let g:ale_buffer_info[a:buffer].count = l:count$/;"	v
g:ale_buffer_info	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_buffer_info = {}$/;"	v
g:ale_c_clang_options	.vim/plugged/ale/ale_linters/c/clang.vim	/^    let g:ale_c_clang_options = '-std=c11 -Wall'$/;"	v
g:ale_c_cppcheck_options	.vim/plugged/ale/ale_linters/c/cppcheck.vim	/^let g:ale_c_cppcheck_options = get(g:, 'ale_c_cppcheck_options', '--enable=style')$/;"	v
g:ale_c_gcc_options	.vim/plugged/ale/ale_linters/c/gcc.vim	/^    let g:ale_c_gcc_options = '-std=c11 -Wall'$/;"	v
g:ale_chef_foodcritic_executable	.vim/plugged/ale/ale_linters/chef/foodcritic.vim	/^let g:ale_chef_foodcritic_executable = get(g:, 'ale_chef_foodcritic_executable', 'foodcritic')$/;"	v
g:ale_chef_foodcritic_options	.vim/plugged/ale/ale_linters/chef/foodcritic.vim	/^let g:ale_chef_foodcritic_options = get(g:, 'ale_chef_foodcritic_options', '')$/;"	v
g:ale_cmake_cmakelint_executable	.vim/plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_executable =$/;"	v
g:ale_cmake_cmakelint_options	.vim/plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_options =$/;"	v
g:ale_cpp_clang_options	.vim/plugged/ale/ale_linters/cpp/clang.vim	/^    let g:ale_cpp_clang_options = '-std=c++14 -Wall'$/;"	v
g:ale_cpp_clangtidy_checks	.vim/plugged/ale/ale_linters/cpp/clangtidy.vim	/^let g:ale_cpp_clangtidy_checks = get(g:, 'ale_cpp_clangtidy_checks', ['*'])$/;"	v
g:ale_cpp_clangtidy_options	.vim/plugged/ale/ale_linters/cpp/clangtidy.vim	/^let g:ale_cpp_clangtidy_options = get(g:, 'ale_cpp_clangtidy_options', '')$/;"	v
g:ale_cpp_cppcheck_options	.vim/plugged/ale/ale_linters/cpp/cppcheck.vim	/^let g:ale_cpp_cppcheck_options = get(g:, 'ale_cpp_cppcheck_options', '--enable=style')$/;"	v
g:ale_cpp_cpplint_options	.vim/plugged/ale/ale_linters/cpp/cpplint.vim	/^    let g:ale_cpp_cpplint_options = ''$/;"	v
g:ale_cpp_gcc_options	.vim/plugged/ale/ale_linters/cpp/gcc.vim	/^        let g:ale_cpp_gcc_options = '-std=c++14 -Wall'$/;"	v
g:ale_cpp_gcc_options	.vim/plugged/ale/ale_linters/cpp/gcc.vim	/^        let g:ale_cpp_gcc_options = '-std=c++1y -Wall'$/;"	v
g:ale_cs_mcs_options	.vim/plugged/ale/ale_linters/cs/mcs.vim	/^let g:ale_cs_mcs_options = get(g:, 'ale_cs_mcs_options', '')$/;"	v
g:ale_echo_cursor	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_echo_cursor = get(g:, 'ale_echo_cursor', 1)$/;"	v
g:ale_echo_msg_error_str	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_echo_msg_error_str = get(g:, 'ale_echo_msg_error_str', 'Error')$/;"	v
g:ale_echo_msg_format	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_echo_msg_format = get(g:, 'ale_echo_msg_format', '%s')$/;"	v
g:ale_echo_msg_warning_str	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_echo_msg_warning_str = get(g:, 'ale_echo_msg_warning_str', 'Warning')$/;"	v
g:ale_emit_conflict_warnings	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_emit_conflict_warnings = get(g:, 'ale_emit_conflict_warnings', 1)$/;"	v
g:ale_enabled	.vim/plugged/ale/plugin/ale.vim	/^    let g:ale_enabled = !get(g:, 'ale_enabled')$/;"	v
g:ale_enabled	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_enabled = get(g:, 'ale_enabled', 1)$/;"	v
g:ale_erlang_erlc_options	.vim/plugged/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_options = get(g:, 'ale_erlang_erlc_options', '')$/;"	v
g:ale_filetype_blacklist	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_filetype_blacklist = ['nerdtree', 'unite', 'tags']$/;"	v
g:ale_fix_buffer_data	.vim/plugged/ale/autoload/ale/fix.vim	/^    let g:ale_fix_buffer_data = {}$/;"	v
g:ale_fix_buffer_data	.vim/plugged/ale/autoload/ale/fix.vim	/^    let g:ale_fix_buffer_data[a:buffer] = {$/;"	v
g:ale_fix_buffer_data	.vim/plugged/ale/autoload/ale/fix.vim	/^    let g:ale_fix_buffer_data[a:buffer].temporary_directory_list = []$/;"	v
g:ale_fixers	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_fixers = get(g:, 'ale_fixers', {})$/;"	v
g:ale_fortran_gcc_executable	.vim/plugged/ale/ale_linters/fortran/gcc.vim	/^    let g:ale_fortran_gcc_executable = 'gcc'$/;"	v
g:ale_fortran_gcc_options	.vim/plugged/ale/ale_linters/fortran/gcc.vim	/^    let g:ale_fortran_gcc_options = '-Wall'$/;"	v
g:ale_fortran_gcc_use_free_form	.vim/plugged/ale/ale_linters/fortran/gcc.vim	/^    let g:ale_fortran_gcc_use_free_form = 1$/;"	v
g:ale_go_gometalinter_options	.vim/plugged/ale/ale_linters/go/gometalinter.vim	/^    let g:ale_go_gometalinter_options = ''$/;"	v
g:ale_has_override	.vim/plugged/ale/autoload/ale.vim	/^let g:ale_has_override = get(g:, 'ale_has_override', {})$/;"	v
g:ale_history_enabled	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_history_enabled = get(g:, 'ale_history_enabled', 1)$/;"	v
g:ale_history_log_output	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_history_log_output = get(g:, 'ale_history_log_output', 0)$/;"	v
g:ale_html_tidy_executable	.vim/plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_executable = get(g:, 'ale_html_tidy_executable', 'tidy')$/;"	v
g:ale_html_tidy_options	.vim/plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_options = get(g:, 'ale_html_tidy_options', s:default_options)$/;"	v
g:ale_java_checkstyle_options	.vim/plugged/ale/ale_linters/java/checkstyle.vim	/^    let g:ale_java_checkstyle_options = '-c \/google_checks.xml'$/;"	v
g:ale_java_javac_classpath	.vim/plugged/ale/ale_linters/java/javac.vim	/^let g:ale_java_javac_classpath = get(g:, 'ale_java_javac_classpath', '')$/;"	v
g:ale_java_javac_options	.vim/plugged/ale/ale_linters/java/javac.vim	/^let g:ale_java_javac_options = get(g:, 'ale_java_javac_options', '')$/;"	v
g:ale_javascript_eslint_options	.vim/plugged/ale/ale_linters/javascript/eslint.vim	/^let g:ale_javascript_eslint_options =$/;"	v
g:ale_keep_list_window_open	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_keep_list_window_open = get(g:, 'ale_keep_list_window_open', 0)$/;"	v
g:ale_kotlin_kotlinc_classpath	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_classpath = get(g:, 'ale_kotlin_kotlinc_classpath', '')$/;"	v
g:ale_kotlin_kotlinc_config_file	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_config_file = get(g:, 'ale_kotlin_kotlinc_config_file', '.ale_kotlinc_c/;"	v
g:ale_kotlin_kotlinc_enable_config	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_enable_config = get(g:, 'ale_kotlin_kotlinc_enable_config', 0)$/;"	v
g:ale_kotlin_kotlinc_module_filename	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_module_filename = get(g:, 'ale_kotlin_kotlinc_module_filename', 'module/;"	v
g:ale_kotlin_kotlinc_options	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_options = get(g:, 'ale_kotlin_kotlinc_options', '')$/;"	v
g:ale_kotlin_kotlinc_sourcepath	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_sourcepath = get(g:, 'ale_kotlin_kotlinc_sourcepath', '')$/;"	v
g:ale_kotlin_kotlinc_use_module_file	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_use_module_file = get(g:, 'ale_kotlin_kotlinc_use_module_file', 0)$/;"	v
g:ale_lint_delay	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_delay = get(g:, 'ale_lint_delay', 200)$/;"	v
g:ale_lint_on_enter	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_enter = get(g:, 'ale_lint_on_enter', 1)$/;"	v
g:ale_lint_on_filetype_changed	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_filetype_changed = get(g:, 'ale_lint_on_filetype_changed', 1)$/;"	v
g:ale_lint_on_insert_leave	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_insert_leave = get(g:, 'ale_lint_on_insert_leave', 0)$/;"	v
g:ale_lint_on_save	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_save = get(g:, 'ale_lint_on_save', 1)$/;"	v
g:ale_lint_on_text_changed	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_text_changed = get(g:, 'ale_lint_on_text_changed', 'always')$/;"	v
g:ale_linter_aliases	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_linter_aliases = get(g:, 'ale_linter_aliases', {})$/;"	v
g:ale_linters	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_linters = get(g:, 'ale_linters', {})$/;"	v
g:ale_linters	.vimrc	/^  let g:ale_linters = {$/;"	v
g:ale_lsp_next_message_id	.vim/plugged/ale/autoload/ale/lsp.vim	/^        let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_message_id	.vim/plugged/ale/autoload/ale/lsp.vim	/^    let g:ale_lsp_next_message_id += 1$/;"	v
g:ale_lsp_next_message_id	.vim/plugged/ale/autoload/ale/lsp.vim	/^let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lua_luacheck_executable	.vim/plugged/ale/ale_linters/lua/luacheck.vim	/^let g:ale_lua_luacheck_executable =$/;"	v
g:ale_lua_luacheck_options	.vim/plugged/ale/ale_linters/lua/luacheck.vim	/^let g:ale_lua_luacheck_options =$/;"	v
g:ale_matlab_mlint_executable	.vim/plugged/ale/ale_linters/matlab/mlint.vim	/^let g:ale_matlab_mlint_executable =$/;"	v
g:ale_max_buffer_history_size	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_max_buffer_history_size = get(g:, 'ale_max_buffer_history_size', 20)$/;"	v
g:ale_objc_clang_options	.vim/plugged/ale/ale_linters/objc/clang.vim	/^    let g:ale_objc_clang_options = '-std=c11 -Wall'$/;"	v
g:ale_objcpp_clang_options	.vim/plugged/ale/ale_linters/objcpp/clang.vim	/^    let g:ale_objcpp_clang_options = '-std=c++14 -Wall'$/;"	v
g:ale_open_list	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_open_list = get(g:, 'ale_open_list', 0)$/;"	v
g:ale_perl_perl_executable	.vim/plugged/ale/ale_linters/perl/perl.vim	/^let g:ale_perl_perl_executable =$/;"	v
g:ale_perl_perl_options	.vim/plugged/ale/ale_linters/perl/perl.vim	/^let g:ale_perl_perl_options =$/;"	v
g:ale_php_phpcs_standard	.vim/plugged/ale/ale_linters/php/phpcs.vim	/^let g:ale_php_phpcs_standard = get(g:, 'ale_php_phpcs_standard', '')$/;"	v
g:ale_php_phpmd_ruleset	.vim/plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_ruleset = get(g:, 'ale_php_phpmd_ruleset', 'cleancode,codesize,controversial/;"	v
g:ale_puppet_puppetlint_executable	.vim/plugged/ale/ale_linters/puppet/puppetlint.vim	/^let g:ale_puppet_puppetlint_executable =$/;"	v
g:ale_puppet_puppetlint_options	.vim/plugged/ale/ale_linters/puppet/puppetlint.vim	/^let g:ale_puppet_puppetlint_options =$/;"	v
g:ale_python_flake8_executable	.vim/plugged/ale/ale_linters/python/flake8.vim	/^let g:ale_python_flake8_executable =$/;"	v
g:ale_python_flake8_options	.vim/plugged/ale/ale_linters/python/flake8.vim	/^let g:ale_python_flake8_options =$/;"	v
g:ale_python_flake8_use_global	.vim/plugged/ale/ale_linters/python/flake8.vim	/^let g:ale_python_flake8_use_global = get(g:, 'ale_python_flake8_use_global', 0)$/;"	v
g:ale_python_mypy_executable	.vim/plugged/ale/ale_linters/python/mypy.vim	/^let g:ale_python_mypy_executable =$/;"	v
g:ale_python_mypy_options	.vim/plugged/ale/ale_linters/python/mypy.vim	/^let g:ale_python_mypy_options = get(g:, 'ale_python_mypy_options', '')$/;"	v
g:ale_python_mypy_use_global	.vim/plugged/ale/ale_linters/python/mypy.vim	/^let g:ale_python_mypy_use_global = get(g:, 'ale_python_mypy_use_global', 0)$/;"	v
g:ale_python_pylint_executable	.vim/plugged/ale/ale_linters/python/pylint.vim	/^let g:ale_python_pylint_executable =$/;"	v
g:ale_python_pylint_options	.vim/plugged/ale/ale_linters/python/pylint.vim	/^let g:ale_python_pylint_options =$/;"	v
g:ale_python_pylint_use_global	.vim/plugged/ale/ale_linters/python/pylint.vim	/^let g:ale_python_pylint_use_global = get(g:, 'ale_python_pylint_use_global', 0)$/;"	v
g:ale_ruby_brakeman_options	.vim/plugged/ale/ale_linters/ruby/brakeman.vim	/^let g:ale_ruby_brakeman_options =$/;"	v
g:ale_ruby_reek_show_context	.vim/plugged/ale/ale_linters/ruby/reek.vim	/^let g:ale_ruby_reek_show_context =$/;"	v
g:ale_ruby_reek_show_wiki_link	.vim/plugged/ale/ale_linters/ruby/reek.vim	/^let g:ale_ruby_reek_show_wiki_link =$/;"	v
g:ale_ruby_rubocop_executable	.vim/plugged/ale/ale_linters/ruby/rubocop.vim	/^    let g:ale_ruby_rubocop_executable = 'rubocop'$/;"	v
g:ale_ruby_rubocop_options	.vim/plugged/ale/ale_linters/ruby/rubocop.vim	/^    let g:ale_ruby_rubocop_options = ''$/;"	v
g:ale_rust_cargo_use_check	.vim/plugged/ale/ale_linters/rust/cargo.vim	/^let g:ale_rust_cargo_use_check = get(g:, 'ale_rust_cargo_use_check', 0)$/;"	v
g:ale_rust_ignore_error_codes	.vim/plugged/ale/autoload/ale/handlers/rust.vim	/^    let g:ale_rust_ignore_error_codes = []$/;"	v
g:ale_set_highlights	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_set_highlights = get(g:, 'ale_set_highlights', has('syntax'))$/;"	v
g:ale_set_loclist	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_set_loclist = get(g:, 'ale_set_loclist', 1)$/;"	v
g:ale_set_quickfix	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_set_quickfix = get(g:, 'ale_set_quickfix', 0)$/;"	v
g:ale_set_signs	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_set_signs = get(g:, 'ale_set_signs', has('signs'))$/;"	v
g:ale_sh_shell_default_shell	.vim/plugged/ale/ale_linters/sh/shell.vim	/^        let g:ale_sh_shell_default_shell = 'bash'$/;"	v
g:ale_sh_shell_default_shell	.vim/plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = fnamemodify($SHELL, ':t')$/;"	v
g:ale_sh_shell_default_shell	.vim/plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = g:ale_linters_sh_shell_default_shell$/;"	v
g:ale_sh_shellcheck_exclusions	.vim/plugged/ale/ale_linters/sh/shellcheck.vim	/^let g:ale_sh_shellcheck_exclusions =$/;"	v
g:ale_sh_shellcheck_executable	.vim/plugged/ale/ale_linters/sh/shellcheck.vim	/^let g:ale_sh_shellcheck_executable =$/;"	v
g:ale_sh_shellcheck_options	.vim/plugged/ale/ale_linters/sh/shellcheck.vim	/^let g:ale_sh_shellcheck_options =$/;"	v
g:ale_sign_column_always	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_sign_column_always = get(g:, 'ale_sign_column_always', 0)$/;"	v
g:ale_sign_error	.vimrc	/^  let g:ale_sign_error = '‚úó'$/;"	v
g:ale_sign_offset	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_sign_offset = get(g:, 'ale_sign_offset', 1000000)$/;"	v
g:ale_sign_warning	.vimrc	/^  let g:ale_sign_warning = '‚ö†'$/;"	v
g:ale_spec_rpmlint_executable	.vim/plugged/ale/ale_linters/spec/rpmlint.vim	/^let g:ale_spec_rpmlint_executable =$/;"	v
g:ale_spec_rpmlint_options	.vim/plugged/ale/ale_linters/spec/rpmlint.vim	/^let g:ale_spec_rpmlint_options =$/;"	v
g:ale_statusline_format	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_statusline_format = get(g:, 'ale_statusline_format',$/;"	v
g:ale_tex_chktex_executable	.vim/plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_executable =$/;"	v
g:ale_tex_chktex_options	.vim/plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_options =$/;"	v
g:ale_tex_lacheck_executable	.vim/plugged/ale/ale_linters/tex/lacheck.vim	/^let g:ale_tex_lacheck_executable =$/;"	v
g:ale_vim_vint_show_style_issues	.vim/plugged/ale/ale_linters/vim/vint.vim	/^let g:ale_vim_vint_show_style_issues =$/;"	v
g:ale_virtualenv_dir_names	.vim/plugged/ale/autoload/ale/python.vim	/^let g:ale_virtualenv_dir_names = get(g:, 'ale_virtualenv_dir_names', [$/;"	v
g:ale_warn_about_trailing_whitespace	.vim/plugged/ale/plugin/ale.vim	/^let g:ale_warn_about_trailing_whitespace =$/;"	v
g:ale_xml_xmllint_executable	.vim/plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_executable = get(g:, 'ale_xml_xmllint_executable', 'xmllint')$/;"	v
g:ale_xml_xmllint_options	.vim/plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_options = get(g:, 'ale_xml_xmllint_options', '')$/;"	v
g:ale_yaml_yamllint_executable	.vim/plugged/ale/ale_linters/yaml/yamllint.vim	/^let g:ale_yaml_yamllint_executable =$/;"	v
g:ale_yaml_yamllint_options	.vim/plugged/ale/ale_linters/yaml/yamllint.vim	/^let g:ale_yaml_yamllint_options =$/;"	v
g:autoloaded_ack	.vim/plugged/ack.vim/autoload/ack.vim	/^let g:autoloaded_ack = 1$/;"	v
g:bufferline_active_buffer_left	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_buffer_left = ''$/;"	v
g:bufferline_active_buffer_right	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_buffer_right = ''$/;"	v
g:bufferline_active_highlight	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_highlight = 'bufferline_selected'$/;"	v
g:bufferline_inactive_highlight	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_inactive_highlight = 'airline_c'$/;"	v
g:bufferline_separator	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_separator = g:airline_symbols.space$/;"	v
g:coffee_cake	.vim/plugged/vim-coffee-script/autoload/coffee.vim	/^    let g:coffee_cake = 'cake'$/;"	v
g:coffee_cake_options	.vim/plugged/vim-coffee-script/autoload/coffee.vim	/^    let g:coffee_cake_options = ''$/;"	v
g:coffee_compiler	.vim/plugged/vim-coffee-script/autoload/coffee.vim	/^    let g:coffee_compiler = 'coffee'$/;"	v
g:coffee_lint_options	.vim/plugged/vim-coffee-script/autoload/coffee.vim	/^    let g:coffee_lint_options = ''$/;"	v
g:coffee_linter	.vim/plugged/vim-coffee-script/autoload/coffee.vim	/^    let g:coffee_linter = 'coffeelint'$/;"	v
g:coffee_make_options	.vim/plugged/vim-coffee-script/autoload/coffee.vim	/^    let g:coffee_make_options = ''$/;"	v
g:colors_name	.vim/colors/darkburn.vim	/^let g:colors_name="darkburn"$/;"	v
g:colors_name	.vim/colors/molokai.vim	/^let g:colors_name="molokai"$/;"	v
g:count	.vim/plugged/vim-airline/t/util.vim	/^    let g:count = 0$/;"	v
g:count	.vim/plugged/vim-airline/t/util.vim	/^  let g:count += 1$/;"	v
g:count	.vim/plugged/vim-airline/t/util.vim	/^  let g:count += 2$/;"	v
g:count	.vim/plugged/vim-airline/t/util.vim	/^  let g:count = a:0$/;"	v
g:ctrlp_alldirs	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^			let g:ctrlp_alldirs = ctrlp#utils#readfile(cafile)$/;"	v
g:ctrlp_allfiles	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^			let g:ctrlp_allfiles = ctrlp#dirnfile(g:ctrlp_allfiles)[1]$/;"	v
g:ctrlp_allfiles	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^			let g:ctrlp_allfiles = ctrlp#utils#readfile(cafile)$/;"	v
g:ctrlp_allfiles	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles = []$/;"	v
g:ctrlp_allfiles	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles = split(system(printf(lscmd, path)), "\\n")$/;"	v
g:ctrlp_allfiles	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^		let g:ctrlp_allfiles = systemlist(printf(lscmd, path))$/;"	v
g:ctrlp_allmixes	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^	let g:ctrlp_allmixes = { 'filtime': getftime(ctrlp#utils#cachefile()),$/;"	v
g:ctrlp_alltags	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^	let g:ctrlp_alltags = []$/;"	v
g:ctrlp_autoignore_debug	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^	let g:ctrlp_autoignore_debug = 0$/;"	v
g:ctrlp_autoignore_loaded	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let g:ctrlp_autoignore_loaded = 1$/;"	v
g:ctrlp_autoignore_trace	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^	let g:ctrlp_autoignore_trace = 0$/;"	v
g:ctrlp_builtins	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let g:ctrlp_builtins = len(g:ctrlp_types)-1$/;"	v
g:ctrlp_clear_cache_on_exit	.vimrc	/^  let g:ctrlp_clear_cache_on_exit = 0 " Do not clear filenames cache, to improve CtrlP startup$/;"	v
g:ctrlp_custom_ignore	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^	let g:ctrlp_custom_ignore = {}$/;"	v
g:ctrlp_custom_ignore	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let g:ctrlp_custom_ignore['func'] = 'ctrlp#autoignore#ignore'$/;"	v
g:ctrlp_custom_ignore	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let g:ctrlp_custom_ignore['func-close'] = 'ctrlp#autoignore#ignore_close'$/;"	v
g:ctrlp_custom_ignore	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let g:ctrlp_custom_ignore['func-init'] = 'ctrlp#autoignore#ignore_init'$/;"	v
g:ctrlp_lazy_update	.vimrc	/^  let g:ctrlp_lazy_update = 350 " Set delay to prevent extra search$/;"	v
g:ctrlp_lines	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^		let g:ctrlp_lines = ctrlp#mrufiles#refresh()$/;"	v
g:ctrlp_lines	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^	let g:ctrlp_lines = []$/;"	v
g:ctrlp_lines	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^	let g:ctrlp_lines = call(a:rfunc, [tbrem])$/;"	v
g:ctrlp_lines	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^	let g:ctrlp_lines = eval(types[s:itemtype])$/;"	v
g:ctrlp_lines	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^		let g:ctrlp_lines = g:ctrlp_allmixes['data']$/;"	v
g:ctrlp_lines	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^	let g:ctrlp_lines = copy(ctrlp#files())$/;"	v
g:ctrlp_lines	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^	let g:ctrlp_lines = len(mrufs) > len(g:ctrlp_lines)$/;"	v
g:ctrlp_match_func	.vimrc	/^  let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' } " Use python fuzzy matcher for bette/;"	v
g:ctrlp_match_window_bottom	.vimrc	/^  let g:ctrlp_match_window_bottom = 0 " Show at top of window$/;"	v
g:ctrlp_max_files	.vimrc	/^  let g:ctrlp_max_files = 0 " Set no file limit, we are building a big project$/;"	v
g:ctrlp_newcache	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^		let g:ctrlp_newcache = 0$/;"	v
g:ctrlp_newcache	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^		let g:ctrlp_newcache = 1$/;"	v
g:ctrlp_newdir	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^		let g:ctrlp_newdir = 0$/;"	v
g:ctrlp_newmix	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^	let g:ctrlp_newmix = 0$/;"	v
g:ctrlp_open_multiple_files	.vimrc	/^  let g:ctrlp_open_multiple_files = 'ij' " Open multiple files in hidden buffers, and jump to th/;"	v
g:ctrlp_open_new_file	.vimrc	/^  let g:ctrlp_open_new_file = 'r' " Open newly created files in the current window$/;"	v
g:ctrlp_prompt_mappings	.vimrc	/^  let g:ctrlp_prompt_mappings = {$/;"	v
g:ctrlp_root_markers	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^	let g:ctrlp_root_markers = []$/;"	v
g:ctrlp_status_func	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^  let g:ctrlp_status_func = {$/;"	v
g:ctrlp_switch_buffer	.vimrc	/^  let g:ctrlp_switch_buffer = 'Et' " Jump to tab AND buffer if already open$/;"	v
g:ctrlp_types	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^	let g:ctrlp_types = s:types$/;"	v
g:darkburn_alternate_Error	.vim/colors/darkburn.vim	/^      let g:darkburn_alternate_Error = 1$/;"	v
g:darkburn_alternate_Include	.vim/colors/darkburn.vim	/^      let g:darkburn_alternate_Include = 1$/;"	v
g:darkburn_force_dark_Background	.vim/colors/darkburn.vim	/^      let g:darkburn_force_dark_Background = 1$/;"	v
g:darkburn_high_Contrast	.vim/colors/darkburn.vim	/^     let g:darkburn_high_Contrast = 1$/;"	v
g:did_ri_interface	.vim/ftplugin/ri.vim	/^  let g:did_ri_interface = 1$/;"	v
g:easy_align_last_command	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^      let g:easy_align_last_command = s:echon('', n, regexp, ch, copts, '')$/;"	v
g:easy_align_last_command	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^    let g:easy_align_last_command = s:echon('', n, regx, d, copts, '')$/;"	v
g:easy_align_need_repeat	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^      let g:easy_align_need_repeat = 1$/;"	v
g:fugitive_browse_handlers	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_browse_handlers = []$/;"	v
g:fugitive_git_executable	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:fzf_files_options	.vimrc	/^  let g:fzf_files_options =$/;"	v
g:fzf_layout	.vimrc	/^  let g:fzf_layout = { 'down': '~40%' }$/;"	v
g:gitgutter_eager	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_eager = 0$/;"	v
g:gitgutter_enabled	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^  let g:gitgutter_enabled = 0$/;"	v
g:gitgutter_enabled	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^  let g:gitgutter_enabled = 1$/;"	v
g:gitgutter_highlight_lines	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^  let g:gitgutter_highlight_lines = 0$/;"	v
g:gitgutter_highlight_lines	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^  let g:gitgutter_highlight_lines = 1$/;"	v
g:gitgutter_realtime	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_realtime = 0$/;"	v
g:gitgutter_sign_added	.vimrc	/^    let g:gitgutter_sign_added = emoji#for('small_blue_diamond') $/;"	v
g:gitgutter_sign_column_always	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_column_always = 0$/;"	v
g:gitgutter_sign_column_always	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let g:gitgutter_sign_column_always=0$/;"	v
g:gitgutter_sign_column_always	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let g:gitgutter_sign_column_always=1$/;"	v
g:gitgutter_sign_modified	.vimrc	/^    let g:gitgutter_sign_modified = emoji#for('small_orange_diamond') $/;"	v
g:gitgutter_sign_modified_removed	.vimrc	/^    let g:gitgutter_sign_modified_removed = emoji#for('collision') $/;"	v
g:gitgutter_sign_removed	.vimrc	/^    let g:gitgutter_sign_removed = emoji#for('small_red_triangle') $/;"	v
g:gitgutter_sign_removed_first_line	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = '_^'$/;"	v
g:gitgutter_signs	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^  let g:gitgutter_signs = 0$/;"	v
g:gitgutter_signs	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^  let g:gitgutter_signs = 1$/;"	v
g:gutentags_add_default_project_roots	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_executable	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_project_root	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'/;"	v
g:gutentags_fake	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:indent_guides_auto_colors	.vimrc	/^  let g:indent_guides_auto_colors = 0$/;"	v
g:indent_guides_enable_on_vim_startup	.vimrc	/^  let g:indent_guides_enable_on_vim_startup = 0$/;"	v
g:javascript_conceal_NaN	.vimrc	/^  let g:javascript_conceal_NaN            = "‚Ñï"$/;"	v
g:javascript_conceal_arrow_function	.vimrc	/^  let g:javascript_conceal_arrow_function = "‚áí"$/;"	v
g:javascript_conceal_function	.vimrc	/^  let g:javascript_conceal_function       = "∆í"$/;"	v
g:javascript_conceal_null	.vimrc	/^  let g:javascript_conceal_null           = "√∏"$/;"	v
g:javascript_conceal_prototype	.vimrc	/^  let g:javascript_conceal_prototype      = "¬∂"$/;"	v
g:javascript_conceal_return	.vimrc	/^  let g:javascript_conceal_return         = "‚áö"$/;"	v
g:javascript_conceal_static	.vimrc	/^  let g:javascript_conceal_static         = "‚Ä¢"$/;"	v
g:javascript_conceal_super	.vimrc	/^  let g:javascript_conceal_super          = "Œ©"$/;"	v
g:javascript_conceal_this	.vimrc	/^  let g:javascript_conceal_this           = "@"$/;"	v
g:javascript_conceal_undefined	.vimrc	/^  let g:javascript_conceal_undefined      = "¬ø"$/;"	v
g:loaded_EditorConfig	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^let g:loaded_EditorConfig = 1$/;"	v
g:loaded_ack	.vim/plugged/ack.vim/plugin/ack.vim	/^let g:loaded_ack = 1$/;"	v
g:loaded_airline	.vim/plugged/vim-airline/plugin/airline.vim	/^let g:loaded_airline = 1$/;"	v
g:loaded_ale	.vim/plugged/ale/plugin/ale.vim	/^let g:loaded_ale = 1$/;"	v
g:loaded_ale_after	.vim/plugged/ale/after/plugin/ale.vim	/^let g:loaded_ale_after = 1$/;"	v
g:loaded_ale_dont_use_this_in_other_plugins_please	.vim/plugged/ale/plugin/ale.vim	/^let g:loaded_ale_dont_use_this_in_other_plugins_please = 1$/;"	v
g:loaded_commentary	.vim/plugged/vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_ctrlp	.vim/plugged/ctrlp.vim/plugin/ctrlp.vim	/^let g:loaded_ctrlp = 1$/;"	v
g:loaded_ctrlp_bookmarkdir	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let g:loaded_ctrlp_bookmarkdir = 1$/;"	v
g:loaded_ctrlp_buftag	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let g:loaded_ctrlp_buftag = 1$/;"	v
g:loaded_ctrlp_changes	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^let g:loaded_ctrlp_changes = 1$/;"	v
g:loaded_ctrlp_line	.vim/plugged/ctrlp.vim/autoload/ctrlp/line.vim	/^let g:loaded_ctrlp_line = 1$/;"	v
g:loaded_ctrlp_quickfix	.vim/plugged/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let g:loaded_ctrlp_quickfix = 1$/;"	v
g:loaded_ctrlp_tag	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^let g:loaded_ctrlp_tag = 1$/;"	v
g:loaded_ctrlp_undo	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^let g:loaded_ctrlp_undo = 1$/;"	v
g:loaded_easy_align	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let g:loaded_easy_align = 1$/;"	v
g:loaded_easy_align_plugin	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^let g:loaded_easy_align_plugin = 1$/;"	v
g:loaded_fugitive	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_gitgutter	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:loaded_gitgutter = 1$/;"	v
g:loaded_gutentags	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_mustache_handlebars	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^let g:loaded_mustache_handlebars = 1$/;"	v
g:loaded_neocomplete	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^let g:loaded_neocomplete = 1$/;"	v
g:loaded_neocomplete_buffer	.vim/plugged/neocomplete/plugin/neocomplete/buffer.vim	/^let g:loaded_neocomplete_buffer = 1$/;"	v
g:loaded_neocomplete_dictionary	.vim/plugged/neocomplete/plugin/neocomplete/dictionary.vim	/^let g:loaded_neocomplete_dictionary = 1$/;"	v
g:loaded_neocomplete_member	.vim/plugged/neocomplete/plugin/neocomplete/member.vim	/^let g:loaded_neocomplete_member = 1$/;"	v
g:loaded_neocomplete_tag	.vim/plugged/neocomplete/plugin/neocomplete/tag.vim	/^let g:loaded_neocomplete_tag = 1$/;"	v
g:loaded_neosnippet	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^let g:loaded_neosnippet = 1$/;"	v
g:loaded_nerdtree_autoload	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	.vim/plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_git_status	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let g:loaded_nerdtree_git_status = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_plug	.vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_repeat	.vim/plugged/vim-repeat/autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_sneak_plugin	.vim/plugged/vim-sneak/plugin/sneak.vim	/^let g:loaded_sneak_plugin = 1$/;"	v
g:loaded_solarized_menu	.vim/colors/solarized.vim	/^    let g:loaded_solarized_menu = 1$/;"	v
g:loaded_surround	.vim/plugged/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_tagbar	.vim/plugged/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_vim_emoji	.vim/plugged/vim-emoji/autoload/emoji.vim	/^let g:loaded_vim_emoji = 1$/;"	v
g:loaded_visSum	.vim/plugin/visSum.vim	/^let g:loaded_visSum = s:this_version$/;"	v
g:loaded_xolox_misc	.vim/plugged/vim-misc/plugin/xolox/misc.vim	/^let g:loaded_xolox_misc = 1$/;"	v
g:mapleader	.vim/plugged/ale/test/.config/nvim/init.vim	/^let g:mapleader=','$/;"	v
g:mapleader	.vim/plugged/ale/test/vimrc	/^let g:mapleader=','$/;"	v
g:markdown_fenced_languages	.vim/plugged/vim-markdown/syntax/markdown.vim	/^  let g:markdown_fenced_languages = []$/;"	v
g:markdown_fenced_languages	.vimrc	/^  let g:markdown_fenced_languages = ['ruby', 'html', 'javascript', 'css', 'erb=eruby.html', 'bas/;"	v
g:markdown_minlines	.vim/plugged/vim-markdown/syntax/markdown.vim	/^  let g:markdown_minlines = 50$/;"	v
g:minimap_close	.vim/plugged/vim-minimap/plugin/minimap.vim	/^let g:minimap_close =$/;"	v
g:minimap_close	.vimrc	/^  let g:minimap_close='<leader>gc'$/;"	v
g:minimap_highlight	.vim/plugged/vim-minimap/autoload/minimap.vim	/^        let g:minimap_highlight = 'Visual'$/;"	v
g:minimap_highlight	.vimrc	/^  let g:minimap_highlight='Visual'$/;"	v
g:minimap_show	.vim/plugged/vim-minimap/plugin/minimap.vim	/^let g:minimap_show =$/;"	v
g:minimap_show	.vimrc	/^  let g:minimap_show='<leader>ms'$/;"	v
g:minimap_toggle	.vim/plugged/vim-minimap/plugin/minimap.vim	/^let g:minimap_toggle =$/;"	v
g:minimap_toggle	.vimrc	/^  let g:minimap_toggle='<leader>mm'$/;"	v
g:minimap_update	.vim/plugged/vim-minimap/plugin/minimap.vim	/^let g:minimap_update =$/;"	v
g:minimap_update	.vimrc	/^  let g:minimap_update='<leader>mu'$/;"	v
g:multi_cursor_insert_maps	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_insert_maps =$/;"	v
g:multi_cursor_next_key	.vimrc	/^  let g:multi_cursor_next_key='<C-n>'$/;"	v
g:multi_cursor_normal_maps	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_normal_maps =$/;"	v
g:multi_cursor_prev_key	.vimrc	/^  let g:multi_cursor_prev_key='<C-b>'$/;"	v
g:multi_cursor_quit_key	.vimrc	/^  let g:multi_cursor_quit_key='<Esc>'$/;"	v
g:multi_cursor_skip_key	.vimrc	/^  let g:multi_cursor_skip_key='<C-q>'$/;"	v
g:multi_cursor_start_word_key	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^    let g:multi_cursor_start_word_key = g:multi_cursor_next_key$/;"	v
g:multi_cursor_start_word_key	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^    let g:multi_cursor_start_word_key = g:multi_cursor_start_key$/;"	v
g:multi_cursor_use_default_mapping	.vimrc	/^  let g:multi_cursor_use_default_mapping=0$/;"	v
g:multi_cursor_visual_maps	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_visual_maps =$/;"	v
g:mustache_abbreviations	.vimrc	/^  let g:mustache_abbreviations = 1$/;"	v
g:mustache_operators	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  let g:mustache_operators = 1$/;"	v
g:neocomplete#auto_complete_delay	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#auto_complete_delay =$/;"	v
g:neocomplete#auto_completion_start_length	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#auto_completion_start_length =$/;"	v
g:neocomplete#auto_completion_start_length	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^    let g:neocomplete#auto_completion_start_length = 1$/;"	v
g:neocomplete#data_directory	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^  let g:neocomplete#data_directory =$/;"	v
g:neocomplete#delimiter_patterns	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#delimiter_patterns =$/;"	v
g:neocomplete#disable_auto_complete	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#disable_auto_complete =$/;"	v
g:neocomplete#enable_at_startup	.vimrc	/^  let g:neocomplete#enable_at_startup = 1$/;"	v
g:neocomplete#enable_auto_close_preview	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_close_preview =$/;"	v
g:neocomplete#enable_auto_delimiter	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_delimiter =$/;"	v
g:neocomplete#enable_auto_select	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_select =$/;"	v
g:neocomplete#enable_camel_case	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_camel_case =$/;"	v
g:neocomplete#enable_debug	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^let g:neocomplete#enable_debug =$/;"	v
g:neocomplete#enable_fuzzy_completion	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_fuzzy_completion =$/;"	v
g:neocomplete#enable_ignore_case	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_ignore_case =$/;"	v
g:neocomplete#enable_multibyte_completion	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_multibyte_completion =$/;"	v
g:neocomplete#enable_refresh_always	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_refresh_always =$/;"	v
g:neocomplete#enable_smart_case	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#enable_smart_case =$/;"	v
g:neocomplete#enable_smart_case	.vimrc	/^  let g:neocomplete#enable_smart_case = 1$/;"	v
g:neocomplete#fallback_mappings	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#fallback_mappings =$/;"	v
g:neocomplete#force_omni_input_patterns	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#force_omni_input_patterns =$/;"	v
g:neocomplete#ignore_source_files	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#ignore_source_files =$/;"	v
g:neocomplete#keyword_patterns	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#keyword_patterns =$/;"	v
g:neocomplete#keyword_patterns	.vimrc	/^    let g:neocomplete#keyword_patterns = {}$/;"	v
g:neocomplete#keyword_patterns	.vimrc	/^  let g:neocomplete#keyword_patterns['default'] = '\\h\\w*'$/;"	v
g:neocomplete#lock_buffer_name_pattern	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#lock_buffer_name_pattern =$/;"	v
g:neocomplete#lock_iminsert	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#lock_iminsert =$/;"	v
g:neocomplete#manual_completion_start_length	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#manual_completion_start_length =$/;"	v
g:neocomplete#manual_completion_start_length	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^    let g:neocomplete#manual_completion_start_length = 0$/;"	v
g:neocomplete#manual_completion_start_length	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^    let g:neocomplete#manual_completion_start_length = manual_start_length$/;"	v
g:neocomplete#max_keyword_width	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#max_keyword_width =$/;"	v
g:neocomplete#max_keyword_width	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^    let g:neocomplete#max_keyword_width = -1$/;"	v
g:neocomplete#max_keyword_width	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^    let g:neocomplete#max_keyword_width = max_keyword_width_save$/;"	v
g:neocomplete#max_list	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#max_list =$/;"	v
g:neocomplete#max_list	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^    let g:neocomplete#max_list = -1$/;"	v
g:neocomplete#max_list	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^    let g:neocomplete#max_list = max_list_save$/;"	v
g:neocomplete#min_keyword_length	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#min_keyword_length =$/;"	v
g:neocomplete#min_keyword_length	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^    let g:neocomplete#min_keyword_length = 1$/;"	v
g:neocomplete#release_cache_time	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#release_cache_time =$/;"	v
g:neocomplete#skip_auto_completion_time	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#skip_auto_completion_time =$/;"	v
g:neocomplete#sources	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#sources =$/;"	v
g:neocomplete#sources#buffer#cache_limit_size	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#cache_limit_size =$/;"	v
g:neocomplete#sources#buffer#disabled_pattern	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#disabled_pattern =$/;"	v
g:neocomplete#sources#buffer#max_keyword_width	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#max_keyword_width =$/;"	v
g:neocomplete#sources#dictionary#dictionaries	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^let g:neocomplete#sources#dictionary#dictionaries =$/;"	v
g:neocomplete#sources#dictionary#dictionaries	.vimrc	/^  let g:neocomplete#sources#dictionary#dictionaries = {$/;"	v
g:neocomplete#sources#member#input_patterns	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^let g:neocomplete#sources#member#input_patterns =$/;"	v
g:neocomplete#sources#member#prefix_patterns	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^let g:neocomplete#sources#member#prefix_patterns =$/;"	v
g:neocomplete#sources#omni#functions	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^let g:neocomplete#sources#omni#functions =$/;"	v
g:neocomplete#sources#omni#input_patterns	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^let g:neocomplete#sources#omni#input_patterns =$/;"	v
g:neocomplete#sources#omni#input_patterns	.vimrc	/^    let g:neocomplete#sources#omni#input_patterns = {}$/;"	v
g:neocomplete#sources#omni#input_patterns	.vimrc	/^  let g:neocomplete#sources#omni#input_patterns.perl = '\\h\\w*->\\h\\w*\\|\\h\\w*::'$/;"	v
g:neocomplete#sources#syntax#min_keyword_length	.vimrc	/^  let g:neocomplete#sources#syntax#min_keyword_length = 3$/;"	v
g:neocomplete#sources#tags#cache_limit_size	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^  let g:neocomplete#sources#tags#cache_limit_size =$/;"	v
g:neocomplete#tags_filter_patterns	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#tags_filter_patterns =$/;"	v
g:neocomplete#text_mode_filetypes	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let g:neocomplete#text_mode_filetypes =$/;"	v
g:neocomplete#use_vimproc	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^        let g:neocomplete#use_vimproc = 0$/;"	v
g:neocomplete#use_vimproc	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^      let g:neocomplete#use_vimproc = 0$/;"	v
g:neocomplete#use_vimproc	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^    let g:neocomplete#use_vimproc = exists_vimproc$/;"	v
g:neosnippet#data_directory	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^  let g:neosnippet#data_directory =$/;"	v
g:neosnippet#enable_snipmate_compatibility	.vimrc	/^  let g:neosnippet#enable_snipmate_compatibility = 1$/;"	v
g:neosnippet#snippets_directory	.vimrc	/^  let g:neosnippet#snippets_directory=['~\/.vim\/plugged\/vim-snippets\/snippets', '~\/.vim\/my-/;"	v
g:netrw_force_overwrite_statusline	.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^  let g:netrw_force_overwrite_statusline = 0$/;"	v
g:plug_home	.vim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	.vim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	.vim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	.vim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	.vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:promptline_symbols	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^    let g:promptline_symbols = {$/;"	v
g:repeat_count	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_count = a:0 ? a:1 : v:count$/;"	v
g:repeat_reg	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_reg = [a:sequence, a:register]$/;"	v
g:repeat_reg	.vim/plugged/vim-repeat/autoload/repeat.vim	/^let g:repeat_reg = ['', '']$/;"	v
g:repeat_sequence	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_sequence = a:sequence$/;"	v
g:repeat_tick	.vim/plugged/vim-repeat/autoload/repeat.vim	/^        let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_tick = -1$/;"	v
g:repeat_tick	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	.vim/plugged/vim-repeat/autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:sneak#opt	.vim/plugged/vim-sneak/plugin/sneak.vim	/^      let g:sneak#opt[k.'_reset'] = 0$/;"	v
g:sneak#opt	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  let g:sneak#opt = { 'f_reset' : get(g:, 'sneak#nextprev_f', get(g:, 'sneak#f_reset', 1))$/;"	v
g:sneak#search#instance	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^let g:sneak#search#instance = sneak#search#new()$/;"	v
g:sneak#target_labels	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^        let g:sneak#target_labels = k . g:sneak#target_labels$/;"	v
g:sneak#target_labels	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^      let g:sneak#target_labels = substitute(g:sneak#target_labels, '\\%'.(i+1).'c.', '', '')$/;"	v
g:sneak#target_labels	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^let g:sneak#target_labels = get(g:, 'sneak#target_labels', "asdfghjkl;qwertyuiopzxcvbnm\/ASDFGHJ/;"	v
g:snips_author	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_author = "yourname"$/;"	v
g:snips_email	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_email = "yourname@email.com"$/;"	v
g:snips_github	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_github = "https:\/\/github.com\/yourname"$/;"	v
g:syntastic_always_populate_loc_list	.vimrc	/^  let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	.vimrc	/^  let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	.vimrc	/^  let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	.vimrc	/^  let g:syntastic_check_on_wq = 0$/;"	v
g:syntastic_error_symbol	.vimrc	/^  let g:syntastic_error_symbol = '‚úó'$/;"	v
g:syntastic_javascript_checkers	.vimrc	/^  let g:syntastic_javascript_checkers = ['eslint']$/;"	v
g:syntastic_loc_list_height	.vimrc	/^  let g:syntastic_loc_list_height = 5$/;"	v
g:syntastic_ruby_checkers	.vimrc	/^  let g:syntastic_ruby_checkers = ['mri', 'rubocop']$/;"	v
g:syntastic_warning_symbol	.vimrc	/^  let g:syntastic_warning_symbol = '‚ö†'$/;"	v
g:taboo_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  let g:taboo_tabline = 0$/;"	v
g:tagbar#icon_closed	.vim/plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	.vim/plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_autoclose	.vim/plugged/tagbar/autoload/tagbar.vim	/^    let g:tagbar_autoclose = !g:tagbar_autoclose$/;"	v
g:tagbar_case_insensitive	.vim/plugged/tagbar/autoload/tagbar.vim	/^    let g:tagbar_case_insensitive = !g:tagbar_case_insensitive$/;"	v
g:tagbar_ctags_bin	.vim/plugged/tagbar/autoload/tagbar.vim	/^                let g:tagbar_ctags_bin = ctags$/;"	v
g:tagbar_ctags_bin	.vim/plugged/tagbar/autoload/tagbar.vim	/^        let g:tagbar_ctags_bin = expand(g:tagbar_ctags_bin)$/;"	v
g:tagbar_hide_nonpublic	.vim/plugged/tagbar/autoload/tagbar.vim	/^    let g:tagbar_hide_nonpublic = !g:tagbar_hide_nonpublic$/;"	v
g:tagbar_iconchars	.vim/plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	.vim/plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['‚ñ∂', '‚ñº']$/;"	v
g:tagbar_sort	.vim/plugged/tagbar/autoload/tagbar.vim	/^        let g:tagbar_sort = !g:tagbar_sort$/;"	v
g:tagbar_status_func	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^  let g:tagbar_status_func = 'airline#extensions#tagbar#get_status'$/;"	v
g:testname	.vim/plugged/vim-gitgutter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
g:timer_enabled	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^  let g:timer_enabled = 0$/;"	v
g:timer_verbosity	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^  let g:timer_verbosity = 1$/;"	v
g:unite_force_overwrite_statusline	.vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^  let g:unite_force_overwrite_statusline = 0$/;"	v
g:vimclojure#DynamicHighlighting	.vimrc	/^  let g:vimclojure#DynamicHighlighting = 1 " Dynamic highlighting$/;"	v
g:vimclojure#FuzzyIndent	.vimrc	/^  let g:vimclojure#FuzzyIndent = 1 " Names beginning in 'def' or 'with' to be indented as if the/;"	v
g:vimclojure#ParenRainbow	.vimrc	/^  let g:vimclojure#ParenRainbow = 1 " Enable rainbow parens$/;"	v
g:vimfiler_force_overwrite_statusline	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^    let g:vimfiler_force_overwrite_statusline = 0$/;"	v
g:xolox#misc#async#counter	.vim/plugged/vim-misc/autoload/xolox/misc/async.vim	/^  let g:xolox#misc#async#counter += 1$/;"	v
g:xolox#misc#async#counter	.vim/plugged/vim-misc/autoload/xolox/misc/async.vim	/^  let g:xolox#misc#async#counter = 1$/;"	v
g:xolox#misc#async#requests	.vim/plugged/vim-misc/autoload/xolox/misc/async.vim	/^  let g:xolox#misc#async#requests = {}$/;"	v
g:xolox#misc#async#requests	.vim/plugged/vim-misc/autoload/xolox/misc/async.vim	/^  let g:xolox#misc#async#requests[unique_number] = request$/;"	v
g:xolox#misc#cursorhold#handlers	.vim/plugged/vim-misc/autoload/xolox/misc/cursorhold.vim	/^  let g:xolox#misc#cursorhold#handlers = []$/;"	v
g:xolox#misc#test#echo	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^  let g:xolox#misc#test#echo = 'echo'$/;"	v
g:xolox#misc#test#echo	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^  let g:xolox#misc#test#echo = xolox#misc#escape#shell(xolox#misc#path#merge(expand('<sfile>:p:h/;"	v
g:xolox#misc#version	.vim/plugged/vim-misc/autoload/xolox/misc.vim	/^let g:xolox#misc#version = '1.17.6'$/;"	v
g:xolox_message_buffer	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^  let g:xolox_message_buffer = 100$/;"	v
g:xolox_messages	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^  let g:xolox_messages = []$/;"	v
g?	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> g?   :help fugitive-:Gblame<CR>$/;"	m
g?	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> g?   :help fugitive-:Gstatus<CR>$/;"	m
gB	.vimrc	/^  map gB :bprev<CR>$/;"	m
gS	.vim/plugged/vim-surround/plugin/surround.vim	/^  xmap gS  <Plug>VgSurround$/;"	m
ga	.vimrc	/^  nmap ga <Plug>(EasyAlign)$/;"	m
ga	.vimrc	/^  xmap ga <Plug>(EasyAlign)$/;"	m
gather_candidates	.vim/plugged/neosnippet/rplugin/python3/deoplete/sources/neosnippet.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gb	.vimrc	/^  map gb :bnext<CR>$/;"	m
gc	.vim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	.vim/plugged/vim-commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gc	.vim/plugged/vim-commentary/plugin/commentary.vim	/^  xmap gc  <Plug>Commentary$/;"	m
gcc	.vim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
gcu	.vim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
general_config	.vimrc	/^augroup general_config$/;"	a
get	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def get(self, x, y):$/;"	m	class:Canvas
getTerminalSize	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^def getTerminalSize():$/;"	f
getTerminalSize	.vim/plugged/vim-minimap/autoload/drawille/examples/image2term.py	/^def getTerminalSize():$/;"	f
getTerminalSize	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^def getTerminalSize():$/;"	f
get_comment_format	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def get_comment_format():$/;"	f
get_configurations	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/handler.py	/^    def get_configurations(self):$/;"	m	class:EditorConfigHandler
get_file_content	.vim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def get_file_content()$/;"	f
get_file_content	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def get_file_content()$/;"	f
get_filenames	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/handler.py	/^def get_filenames(path, filename):$/;"	f
get_option	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def get_option(snip, option, default=None):$/;"	f
get_pos	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^def get_pos(x, y):$/;"	f
get_properties	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/__init__.py	/^def get_properties(filename):$/;"	f
getmainwindow	.vim/plugged/vim-minimap/autoload/minimap.py	/^def getmainwindow():$/;"	f
getmmwindow	.vim/plugged/vim-minimap/autoload/minimap.py	/^def getmmwindow():$/;"	f
gf	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nmap <buffer> <silent> gf          <SID>:find <Plug><cfile><CR>$/;"	m
gitgutter	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^augroup gitgutter$/;"	a
gitgutter#all	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#all() abort$/;"	f
gitgutter#async#available	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#available()$/;"	f
gitgutter#async#execute	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#execute(cmd) abort$/;"	f
gitgutter#debug#debug	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#debug()$/;"	f
gitgutter#debug#git_version	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#git_version()$/;"	f
gitgutter#debug#grep_version	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#grep_version()$/;"	f
gitgutter#debug#log	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#log(message, ...) abort$/;"	f
gitgutter#debug#option	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#option(name)$/;"	f
gitgutter#debug#output	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#output(text)$/;"	f
gitgutter#debug#separator	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#separator()$/;"	f
gitgutter#debug#vim_version	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#vim_version()$/;"	f
gitgutter#diff#adjust_hunk_summary	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#adjust_hunk_summary(diff_for_hunk, staging) abort$/;"	f
gitgutter#diff#discard_hunks	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#discard_hunks(diff, keep_header) abort$/;"	f
gitgutter#diff#generate_diff_for_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#generate_diff_for_hunk(diff, type) abort$/;"	f
gitgutter#diff#is_added	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_added(from_count, to_count) abort$/;"	f
gitgutter#diff#is_modified	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_modified(from_count, to_count) abort$/;"	f
gitgutter#diff#is_modified_and_added	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_modified_and_added(from_count, to_count) abort$/;"	f
gitgutter#diff#is_modified_and_removed	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_modified_and_removed(from_count, to_count) abort$/;"	f
gitgutter#diff#is_removed	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_removed(from_count, to_count) abort$/;"	f
gitgutter#diff#parse_diff	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_diff(diff) abort$/;"	f
gitgutter#diff#parse_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_hunk(line) abort$/;"	f
gitgutter#diff#process_added	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_added(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#process_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunk(hunk) abort$/;"	f
gitgutter#diff#process_hunks	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunks(hunks) abort$/;"	f
gitgutter#diff#process_modified	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_modified(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#process_modified_and_added	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_modified_and_added(modifications, from_count, to_count, to_line/;"	f
gitgutter#diff#process_modified_and_removed	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_modified_and_removed(modifications, from_count, to_count, to_li/;"	f
gitgutter#diff#process_removed	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_removed(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#run_diff	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#run_diff(realtime, preserve_full_diff) abort$/;"	f
gitgutter#disable	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#disable() abort$/;"	f
gitgutter#enable	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#enable() abort$/;"	f
gitgutter#handle_diff	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#handle_diff(diff) abort$/;"	f
gitgutter#highlight#define_highlights	.vim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_highlights() abort$/;"	f
gitgutter#highlight#define_sign_column_highlight	.vim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_column_highlight() abort$/;"	f
gitgutter#highlight#define_sign_line_highlights	.vim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_line_highlights() abort$/;"	f
gitgutter#highlight#define_sign_text	.vim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text() abort$/;"	f
gitgutter#highlight#define_sign_text_highlights	.vim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text_highlights() abort$/;"	f
gitgutter#highlight#define_signs	.vim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_signs() abort$/;"	f
gitgutter#highlight#get_background_colors	.vim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#get_background_colors(group) abort$/;"	f
gitgutter#highlight#match_highlight	.vim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#match_highlight(highlight, pattern) abort$/;"	f
gitgutter#hunk#current_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#current_hunk() abort$/;"	f
gitgutter#hunk#cursor_in_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#cursor_in_hunk(hunk) abort$/;"	f
gitgutter#hunk#hunks	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#hunks() abort$/;"	f
gitgutter#hunk#increment_lines_added	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_added(count) abort$/;"	f
gitgutter#hunk#increment_lines_modified	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_modified(count) abort$/;"	f
gitgutter#hunk#increment_lines_removed	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_removed(count) abort$/;"	f
gitgutter#hunk#line_adjustment_for_current_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#line_adjustment_for_current_hunk() abort$/;"	f
gitgutter#hunk#next_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#next_hunk(count) abort$/;"	f
gitgutter#hunk#prev_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#prev_hunk(count) abort$/;"	f
gitgutter#hunk#reset	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#reset() abort$/;"	f
gitgutter#hunk#set_hunks	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#set_hunks(hunks) abort$/;"	f
gitgutter#hunk#summary	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#summary(bufnr) abort$/;"	f
gitgutter#hunk#text_object	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#text_object(inner) abort$/;"	f
gitgutter#line_highlights_disable	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#line_highlights_disable() abort$/;"	f
gitgutter#line_highlights_enable	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#line_highlights_enable() abort$/;"	f
gitgutter#line_highlights_toggle	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#line_highlights_toggle() abort$/;"	f
gitgutter#preview_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#preview_hunk() abort$/;"	f
gitgutter#process_buffer	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#process_buffer(bufnr, realtime) abort$/;"	f
gitgutter#sign#add_dummy_sign	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#add_dummy_sign() abort$/;"	f
gitgutter#sign#clear_signs	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#clear_signs() abort$/;"	f
gitgutter#sign#find_current_signs	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#find_current_signs() abort$/;"	f
gitgutter#sign#next_sign_id	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#next_sign_id() abort$/;"	f
gitgutter#sign#obsolete_gitgutter_signs_to_remove	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#obsolete_gitgutter_signs_to_remove(new_gitgutter_signs_line_numbers) ab/;"	f
gitgutter#sign#remove_dummy_sign	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#remove_dummy_sign(force) abort$/;"	f
gitgutter#sign#remove_signs	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#remove_signs(sign_ids, all_signs) abort$/;"	f
gitgutter#sign#reset	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#reset()$/;"	f
gitgutter#sign#update_signs	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#update_signs(modified_lines) abort$/;"	f
gitgutter#sign#upsert_new_gitgutter_signs	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#upsert_new_gitgutter_signs(modified_lines) abort$/;"	f
gitgutter#signs_disable	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#signs_disable() abort$/;"	f
gitgutter#signs_enable	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#signs_enable() abort$/;"	f
gitgutter#signs_toggle	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#signs_toggle() abort$/;"	f
gitgutter#stage_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#stage_hunk() abort$/;"	f
gitgutter#toggle	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#toggle() abort$/;"	f
gitgutter#undo_hunk	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#undo_hunk() abort$/;"	f
gitgutter#utility#bufnr	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#bufnr()$/;"	f
gitgutter#utility#command_in_directory_of_file	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#command_in_directory_of_file(cmd) abort$/;"	f
gitgutter#utility#dedup	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#dedup(list)$/;"	f
gitgutter#utility#directory_of_file	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#directory_of_file() abort$/;"	f
gitgutter#utility#exists_file	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#exists_file() abort$/;"	f
gitgutter#utility#extension	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#extension() abort$/;"	f
gitgutter#utility#file	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file()$/;"	f
gitgutter#utility#file_relative_to_repo_root	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file_relative_to_repo_root() abort$/;"	f
gitgutter#utility#filename	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#filename() abort$/;"	f
gitgutter#utility#full_path_to_directory_of_file	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#full_path_to_directory_of_file() abort$/;"	f
gitgutter#utility#getbufvar	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#getbufvar(buffer, varname, ...)$/;"	f
gitgutter#utility#git_supports_command_line_config_override	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#git_supports_command_line_config_override() abort$/;"	f
gitgutter#utility#has_fresh_changes	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#has_fresh_changes() abort$/;"	f
gitgutter#utility#has_unsaved_changes	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#has_unsaved_changes() abort$/;"	f
gitgutter#utility#highlight_name_for_change	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#highlight_name_for_change(text) abort$/;"	f
gitgutter#utility#is_active	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_active() abort$/;"	f
gitgutter#utility#is_file_buffer	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_file_buffer() abort$/;"	f
gitgutter#utility#not_git_dir	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#not_git_dir() abort$/;"	f
gitgutter#utility#restore_shell	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#restore_shell() abort$/;"	f
gitgutter#utility#save_last_seen_change	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#save_last_seen_change() abort$/;"	f
gitgutter#utility#set_buffer	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#set_buffer(bufnr) abort$/;"	f
gitgutter#utility#setbufvar	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#setbufvar(buffer, varname, val)$/;"	f
gitgutter#utility#shell_error	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shell_error() abort$/;"	f
gitgutter#utility#shellescape	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shellescape(arg) abort$/;"	f
gitgutter#utility#stringify	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#stringify(list) abort$/;"	f
gitgutter#utility#strip_trailing_new_line	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#strip_trailing_new_line(line) abort$/;"	f
gitgutter#utility#system	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#system(cmd, ...) abort$/;"	f
gitgutter#utility#use_known_shell	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#use_known_shell() abort$/;"	f
gitgutter#utility#using_xolox_shell	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#using_xolox_shell() abort$/;"	f
gitgutter#utility#warn	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn(message) abort$/;"	f
gitgutter#utility#warn_once	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn_once(message, key) abort$/;"	f
globs	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    globs = m.__dict__.copy()$/;"	v
gq	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> gq   :exe substitute(bufwinnr(b:fugitive_blamed_bufnr).' winc/;"	m
gutentags#add_progress	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_progress(module, file) abort$/;"	f
gutentags#chdir	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#command_terminated	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#command_terminated(job_id, data, event) abort$/;"	f
gutentags#cscope#generate	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, write_mode) abort$/;"	f
gutentags#cscope#init	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#ctags#generate	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, write_mode) abort$/;"	f
gutentags#ctags#init	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#delete_lock_files	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#delete_lock_files() abort$/;"	f
gutentags#fake	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#get_cachefile	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_execute_cmd	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_execute_cmd() abort$/;"	f
gutentags#get_execute_cmd_suffix	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_execute_cmd_suffix() abort$/;"	f
gutentags#get_plat_file	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, db_file, write_mode) abort$/;"	f
gutentags#gtags_cscope#init	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#gtags_cscope#on_job_out	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_out(job, data) abort$/;"	f
gutentags#inprogress	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#normalizepath	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#rescan	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#statusline	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#stripslash	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#throwerr	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throwerr(message)$/;"	f
gutentags#toggletrace	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags_detect	.vim/plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
h	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^        h = int(h * ratio)$/;"	v
h	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    w, h = i.size$/;"	v
header h1	.vim/undo/%Users%jose.represa%workspace%examples-responsive-pwa%challenge%css%style.css	/^VimüUnDoÂekheader h1{5Å_–nav i.fa {  .menu {}5Å_–  .fa.fa {5Å_–  .fa.fa {  .fa.fa {5Å_– { /;"	s
height	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^height = 100$/;"	v
help	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^help:$/;"	t
highlight_interesting_word	.vimrc	/^augroup highlight_interesting_word$/;"	a
hl	.vim/plugged/vim-airline/t/highlighter.vim	/^    let hl = airline#highlighter#get_highlight('Foo1_to_Foo2')$/;"	v
hl	.vim/plugged/vim-airline/t/themes.vim	/^    let hl = airline#themes#get_highlight('Foo', 'bold', 'italic')$/;"	v
hl	.vim/plugged/vim-airline/t/themes.vim	/^    let hl = airline#themes#get_highlight2(['Foo','bg'], ['Foo','fg'], 'italic', 'bold')$/;"	v
homepage	.vim/plugged/vim-misc/addon-info.json	/^{"vim_script_nr": 4597, "dependencies": {}, "homepage": "http:\/\/peterodding.com\/code\/vim\/mi/;"	s
hs_highlight_boolean	.vim/colors/solarized.vim	/^let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	.vim/colors/solarized.vim	/^let hs_highlight_delimiters=1$/;"	v
html	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^html:$/;"	t
html_static_path	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^html_theme = 'agogo'$/;"	v
htmlhelp	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^htmlhelp:$/;"	t
htmlhelp_basename	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^htmlhelp_basename = 'EditorConfigPythonCoredoc'$/;"	v
i	.vim/plugged/vim-css-color/tests/example.css	/^i { background: #359 }$/;"	s
i	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> i    :<C-U>exe <SID>BlameCommit("exe 'norm q'<Bar>edit")<CR>$/;"	m
i	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> i :<C-U>let b:fugitive_display_format -= v:count1<Bar>exe <SI/;"	m
i	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> i :<C-U>let b:fugitive_display_format -= 1<Bar>exe <SID>BufReadIn/;"	m
i	.vim/plugged/vim-gitgutter/test/runner.vim	/^      let i += 1$/;"	v
i	.vim/plugged/vim-gitgutter/test/runner.vim	/^    let i = 0$/;"	v
i	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^        i = i.resize((w, h), Image.ANTIALIAS)$/;"	v
i	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    i = Image.open(StringIO(urllib2.urlopen(img_url).read())).convert('L')$/;"	v
i_converted	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^         i_converted = i.tostring()$/;"	v
ic	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    omap ic <Plug>GitGutterTextObjectInnerPending$/;"	m
ic	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^    xmap ic <Plug>GitGutterTextObjectInnerVisual$/;"	m
ie	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  onoremap <silent> <buffer> ie :<C-U>call <SID>wrap_inside()<CR>$/;"	m
ie	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  xnoremap <silent> <buffer> ie :<C-U>call <SID>wrap_inside()<CR>$/;"	m
image2term	.vim/plugged/vim-minimap/autoload/drawille/examples/image2term.py	/^def image2term(image, threshold=128, ratio=None, invert=False):$/;"	f
img_url	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    img_url = re.findall('http:\\\/\\\/imgs.xkcd.com\\\/comics\\\/[^"\\']+', c)[0]$/;"	v
indent_guides_config	.vimrc	/^augroup indent_guides_config$/;"	a
index	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def index(self, key):$/;"	m	class:OrderedDict
insert	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def insert(self, index, key, value):$/;"	m	class:OrderedDict
intdefaultdict	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^def intdefaultdict():$/;"	f
ioctl_GWINSZ	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def ioctl_GWINSZ(fd):$/;"	f	function:getTerminalSize	file:
ioctl_GWINSZ	.vim/plugged/vim-minimap/autoload/drawille/examples/image2term.py	/^    def ioctl_GWINSZ(fd):$/;"	f	function:getTerminalSize	file:
ioctl_GWINSZ	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    def ioctl_GWINSZ(fd):$/;"	f	function:getTerminalSize	file:
items	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def items(self):$/;"	m	class:OrderedDict
iteritems	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def iteritems(self):$/;"	m	class:OrderedDict
iterkeys	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def iterkeys(self):$/;"	m	class:OrderedDict
itervalues	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def itervalues(self):$/;"	m	class:OrderedDict
j	.vim/plugged/ack.vim/autoload/ack.vim	/^    nnoremap <buffer> <silent> j j<CR><C-W><C-W>$/;"	m
j	.vim/plugged/ack.vim/ftplugin/qf.vim	/^  nnoremap <buffer> j jzz$/;"	m
j	.vimrc	/^    map j gj$/;"	m
join_version	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/versiontools.py	/^def join_version(version_tuple):$/;"	f
json	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^json:$/;"	t
jump_to_tags	.vimrc	/^augroup jump_to_tags$/;"	a
k	.vim/plugged/ack.vim/autoload/ack.vim	/^    nnoremap <buffer> <silent> k k<CR><C-W><C-W>$/;"	m
k	.vim/undo/%Users%jose.represa%workspace%examples-responsive-pwa%challenge%css%style.css	/^VimüUnDoÂekheader h1{5Å_–nav i.fa {  .menu {}5Å_–  .fa.fa {5Å_–  .fa.fa {  .fa.fa {5Å_– { /;"	s
k	.vimrc	/^    map k gk$/;"	m
keys	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def keys(self):$/;"	m	class:OrderedDict
keys	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^keys = Queue()$/;"	v
keyword_spacing	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def keyword_spacing(snip):$/;"	f
latex	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^latex:$/;"	t
latex_documents	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^latex_documents = [$/;"	v
latexpdf	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^latexpdf:$/;"	t
left	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def left(self, angle):$/;"	m	class:Turtle
left: 0	.vim/undo/%Users%jose.represa%workspace%woody-brandcenter%bbva-theme%assets%css%wiki.css	/^VimüUnDoÂ  left: 0;ˇˇ.sidebar {5Å_–	: center;ız	.content {.sidebar {;.apis li {.apidocs {/;"	s
line	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^def line(x1, y1, x2, y2):$/;"	f
linkcheck	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^linkcheck:$/;"	t
loaded_minimap	.vim/plugged/vim-minimap/plugin/minimap.vim	/^let loaded_minimap = 1$/;"	v
loaded_nerd_comments	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
lt	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    lt = left$/;"	v	class:Turtle
m	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    m = sys.modules.get('__main__')$/;"	v
main	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/main.py	/^def main():$/;"	f
main	.vim/plugged/editorconfig-vim/tests/spec/plugin_tests/test_files/4_space.py	/^def main():$/;"	f
main	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^def main(stdscr):$/;"	f
main_syntax	.vim/plugged/vim-javascript/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	.vim/plugged/vim-markdown/syntax/markdown.vim	/^  let main_syntax = 'markdown'$/;"	v
main_syntax	.vim/syntax/json.vim	/^  let main_syntax = 'json'$/;"	v
maintainer	.vim/plugged/vim-snippets/addon-info.json	/^  "maintainer" : "honza @ github & others",$/;"	s
make_box	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def make_box(twidth, bwidth=None):$/;"	f
make_iter	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^        def make_iter(self=self):$/;"	f	member:OrderedDict.iteritems	file:
make_iter	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^        def make_iter(self=self):$/;"	f	member:OrderedDict.itervalues	file:
man	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^man:$/;"	t
man_pages	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^man_pages = [$/;"	v
map	.vim/plugged/vim-airline/t/themes.vim	/^    let map = airline#themes#generate_color_map($/;"	v
mapleader	.vimrc	/^let mapleader="\\<Space>"$/;"	v
margin5	.vim/undo/%Users%jose.represa%workspace%mws-restaurant-stage-1%css%styles.css	/^VimüUnDoÂˇ    margin5Å_–Y⁄Qè/;"	s
master_doc	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^master_doc = 'index'$/;"	v
matches_filename	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^    def matches_filename(self, config_filename, glob):$/;"	m	class:EditorConfigParser
minimap#CloseMinimap	.vim/plugged/vim-minimap/autoload/minimap.vim	/^function! minimap#CloseMinimap()$/;"	f
minimap#ShowMinimap	.vim/plugged/vim-minimap/autoload/minimap.vim	/^function! minimap#ShowMinimap()$/;"	f
minimap#ToggleMinimap	.vim/plugged/vim-minimap/autoload/minimap.vim	/^function! minimap#ToggleMinimap()$/;"	f
minimap#UpdateMinimap	.vim/plugged/vim-minimap/autoload/minimap.vim	/^function! minimap#UpdateMinimap()$/;"	f
minimap_config	.vimrc	/^augroup minimap_config$/;"	a
mode	.vim/undo/%Users%jose.represa%workspace%bbvabuzz-sources%test%maggie%maggieEI.conf	/^VimüUnDoÂmode = DEF5Å_–/;"	k
move	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def move(self, x, y):$/;"	m	class:Turtle
multiple_cursors#debug	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#debug()$/;"	f
multiple_cursors#find	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#find(start, end, pattern)$/;"	f
multiple_cursors#get_latency_debug_file	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#get_latency_debug_file()$/;"	f
multiple_cursors#new	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#new(mode, word_boundary)$/;"	f
multiple_cursors#prev	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#prev()$/;"	f
multiple_cursors#quit	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#quit()$/;"	f
multiple_cursors#skip	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#skip()$/;"	f
multiplecursor_config	.vimrc	/^augroup multiplecursor_config$/;"	a
mustache_config	.vimrc	/^augroup mustache_config$/;"	a
mv	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    mv = move$/;"	v	class:Turtle
name	.vim/plugged/vim-misc/addon-info.json	/^{"vim_script_nr": 4597, "dependencies": {}, "homepage": "http:\/\/peterodding.com\/code\/vim\/mi/;"	s
name	.vim/plugged/vim-snippets/addon-info.json	/^  "name" : "snipmate-snippets",$/;"	s
neocomplcache#sources#snippets_complete#define	.vim/plugged/neosnippet/autoload/neocomplcache/sources/snippets_complete.vim	/^function! neocomplcache#sources#snippets_complete#define() abort "{{{$/;"	f
neocomplete	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^  augroup neocomplete$/;"	a
neocomplete	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^  augroup neocomplete "{{{$/;"	a
neocomplete	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^  augroup neocomplete "{{{$/;"	a
neocomplete	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^  augroup neocomplete "{{{$/;"	a
neocomplete	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^  augroup neocomplete "{{{$/;"	a
neocomplete	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^  augroup neocomplete$/;"	a
neocomplete#async_cache#main	.vim/plugged/neocomplete/autoload/neocomplete/async_cache.vim	/^  function! neocomplete#async_cache#main(argv) abort "{{{$/;"	f
neocomplete#available_sources	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#available_sources() abort "{{{$/;"	f
neocomplete#cache#async_load_from_file	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#async_load_from_file(cache_dir, filename, pattern, mark) abort "{{{$/;"	f
neocomplete#cache#async_load_from_tags	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#async_load_from_tags(cache_dir, filename, filetype, pattern, mark) a/;"	f
neocomplete#cache#check_cache	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#check_cache(cache_dir, key, async_cache_dictionary, keyword_cache, i/;"	f
neocomplete#cache#check_old_cache	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#check_old_cache(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#encode_name	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#encode_name(cache_dir, filename) abort$/;"	f
neocomplete#cache#filereadable	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#filereadable(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#get_cache_list	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#get_cache_list(cache_dir, async_cache_list) abort "{{{$/;"	f
neocomplete#cache#getfilename	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#getfilename(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#load_from_cache	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#load_from_cache(cache_dir, filename, ...) abort "{{{$/;"	f
neocomplete#cache#make_directory	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#make_directory(directory) abort "{{{$/;"	f
neocomplete#cache#readfile	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#readfile(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#save_cache	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#save_cache(cache_dir, filename, keyword_list) abort "{{{$/;"	f
neocomplete#cache#writefile	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#writefile(cache_dir, filename, list) abort "{{{$/;"	f
neocomplete#cancel_popup	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#cancel_popup() abort$/;"	f
neocomplete#close_popup	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#close_popup() abort$/;"	f
neocomplete#commands#_clean	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_clean() abort "{{{$/;"	f
neocomplete#commands#_initialize	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_initialize() abort "{{{$/;"	f
neocomplete#commands#_lock	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_lock() abort "{{{$/;"	f
neocomplete#commands#_set_file_type	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_set_file_type(filetype) abort "{{{$/;"	f
neocomplete#commands#_toggle_lock	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_toggle_lock() abort "{{{$/;"	f
neocomplete#commands#_unlock	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_unlock() abort "{{{$/;"	f
neocomplete#complete#_check_previous_position	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_check_previous_position(cur_text, complete_pos) abort "{{{$/;"	f
neocomplete#complete#_get_complete_pos	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_complete_pos(sources) abort "{{{$/;"	f
neocomplete#complete#_get_results	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_results(cur_text, ...) abort "{{{$/;"	f
neocomplete#complete#_get_words	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_words(sources, complete_pos, complete_str) abort "{{{$/;"	f
neocomplete#complete#_set_previous_position	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_previous_position(cur_text, complete_pos) abort "{{{$/;"	f
neocomplete#complete#_set_results_pos	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_results_pos(cur_text, ...) abort "{{{$/;"	f
neocomplete#complete#_set_results_words	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_results_words(sources) abort "{{{$/;"	f
neocomplete#complete_check	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#complete_check() abort "{{{$/;"	f
neocomplete#complete_common_string	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#complete_common_string() abort$/;"	f
neocomplete#context_filetype#filetypes	.vim/plugged/neocomplete/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#filetypes() abort "{{{$/;"	f
neocomplete#context_filetype#get	.vim/plugged/neocomplete/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#get(filetype) abort "{{{$/;"	f
neocomplete#context_filetype#set	.vim/plugged/neocomplete/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#set() abort "{{{$/;"	f
neocomplete#custom#get	.vim/plugged/neocomplete/autoload/neocomplete/custom.vim	/^function! neocomplete#custom#get() abort "{{{$/;"	f
neocomplete#custom#source	.vim/plugged/neocomplete/autoload/neocomplete/custom.vim	/^function! neocomplete#custom#source(source_name, option_name, value) abort "{{{$/;"	f
neocomplete#custom_source	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#custom_source(source_name, option_name, value) abort "{{{$/;"	f
neocomplete#define_filter	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#define_filter(filter) abort "{{{$/;"	f
neocomplete#define_source	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#define_source(source) abort "{{{$/;"	f
neocomplete#disable_default_dictionary	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#disable_default_dictionary(variable) abort "{{{$/;"	f
neocomplete#dup_filter	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#dup_filter(list) abort "{{{$/;"	f
neocomplete#escape_match	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#escape_match(str) abort "{{{$/;"	f
neocomplete#exists_echodoc	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#exists_echodoc() abort "{{{$/;"	f
neocomplete#filetype_complete	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#filetype_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neocomplete#filters#converter_abbr#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_abbr.vim	/^function! neocomplete#filters#converter_abbr#define() abort "{{{$/;"	f
neocomplete#filters#converter_add_paren#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_add_paren.vim	/^function! neocomplete#filters#converter_add_paren#define() abort "{{{$/;"	f
neocomplete#filters#converter_case#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_case.vim	/^function! neocomplete#filters#converter_case#define() abort "{{{$/;"	f
neocomplete#filters#converter_delimiter#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^function! neocomplete#filters#converter_delimiter#define() abort "{{{$/;"	f
neocomplete#filters#converter_disable_abbr#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_disable_abbr.vim	/^function! neocomplete#filters#converter_disable_abbr#define() abort "{{{$/;"	f
neocomplete#filters#converter_remove_last_paren#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^function! neocomplete#filters#converter_remove_last_paren#define() abort "{{{$/;"	f
neocomplete#filters#converter_remove_overlap#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! neocomplete#filters#converter_remove_overlap#define() abort "{{{$/;"	f
neocomplete#filters#converter_remove_overlap#length	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! neocomplete#filters#converter_remove_overlap#length(left, right) abort "{{{$/;"	f
neocomplete#filters#escape	.vim/plugged/neocomplete/autoload/neocomplete/filters.vim	/^function! neocomplete#filters#escape(string) abort "{{{$/;"	f
neocomplete#filters#fuzzy_escape	.vim/plugged/neocomplete/autoload/neocomplete/filters.vim	/^function! neocomplete#filters#fuzzy_escape(string) abort "{{{$/;"	f
neocomplete#filters#matcher_fuzzy#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_fuzzy.vim	/^function! neocomplete#filters#matcher_fuzzy#define() abort "{{{$/;"	f
neocomplete#filters#matcher_head#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_head.vim	/^function! neocomplete#filters#matcher_head#define() abort "{{{$/;"	f
neocomplete#filters#matcher_length#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_length.vim	/^function! neocomplete#filters#matcher_length#define() abort "{{{$/;"	f
neocomplete#filters#matcher_nothing#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_nothing.vim	/^function! neocomplete#filters#matcher_nothing#define() abort "{{{$/;"	f
neocomplete#filters#sorter_filename#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_filename.vim	/^function! neocomplete#filters#sorter_filename#define() abort "{{{$/;"	f
neocomplete#filters#sorter_length#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^function! neocomplete#filters#sorter_length#define() abort "{{{$/;"	f
neocomplete#filters#sorter_rank#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_rank.vim	/^function! neocomplete#filters#sorter_rank#define() abort "{{{$/;"	f
neocomplete#filters#sorter_word#define	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^function! neocomplete#filters#sorter_word#define() abort "{{{$/;"	f
neocomplete#get_context	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_context() abort "{{{$/;"	f
neocomplete#get_context_filetype	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_context_filetype(...) abort "{{{$/;"	f
neocomplete#get_cur_text	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_cur_text(...) abort "{{{$/;"	f
neocomplete#get_current_neocomplete	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_current_neocomplete() abort "{{{$/;"	f
neocomplete#get_data_directory	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_data_directory() abort "{{{$/;"	f
neocomplete#get_default_matchers	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_default_matchers() abort "{{{$/;"	f
neocomplete#get_keyword_pattern	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_keyword_pattern(...) abort "{{{$/;"	f
neocomplete#get_keyword_pattern_end	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_keyword_pattern_end(...) abort "{{{$/;"	f
neocomplete#get_source_filetypes	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#get_source_filetypes(filetype) abort "{{{$/;"	f
neocomplete#handler#_do_auto_complete	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_do_auto_complete(event) abort "{{{$/;"	f
neocomplete#handler#_on_complete_done	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_complete_done() abort "{{{$/;"	f
neocomplete#handler#_on_insert_char_pre	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_char_pre() abort "{{{$/;"	f
neocomplete#handler#_on_insert_enter	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_enter() abort "{{{$/;"	f
neocomplete#handler#_on_insert_leave	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_leave() abort "{{{$/;"	f
neocomplete#handler#_on_moved_i	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_moved_i() abort "{{{$/;"	f
neocomplete#handler#_on_text_changed	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_text_changed() abort "{{{$/;"	f
neocomplete#has_vimproc	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#has_vimproc() abort "{{{$/;"	f
neocomplete#head_match	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#head_match(checkstr, headstr) abort "{{{$/;"	f
neocomplete#helper#call_filters	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#call_filters(filters, source, context) abort "{{{$/;"	f
neocomplete#helper#call_hook	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#call_hook(sources, hook_name, context) abort "{{{$/;"	f
neocomplete#helper#check_filetype	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#check_filetype(dictionary) abort "{{{$/;"	f
neocomplete#helper#check_invalid_omnifunc	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#check_invalid_omnifunc(omnifunc) abort "{{{$/;"	f
neocomplete#helper#clean	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#clean(directory) abort "{{{$/;"	f
neocomplete#helper#clear_result	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#clear_result() abort "{{{$/;"	f
neocomplete#helper#complete_check	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#complete_check() abort "{{{$/;"	f
neocomplete#helper#complete_configure	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#complete_configure() abort "{{{$/;"	f
neocomplete#helper#filetype_complete	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#filetype_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neocomplete#helper#get_cur_text	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_cur_text(...) abort "{{{$/;"	f
neocomplete#helper#get_force_omni_complete_pos	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_force_omni_complete_pos(cur_text) abort "{{{$/;"	f
neocomplete#helper#get_source_filetypes	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_source_filetypes(filetype) abort "{{{$/;"	f
neocomplete#helper#get_sources_list	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_sources_list(...) abort "{{{$/;"	f
neocomplete#helper#get_syn_name	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_syn_name(is_trans) abort "{{{$/;"	f
neocomplete#helper#indent_current_line	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#indent_current_line() abort "{{{$/;"	f
neocomplete#helper#is_enabled_source	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#is_enabled_source(source, filetype) abort "{{{$/;"	f
neocomplete#helper#match_word	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#match_word(cur_text, ...) abort "{{{$/;"	f
neocomplete#helper#sort_human	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#sort_human(candidates) abort "{{{$/;"	f
neocomplete#helper#unite_patterns	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#unite_patterns(pattern_var, filetype) abort "{{{$/;"	f
neocomplete#init#_autocmds	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_autocmds() abort "{{{$/;"	f
neocomplete#init#_context	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_context(context) abort "{{{$/;"	f
neocomplete#init#_current_neocomplete	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_current_neocomplete() abort "{{{$/;"	f
neocomplete#init#_filter	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_filter(filter) abort "{{{$/;"	f
neocomplete#init#_filters	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_filters(names) abort "{{{$/;"	f
neocomplete#init#_others	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_others() abort "{{{$/;"	f
neocomplete#init#_source	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_source(source) abort "{{{$/;"	f
neocomplete#init#_sources	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_sources(names) abort "{{{$/;"	f
neocomplete#init#_variables	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#_variables() abort "{{{$/;"	f
neocomplete#init#disable	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#disable() abort "{{{$/;"	f
neocomplete#init#enable	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#enable() abort "{{{$/;"	f
neocomplete#init#is_enabled	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^function! neocomplete#init#is_enabled() abort "{{{$/;"	f
neocomplete#initialize	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#initialize() abort "{{{$/;"	f
neocomplete#is_auto_complete	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_auto_complete() abort "{{{$/;"	f
neocomplete#is_auto_select	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_auto_select() abort "{{{$/;"	f
neocomplete#is_cache_disabled	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_cache_disabled() abort "{{{$/;"	f
neocomplete#is_enabled	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_enabled() abort "{{{$/;"	f
neocomplete#is_eskk_enabled	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_eskk_enabled() abort "{{{$/;"	f
neocomplete#is_locked	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_locked(...) abort "{{{$/;"	f
neocomplete#is_multibyte_input	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_multibyte_input(cur_text) abort "{{{$/;"	f
neocomplete#is_prefetch	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_prefetch() abort "{{{$/;"	f
neocomplete#is_text_mode	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_text_mode() abort "{{{$/;"	f
neocomplete#is_windows	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#is_windows() abort "{{{$/;"	f
neocomplete#mappings#auto_complete	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#auto_complete() abort "{{{$/;"	f
neocomplete#mappings#cancel_popup	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#cancel_popup() abort "{{{$/;"	f
neocomplete#mappings#close_popup	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#close_popup() abort "{{{$/;"	f
neocomplete#mappings#complete_common_string	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#complete_common_string() abort "{{{$/;"	f
neocomplete#mappings#define_default_mappings	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#define_default_mappings() abort "{{{$/;"	f
neocomplete#mappings#fallback	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#fallback(i) abort "{{{$/;"	f
neocomplete#mappings#manual_complete	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#manual_complete() abort "{{{$/;"	f
neocomplete#mappings#popup_post	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#popup_post() abort "{{{$/;"	f
neocomplete#mappings#refresh	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#refresh() abort "{{{$/;"	f
neocomplete#mappings#smart_close_popup	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#smart_close_popup() abort "{{{$/;"	f
neocomplete#mappings#start_manual_complete	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#start_manual_complete(...) abort "{{{$/;"	f
neocomplete#mappings#undo_completion	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#undo_completion() abort "{{{$/;"	f
neocomplete#match_word	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#match_word(...) abort "{{{$/;"	f
neocomplete#print_debug	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#print_debug(expr) abort "{{{$/;"	f
neocomplete#print_error	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#print_error(string) abort "{{{$/;"	f
neocomplete#print_warning	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#print_warning(string) abort "{{{$/;"	f
neocomplete#set_default_matchers	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#set_default_matchers(matchers) abort "{{{$/;"	f
neocomplete#set_dictionary_helper	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#set_dictionary_helper(variable, keys, value) abort "{{{$/;"	f
neocomplete#skip_next_complete	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#skip_next_complete() abort "{{{$/;"	f
neocomplete#smart_close_popup	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#smart_close_popup() abort$/;"	f
neocomplete#sources#buffer#define	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#define() abort "{{{$/;"	f
neocomplete#sources#buffer#get_frequencies	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#get_frequencies() abort "{{{$/;"	f
neocomplete#sources#buffer#make_cache	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#make_cache(name) abort "{{{$/;"	f
neocomplete#sources#buffer#make_cache_current_line	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#make_cache_current_line() abort "{{{$/;"	f
neocomplete#sources#dictionary#define	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#define() abort "{{{$/;"	f
neocomplete#sources#dictionary#get_dictionaries	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#get_dictionaries(filetype) abort "{{{$/;"	f
neocomplete#sources#dictionary#remake_cache	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#remake_cache(filetype) abort "{{{$/;"	f
neocomplete#sources#file#define	.vim/plugged/neocomplete/autoload/neocomplete/sources/file.vim	/^function! neocomplete#sources#file#define() abort "{{{$/;"	f
neocomplete#sources#member#define	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#define() abort "{{{$/;"	f
neocomplete#sources#member#make_cache_current_buffer	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#make_cache_current_buffer() abort "{{{$/;"	f
neocomplete#sources#member#make_cache_current_line	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#make_cache_current_line() abort "{{{$/;"	f
neocomplete#sources#member#remake_cache	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#remake_cache(filetype) abort "{{{$/;"	f
neocomplete#sources#neosnippet#define	.vim/plugged/neosnippet/autoload/neocomplete/sources/neosnippet.vim	/^function! neocomplete#sources#neosnippet#define() abort "{{{$/;"	f
neocomplete#sources#omni#define	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! neocomplete#sources#omni#define() abort "{{{$/;"	f
neocomplete#sources#tag#define	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^function! neocomplete#sources#tag#define() abort "{{{$/;"	f
neocomplete#sources#tag#make_cache	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^function! neocomplete#sources#tag#make_cache(force) abort "{{{$/;"	f
neocomplete#start_manual_complete	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#start_manual_complete(...) abort$/;"	f
neocomplete#system	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#system(...) abort "{{{$/;"	f
neocomplete#undo_completion	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#undo_completion() abort$/;"	f
neocomplete#util#convert2list	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#convert2list(expr) abort "{{{$/;"	f
neocomplete#util#disable_default_dictionary	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#disable_default_dictionary(variable) abort "{{{$/;"	f
neocomplete#util#dup_filter	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#dup_filter(list) abort "{{{$/;"	f
neocomplete#util#escape_pattern	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#escape_pattern(...) abort "{{{$/;"	f
neocomplete#util#expand	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#expand(path) abort "{{{$/;"	f
neocomplete#util#get_last_status	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#get_last_status(...) abort "{{{$/;"	f
neocomplete#util#get_vital	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#get_vital() abort "{{{$/;"	f
neocomplete#util#glob	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#glob(pattern, ...) abort "{{{$/;"	f
neocomplete#util#has_vimproc	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#has_vimproc() abort "{{{$/;"	f
neocomplete#util#iconv	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#iconv(...) abort "{{{$/;"	f
neocomplete#util#is_complete_select	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_complete_select() abort "{{{$/;"	f
neocomplete#util#is_mac	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_mac(...) abort "{{{$/;"	f
neocomplete#util#is_sudo	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_sudo() abort "{{{$/;"	f
neocomplete#util#is_text_changed	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_text_changed() abort "{{{$/;"	f
neocomplete#util#is_windows	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_windows(...) abort "{{{$/;"	f
neocomplete#util#join_rtp	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#join_rtp(list) abort "{{{$/;"	f
neocomplete#util#mb_strlen	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#mb_strlen(...) abort "{{{$/;"	f
neocomplete#util#set_default	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_default(var, val, ...) abort  "{{{$/;"	f
neocomplete#util#set_default_dictionary	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_default_dictionary(variable, keys, value) abort "{{{$/;"	f
neocomplete#util#set_dictionary_helper	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_dictionary_helper(variable, keys, pattern) abort "{{{$/;"	f
neocomplete#util#sort_by	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#sort_by(...) abort "{{{$/;"	f
neocomplete#util#split_rtp	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#split_rtp(...) abort "{{{$/;"	f
neocomplete#util#strchars	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#strchars(...) abort "{{{$/;"	f
neocomplete#util#strwidthpart	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#strwidthpart(...) abort "{{{$/;"	f
neocomplete#util#strwidthpart_reverse	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#strwidthpart_reverse(...) abort "{{{$/;"	f
neocomplete#util#substitute_path_separator	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#substitute_path_separator(...) abort "{{{$/;"	f
neocomplete#util#system	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#system(...) abort "{{{$/;"	f
neocomplete#util#truncate	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#truncate(...) abort "{{{$/;"	f
neocomplete#util#truncate_smart	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#truncate_smart(...) abort "{{{$/;"	f
neocomplete#util#uniq	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#uniq(...) abort "{{{$/;"	f
neocomplete#util#uniq	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#uniq(list) abort "{{{$/;"	f
neocomplete#util#wcswidth	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! neocomplete#util#wcswidth(string) abort "{{{$/;"	f
neocomplete#variables#get_filters	.vim/plugged/neocomplete/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_filters() abort "{{{$/;"	f
neocomplete#variables#get_frequencies	.vim/plugged/neocomplete/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_frequencies() abort "{{{$/;"	f
neocomplete#variables#get_source	.vim/plugged/neocomplete/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_source(name) abort "{{{$/;"	f
neocomplete#variables#get_sources	.vim/plugged/neocomplete/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_sources() abort "{{{$/;"	f
neocomplete#within_comment	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^function! neocomplete#within_comment() abort "{{{$/;"	f
neocomplete_config	.vimrc	/^augroup neocomplete_config$/;"	a
neosnippet	.vim/plugged/neosnippet/autoload/neosnippet/init.vim	/^  augroup neosnippet "{{{$/;"	a
neosnippet	.vim/plugged/neosnippet/autoload/neosnippet/init.vim	/^  augroup neosnippet$/;"	a
neosnippet	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^augroup neosnippet "{{{$/;"	a
neosnippet#anonymous	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#anonymous(snippet) abort "{{{$/;"	f
neosnippet#commands#_clear_markers	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_clear_markers() abort "{{{$/;"	f
neosnippet#commands#_complete_target_snippets	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_complete_target_snippets(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neosnippet#commands#_edit	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_edit(args) abort "{{{$/;"	f
neosnippet#commands#_edit_complete	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_edit_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neosnippet#commands#_filetype_complete	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_filetype_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neosnippet#commands#_make_cache	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_make_cache(filetype) abort "{{{$/;"	f
neosnippet#commands#_source	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_source(filename) abort "{{{$/;"	f
neosnippet#expand	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#expand(trigger) abort "{{{$/;"	f
neosnippet#expandable	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#expandable() abort "{{{$/;"	f
neosnippet#expandable_or_jumpable	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#expandable_or_jumpable() abort "{{{$/;"	f
neosnippet#get_mirror_placeholder_marker_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_mirror_placeholder_marker_pattern() abort "{{{$/;"	f
neosnippet#get_mirror_placeholder_marker_substitute_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_mirror_placeholder_marker_substitute_pattern() abort "{{{$/;"	f
neosnippet#get_placeholder_marker_default_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_default_pattern() abort "{{{$/;"	f
neosnippet#get_placeholder_marker_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_pattern() abort "{{{$/;"	f
neosnippet#get_placeholder_marker_substitute_nonzero_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_substitute_nonzero_pattern() abort "{{{$/;"	f
neosnippet#get_placeholder_marker_substitute_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_substitute_pattern() abort "{{{$/;"	f
neosnippet#get_placeholder_marker_substitute_zero_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_substitute_zero_pattern() abort "{{{$/;"	f
neosnippet#get_placeholder_target_marker_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_target_marker_pattern() abort "{{{$/;"	f
neosnippet#get_runtime_snippets_directory	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_runtime_snippets_directory() abort "{{{$/;"	f
neosnippet#get_snippets_directory	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_snippets_directory() abort "{{{$/;"	f
neosnippet#get_sync_placeholder_marker_default_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_sync_placeholder_marker_default_pattern() abort "{{{$/;"	f
neosnippet#get_sync_placeholder_marker_pattern	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_sync_placeholder_marker_pattern() abort "{{{$/;"	f
neosnippet#get_user_snippets_directory	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#get_user_snippets_directory() abort "{{{$/;"	f
neosnippet#handlers#_all_clear_markers	.vim/plugged/neosnippet/autoload/neosnippet/handlers.vim	/^function! neosnippet#handlers#_all_clear_markers() abort "{{{$/;"	f
neosnippet#handlers#_cursor_moved	.vim/plugged/neosnippet/autoload/neosnippet/handlers.vim	/^function! neosnippet#handlers#_cursor_moved() abort "{{{$/;"	f
neosnippet#handlers#_restore_unnamed_register	.vim/plugged/neosnippet/autoload/neosnippet/handlers.vim	/^function! neosnippet#handlers#_restore_unnamed_register() abort "{{{$/;"	f
neosnippet#helpers#delete_selected_text	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#delete_selected_text(type, ...) abort "{{{$/;"	f
neosnippet#helpers#get_completion_snippets	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_completion_snippets() abort "{{{$/;"	f
neosnippet#helpers#get_cursor_snippet	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_cursor_snippet(snippets, cur_text) abort "{{{$/;"	f
neosnippet#helpers#get_filetype	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_filetype() abort "{{{$/;"	f
neosnippet#helpers#get_selected_text	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_selected_text(type, ...) abort "{{{$/;"	f
neosnippet#helpers#get_snippets	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_snippets(...) abort "{{{$/;"	f
neosnippet#helpers#get_snippets_directory	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_snippets_directory() abort "{{{$/;"	f
neosnippet#helpers#json2vim	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#json2vim(expr) abort "{{{$/;"	f
neosnippet#helpers#substitute_selected_text	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#substitute_selected_text(type, text) abort "{{{$/;"	f
neosnippet#helpers#vim2json	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#vim2json(expr) abort "{{{$/;"	f
neosnippet#init#_initialize	.vim/plugged/neosnippet/autoload/neosnippet/init.vim	/^function! neosnippet#init#_initialize() abort "{{{$/;"	f
neosnippet#init#check	.vim/plugged/neosnippet/autoload/neosnippet/init.vim	/^function! neosnippet#init#check() abort "{{{$/;"	f
neosnippet#jumpable	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^function! neosnippet#jumpable() abort "{{{$/;"	f
neosnippet#mappings#_anonymous	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_anonymous(snippet) abort "{{{$/;"	f
neosnippet#mappings#_clear_select_mode_mappings	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_clear_select_mode_mappings() abort "{{{$/;"	f
neosnippet#mappings#_expand	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_expand(trigger) abort "{{{$/;"	f
neosnippet#mappings#_expand_target	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_expand_target() abort "{{{$/;"	f
neosnippet#mappings#_expand_target_trigger	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_expand_target_trigger(trigger) abort "{{{$/;"	f
neosnippet#mappings#_pre_trigger	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_pre_trigger() abort "{{{$/;"	f
neosnippet#mappings#_register_oneshot_snippet	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_register_oneshot_snippet() abort "{{{$/;"	f
neosnippet#mappings#_trigger	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_trigger(function) abort "{{{$/;"	f
neosnippet#mappings#completed_expandable	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#completed_expandable() abort "{{{$/;"	f
neosnippet#mappings#expand_impl	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#expand_impl() abort$/;"	f
neosnippet#mappings#expand_or_jump_impl	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#expand_or_jump_impl() abort$/;"	f
neosnippet#mappings#expandable	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#expandable() abort "{{{$/;"	f
neosnippet#mappings#expandable_or_jumpable	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#expandable_or_jumpable() abort "{{{$/;"	f
neosnippet#mappings#jump_impl	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#jump_impl() abort$/;"	f
neosnippet#mappings#jump_or_expand_impl	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#jump_or_expand_impl() abort$/;"	f
neosnippet#mappings#jumpable	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#jumpable() abort "{{{$/;"	f
neosnippet#parser#_get_completed_snippet	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_get_completed_snippet(completed_item, cur_text, next_text) abort "{/;"	f
neosnippet#parser#_get_in_paren	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_get_in_paren(key, pair, str) abort "{{{$/;"	f
neosnippet#parser#_initialize_snippet	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_initialize_snippet(dict, path, line, pattern, name) abort "{{{$/;"	f
neosnippet#parser#_initialize_snippet_options	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_initialize_snippet_options() abort "{{{$/;"	f
neosnippet#parser#_parse_snippet	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_parse_snippet(filename, trigger) abort "{{{$/;"	f
neosnippet#parser#_parse_snippets	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_parse_snippets(filename) abort "{{{$/;"	f
neosnippet#util#escape_pattern	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#escape_pattern(...) abort "{{{$/;"	f
neosnippet#util#expand	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#expand(path) abort "{{{$/;"	f
neosnippet#util#get_buffer_config	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_buffer_config($/;"	f
neosnippet#util#get_cur_text	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_cur_text() abort "{{{$/;"	f
neosnippet#util#get_last_status	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_last_status(...) abort "{{{$/;"	f
neosnippet#util#get_next_text	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_next_text() abort "{{{$/;"	f
neosnippet#util#get_vital	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_vital() abort "{{{$/;"	f
neosnippet#util#has_vimproc	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#has_vimproc(...) abort "{{{$/;"	f
neosnippet#util#iconv	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#iconv(...) abort "{{{$/;"	f
neosnippet#util#is_mac	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#is_mac(...) abort "{{{$/;"	f
neosnippet#util#is_sudo	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#is_sudo() abort "{{{$/;"	f
neosnippet#util#is_windows	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#is_windows(...) abort "{{{$/;"	f
neosnippet#util#option2list	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#option2list(str) abort "{{{$/;"	f
neosnippet#util#parse_options	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#parse_options(args, options_list) abort "{{{$/;"	f
neosnippet#util#print_error	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#print_error(string) abort "{{{$/;"	f
neosnippet#util#set_default	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#set_default(var, val, ...) abort  "{{{$/;"	f
neosnippet#util#set_dictionary_helper	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#set_dictionary_helper(...) abort "{{{$/;"	f
neosnippet#util#strwidthpart	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#strwidthpart(...) abort "{{{$/;"	f
neosnippet#util#substitute_path_separator	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#substitute_path_separator(...) abort "{{{$/;"	f
neosnippet#util#system	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#system(...) abort "{{{$/;"	f
neosnippet#util#truncate	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! neosnippet#util#truncate(...) abort "{{{$/;"	f
neosnippet#variables#clear_expand_stack	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#clear_expand_stack() abort "{{{$/;"	f
neosnippet#variables#current_neosnippet	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#current_neosnippet() abort "{{{$/;"	f
neosnippet#variables#data_dir	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#data_dir() abort "{{{$/;"	f
neosnippet#variables#expand_stack	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#expand_stack() abort "{{{$/;"	f
neosnippet#variables#pop_expand_stack	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#pop_expand_stack() abort "{{{$/;"	f
neosnippet#variables#runtime_dir	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#runtime_dir() abort "{{{$/;"	f
neosnippet#variables#set_snippets	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#set_snippets(list) abort "{{{$/;"	f
neosnippet#variables#snippets	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#snippets() abort "{{{$/;"	f
neosnippet#variables#snippets_dir	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#snippets_dir() abort "{{{$/;"	f
neosnippet#view#_clear_markers	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! neosnippet#view#_clear_markers(expand_info) abort "{{{$/;"	f
neosnippet#view#_expand	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! neosnippet#view#_expand(cur_text, col, trigger_name) abort "{{{$/;"	f
neosnippet#view#_get_snippet_range	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! neosnippet#view#_get_snippet_range(begin_line, begin_patterns, end_line, end_patterns)/;"	f
neosnippet#view#_insert	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! neosnippet#view#_insert(snippet, options, cur_text, col) abort "{{{$/;"	f
neosnippet#view#_jump	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! neosnippet#view#_jump(_, col) abort "{{{$/;"	f
neosnippet#view#_search_outof_range	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! neosnippet#view#_search_outof_range(col) abort "{{{$/;"	f
neosnippet#view#_search_snippet_range	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! neosnippet#view#_search_snippet_range(start, end, cnt, ...) abort "{{{$/;"	f
nerd_commenter	.vimrc	/^augroup nerd_commenter$/;"	a
nerd_tree	.vimrc	/^augroup nerd_tree$/;"	a
nerdtree#checkForBrowse	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir)$/;"	f
nerdtree#compareBookmarks	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareBookmarks(first, second)$/;"	f
nerdtree#compareNodes	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2)$/;"	f
nerdtree#compareNodesBySortKey	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodesBySortKey(n1, n2)$/;"	f
nerdtree#completeBookmarks	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P)$/;"	f
nerdtree#deprecated	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...)$/;"	f
nerdtree#echo	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg)$/;"	f
nerdtree#echoError	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg)$/;"	f
nerdtree#echoWarning	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg)$/;"	f
nerdtree#exec	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd)$/;"	f
nerdtree#has_opt	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name)$/;"	f
nerdtree#loadClassFiles	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles()$/;"	f
nerdtree#postSourceActions	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions()$/;"	f
nerdtree#renderView	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView()$/;"	f
nerdtree#runningWindows	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows()$/;"	f
nerdtree#ui_glue#bookmarkNode	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...)$/;"	f
nerdtree#ui_glue#chRootCwd	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd()$/;"	f
nerdtree#ui_glue#clearBookmarks	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks)$/;"	f
nerdtree#ui_glue#createDefaultBindings	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings()$/;"	f
nerdtree#ui_glue#invokeKeyMap	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key)$/;"	f
nerdtree#ui_glue#openBookmark	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name)$/;"	f
nerdtree#ui_glue#revealBookmark	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name)$/;"	f
nerdtree#ui_glue#setupCommands	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands()$/;"	f
nerdtree#ui_glue#upDir	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(keepState)$/;"	f
nerdtree#version	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version()$/;"	f
nerdtreegitplugin	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^augroup nerdtreegitplugin$/;"	a
normalize	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^def normalize(coord):$/;"	f
o	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> o    :silent! call <SID>preview_commit()<cr>$/;"	m
o	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> o    :<C-U>exe <SID>BlameCommit((&splitbelow ? "botright" : "/;"	m
o	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> o     :<C-U>exe <SID>GF("split")<CR>$/;"	m
object.format	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^  function object.format() dict$/;"	f
object.start	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^  function object.start() dict$/;"	f
object.stop	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^  function object.stop() dict$/;"	f
on_event	.vim/plugged/neosnippet/rplugin/python3/deoplete/sources/neosnippet.py	/^    def on_event(self, context):$/;"	m	class:Source
optionxform	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^    def optionxform(self, optionstr):$/;"	m	class:EditorConfigParser
p	.vim/plugged/vim-css-color/tests/torture.css	/^p { color: #300000; color: #300001; color: #300002; color: #300003; color: #300004; color: #3000/;"	s
p	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> p :<C-U>execute <SID>StagePatch(line('.'),line('.')+v:count1-1)<C/;"	m
p	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    xnoremap <buffer> <silent> p :<C-U>execute <SID>StagePatch(line("'<"),line("'>"))<CR>$/;"	m
path_score	.vim/plugged/ctrlp-py-matcher/autoload/pymatcher.py	/^    def path_score(line):$/;"	f	function:CtrlPPyMatch	file:
pd	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    pd = down$/;"	v	class:Turtle
peekaboo	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^  augroup peekaboo$/;"	a
peekaboo#aboo	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! peekaboo#aboo()$/;"	f
peekaboo#off	.vim/plugged/vim-peekaboo/plugin/peekaboo.vim	/^function! peekaboo#off()$/;"	f
peekaboo#on	.vim/plugged/vim-peekaboo/plugin/peekaboo.vim	/^function! peekaboo#on()$/;"	f
peekaboo#peek	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! peekaboo#peek(count, mode, visualmode)$/;"	f
peekaboo_init	.vim/plugged/vim-peekaboo/plugin/peekaboo.vim	/^augroup peekaboo_init$/;"	a
pickle	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^pickle:$/;"	t
pixel_map	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^pixel_map = ((0x01, 0x08),$/;"	v
plug#	.vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	.vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	.vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	.vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	.vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plugin/editorconfig.vim	.vim/plugged/editorconfig-vim/tests/spec/editorconfig_spec.rb	/^describe 'plugin\/editorconfig.vim' do$/;"	d
plugin_dir	.vim/plugged/vim-minimap/autoload/minimap.py	/^    plugin_dir = os.path.join(p, "autoload", "drawille")$/;"	v
polygon	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^def polygon(center_x=0, center_y=0, sides=4, radius=4):$/;"	f
pop	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def pop(self, key, *args):$/;"	m	class:OrderedDict
popitem	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def popitem(self, i=-1):$/;"	m	class:OrderedDict
position	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^position = height \/ 2$/;"	v
preprocess_values	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/handler.py	/^    def preprocess_values(self):$/;"	m	class:EditorConfigHandler
print_help	.vim/plugged/ale/custom-checks	/^function print_help() {$/;"	f
project	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^project = u'EditorConfig Python Core'$/;"	v
project	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def project(self, win_width, win_height, fov, viewer_distance):$/;"	m	class:Point3D
projection	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^        projection = True$/;"	v
projection	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    projection = False$/;"	v
pu	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    pu = up$/;"	v	class:Turtle
pygments_style	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^pygments_style = 'sphinx'$/;"	v
pymatcher#PyMatch	.vim/plugged/ctrlp-py-matcher/autoload/pymatcher.vim	/^function! pymatcher#PyMatch(items, str, limit, mmode, ispath, crfile, regex)$/;"	f
python_module	.vim/plugged/vim-minimap/autoload/minimap.vim	/^    let python_module = fnameescape(globpath(&runtimepath, 'autoload\/minimap.py'))$/;"	v
q	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^  nnoremap <buffer> <silent> q :hide<CR>$/;"	m
q	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> q    :exe substitute(bufwinnr(b:fugitive_blamed_bufnr).' winc/;"	m
q	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> q    :<C-U>bdelete<CR>$/;"	m
q	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> q :<C-U>if bufnr('$') == 1<Bar>quit<Bar>else<Bar>bdelete<Bar>endi/;"	m
qthelp	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^qthelp:$/;"	t
r	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> r :<C-U>edit<CR>$/;"	m
r	.vim/plugged/vim-minimap/autoload/drawille/examples/speed_test.py	/^    r = timeit(c.frame, number=frames)$/;"	v
rainbow_parentheses#activate	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^func! rainbow_parentheses#activate()$/;"	f
rainbow_parentheses#clear	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^func! rainbow_parentheses#clear()$/;"	f
rainbow_parentheses#load	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^func! rainbow_parentheses#load(...)$/;"	f
rainbow_parentheses#toggle	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^func! rainbow_parentheses#toggle()$/;"	f
rainbow_parentheses#toggleall	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^func! rainbow_parentheses#toggleall()$/;"	f
rainbow_parenthesis_config	.vimrc	/^augroup rainbow_parenthesis_config$/;"	a
ratio	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^        ratio = tw \/ float(w)$/;"	v
read	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/ini.py	/^    def read(self, filename):$/;"	m	class:EditorConfigParser
read_keys	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^def read_keys(stdscr):$/;"	f
release	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^release = __version__$/;"	v
rename	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def rename(self, old_key, new_key):$/;"	m	class:OrderedDict
repeat#invalidate	.vim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#invalidate()$/;"	f
repeat#run	.vim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#run(count)$/;"	f
repeat#set	.vim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat#setreg	.vim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#setreg(sequence,register)$/;"	f
repeat#wrap	.vim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#wrap(command,count)$/;"	f
repeatPlugin	.vim/plugged/vim-repeat/autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
repeat_config	.vimrc	/^augroup repeat_config$/;"	a
repeat_custom_motion	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    augroup repeat_custom_motion$/;"	a
repository	.vim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	o
restore_cursor	.vimrc	/^augroup restore_cursor$/;"	a
reverse	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def reverse(self):$/;"	m	class:OrderedDict
right	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def right(self, angle):$/;"	m	class:Turtle
rotateX	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def rotateX(self, angle):$/;"	m	class:Point3D
rotateY	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def rotateY(self, angle):$/;"	m	class:Point3D
rotateZ	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^    def rotateZ(self, angle):$/;"	m	class:Point3D
rows	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def rows(self, min_x=None, min_y=None, max_x=None, max_y=None):$/;"	m	class:Canvas
rt	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    rt = right$/;"	v	class:Turtle
ruby_fold	.vimrc	/^  let ruby_fold = 1$/;"	v
ruby_operators	.vimrc	/^  let ruby_operators = 1$/;"	v
ruby_space_errors	.vimrc	/^  let ruby_space_errors = 1$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['asdf', 'func'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['conditional'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['hi'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['paste'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['text', 'raw', 'func'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['whitespace'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'aaaa', 'raw'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'raw'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['text', 'text'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['%t', 'asdf', '%{getcwd()}'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['ffenc','%{strftime("%H:%M")}'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['raw', '%f'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['text', 'text'])$/;"	v
s	.vim/plugged/vim-css-color/tests/example.css	/^s { background: hsl(0, 100%, 50%) }$/;"	s
s	.vim/plugged/vim-minimap/autoload/drawille/examples/basic.py	/^s = Canvas()$/;"	v
s	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  nmap s <Plug>Sneak_s$/;"	m
s	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  xmap s <Plug>Sneak_s$/;"	m
s.dosearch	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.dosearch(...) " a:1 : extra search options$/;"	f
s.get_onscreen_searchpattern	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.get_onscreen_searchpattern(w)$/;"	f
s.get_stopline	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.get_stopline()$/;"	f
s.hasmatches	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.hasmatches(n)$/;"	f
s.init	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.init(input, repeatmotion, reverse)$/;"	f
s.initpattern	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.initpattern()$/;"	f
s:ALEToggle	.vim/plugged/ale/plugin/ale.vim	/^function! s:ALEToggle() abort$/;"	f
s:AcceptSelection	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:AcceptSelection(action)$/;"	f
s:AddHighlighting	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:AddHighlighting()$/;"	f
s:AddIncludedErrors	.vim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:AddIncludedErrors(output, include_lnum, include_lines) abort$/;"	f
s:AddLeftDelim	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
s:AddLeftDelimAligned	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
s:AddRightDelim	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
s:AddRightDelimAligned	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
s:AltMultipart	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
s:AltNested	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AltNested()$/;"	f
s:AppendCommentToLine	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
s:ApplyConfig	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:ApplyConfig(config) " {{{1$/;"	f
s:ApplyMappings	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:ApplyMappings() "{{{$/;"	f
s:AutoUpdate	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
s:BEGIN_BLOCK	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:BEGIN_BLOCK = s:BEGIN_BLOCK_KEYWORD . '\\|' . s:COMPOUND_EXPRESSION$/;"	v
s:BEGIN_BLOCK_KEYWORD	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:BEGIN_BLOCK_KEYWORD = '\\C^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:BEGIN_BLOCK_OP	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:BEGIN_BLOCK_OP = '[([{:=]$'$/;"	v
s:BRACKET_CONTINUATION	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:BRACKET_CONTINUATION = '^\\s*[}\\])]\\s*' . s:CONTINUATION_OP$/;"	v
s:BRACKET_PAIRS	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:BRACKET_PAIRS = {']': '\\[', '}': '{', ')': '('}$/;"	v
s:BREAK_BLOCK_OP	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:BREAK_BLOCK_OP = '\\C^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:Balanced	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:Balanced(lnum)$/;"	f
s:Blame	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Blame(bang,line1,line2,count,args) abort$/;"	f
s:BlameCommit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BlameCommit(cmd) abort$/;"	f
s:BlameJump	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BlameJump(suffix) abort$/;"	f
s:BlameSyntax	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BlameSyntax() abort$/;"	f
s:Bookmark	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.GetNodeForName	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.Sort	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Sort()$/;"	f
s:Bookmark.ToRoot	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.compareTo	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
s:Bookmark.delete	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	.vim/plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:Browse	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Browse(bang,line1,count,...) abort$/;"	f
s:BufReadIndex	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadIndex() abort$/;"	f
s:BufReadIndexFile	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadIndexFile() abort$/;"	f
s:BufReadObject	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadObject() abort$/;"	f
s:BufWriteIndexFile	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BufWriteIndexFile() abort$/;"	f
s:BuildClassPathOption	.vim/plugged/ale/ale_linters/java/javac.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
s:BuildClassPathOption	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
s:BuildPrompt	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:BuildPrompt(upd)$/;"	f
s:BuildText	.vim/plugged/ale/ale_linters/ruby/reek.vim	/^function! s:BuildText(buffer, error) abort$/;"	f
s:COMPOUND_EXPRESSION	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:COMPOUND_EXPRESSION = '\\C\\%([^-]-\\|[^+]+\\|[^\/]\/\\|[:=*%&|^<>]\\)\\s*'$/;"	v
s:CONTAINED_THEN	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:CONTAINED_THEN = '\\C[(\\[].\\{-}\\<then\\>.\\{-\\}[)\\]]'$/;"	v
s:CONTINUATION	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:CONTINUATION = s:CONTINUATION_OP . '\\|' . s:BEGIN_BLOCK_OP$/;"	v
s:CONTINUATION_OP	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:CONTINUATION_OP = '\\C\\%(\\<\\%(is\\|isnt\\|and\\|or\\)\\>\\|'$/;"	v
s:CTRL_R	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:CTRL_R = "\\<c-r>"$/;"	v
s:Cache	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^let s:Cache = neocomplete#util#get_vital().import('System.Cache.Deprecated')$/;"	v
s:Cache	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^let s:Cache = neosnippet#util#get_vital().import('System.Cache.Deprecated')$/;"	v
s:Cache	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^let s:Cache = neosnippet#util#get_vital().import('System.Cache.Deprecated')$/;"	v
s:CanCommentLine	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
s:CanPlaceCursor	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
s:CanSexyCommentLines	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
s:CanToggleCommentLine	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
s:ChangeFoldLevel	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
s:CheckDefined	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:CheckDefined(colors)$/;"	f
s:CheckExCtagsVersion	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
s:CheckFTCtags	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
s:CheckForExCtags	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
s:CheckMouseClick	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
s:Close	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Close()$/;"	f
s:CloseCustomFuncs	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:CloseCustomFuncs()$/;"	f
s:CloseFold	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
s:CloseWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
s:CoffeeCompile	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompile(startline, endline, args)$/;"	f
s:CoffeeCompileClose	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileClose()$/;"	f
s:CoffeeCompileResetVars	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileResetVars()$/;"	f
s:CoffeeCompileToBuf	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileToBuf(buf, startline, endline)$/;"	f
s:CoffeeComplete	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeComplete(cmd, cmdline, cursor)$/;"	f
s:CoffeeLint	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeLint(startline, endline, bang, args)$/;"	f
s:CoffeeMakeDeprecated	.vim/plugged/vim-coffee-script/compiler/coffee.vim	/^function! s:CoffeeMakeDeprecated(bang, args)$/;"	f
s:CoffeeRun	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeRun(startline, endline, args)$/;"	f
s:CoffeeRunClose	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeRunClose()$/;"	f
s:CoffeeRunResetVars	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeRunResetVars()$/;"	f
s:CoffeeWatch	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeWatch(args)$/;"	f
s:CoffeeWatchClose	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeWatchClose()$/;"	f
s:CoffeeWatchResetVars	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeWatchResetVars()$/;"	f
s:CoffeeWatchUpdate	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeWatchUpdate()$/;"	f
s:CommentBlock	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
s:CommentLines	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
s:CommentLinesMinimal	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
s:CommentLinesSexy	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
s:CommentLinesToggle	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
s:CommentRegion	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
s:Commit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Commit(args, ...) abort$/;"	f
s:CommitComplete	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:CommitComplete(A,L,P) abort$/;"	f
s:ConvertLeadingSpacesToTabs	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
s:ConvertLeadingTabsToSpaces	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
s:ConvertLeadingWhiteSpace	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
s:CorrectFocusOnStartup	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
s:CountNonESCedOccurances	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
s:CreateAutocommands	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
s:CreateCountDict	.vim/plugged/ale/autoload/ale/statusline.vim	/^function! s:CreateCountDict() abort$/;"	f
s:CreateDelimMapFromCms	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CreateDelimMapFromCms()$/;"	f
s:CreateEnMasseBuffer	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:CreateEnMasseBuffer(list, sourceLines)$/;"	f
s:CreateMaps	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function! s:CreateMaps(modes, target, desc, combo)$/;"	f
s:CreateNewFile	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:CreateNewFile(...)$/;"	f
s:CreateTSServerMessageData	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! s:CreateTSServerMessageData(message) abort$/;"	f
s:CreateTemporaryFileForJob	.vim/plugged/ale/autoload/ale/engine.vim	/^function! s:CreateTemporaryFileForJob(buffer, temporary_file) abort$/;"	f
s:CreateTemporaryFileForJob	.vim/plugged/ale/autoload/ale/fix.vim	/^function! s:CreateTemporaryFileForJob(buffer, temporary_file, input) abort$/;"	f
s:Creator	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateMirror	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
s:Creator._nextBufferNumber	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	.vim/plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:CtagsErrMsg	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
s:CurTypeName	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:CurTypeName()$/;"	f
s:Cursor	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:Cursor = {}$/;"	v
s:Cursor.column	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.column() dict$/;"	f
s:Cursor.line	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.line() dict$/;"	f
s:Cursor.move	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.move(line, column) dict$/;"	f
s:Cursor.new	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.new(position)$/;"	f
s:Cursor.remove_visual_selection	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.remove_visual_selection() dict$/;"	f
s:Cursor.restore_unnamed_register	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.restore_unnamed_register() dict$/;"	f
s:Cursor.save_unnamed_register	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.save_unnamed_register() dict$/;"	f
s:Cursor.update_highlight	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_highlight() dict$/;"	f
s:Cursor.update_line_length	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_line_length() dict$/;"	f
s:Cursor.update_position	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_position(pos) dict$/;"	f
s:Cursor.update_visual_selection	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_visual_selection(region) dict$/;"	f
s:CursorHoldUpdate	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:CursorHoldUpdate()$/;"	f
s:CursorManager	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:CursorManager = {}$/;"	v
s:CursorManager.add	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.add(pos, ...) dict$/;"	f
s:CursorManager.debug	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.debug() dict$/;"	f
s:CursorManager.delete_current	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.delete_current() dict$/;"	f
s:CursorManager.get	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get(i) dict$/;"	f
s:CursorManager.get_current	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get_current() dict$/;"	f
s:CursorManager.initialize	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.initialize() dict$/;"	f
s:CursorManager.is_empty	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.is_empty() dict$/;"	f
s:CursorManager.loop_done	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.loop_done() dict$/;"	f
s:CursorManager.new	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.new()$/;"	f
s:CursorManager.next	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.next() dict$/;"	f
s:CursorManager.reapply_visual_selection	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reapply_visual_selection() dict$/;"	f
s:CursorManager.remove_highlight	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.remove_highlight(hi_id) dict$/;"	f
s:CursorManager.reposition_all_within_region	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reposition_all_within_region(start) dict$/;"	f
s:CursorManager.reset	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reset(restore_view, restore_setting, ...) dict$/;"	f
s:CursorManager.restore_user_settings	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.restore_user_settings() dict$/;"	f
s:CursorManager.size	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.size() dict$/;"	f
s:CursorManager.start_loop	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.start_loop() dict$/;"	f
s:CursorManager.update_current	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.update_current() dict$/;"	f
s:DEFAULT_LEVEL	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = '-1'$/;"	v
s:DEFAULT_LEVEL	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = 'indent(prevnlnum)'$/;"	v
s:DOT_ACCESS	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:DetectCoffee	.vim/plugged/vim-coffee-script/ftdetect/coffee.vim	/^function! s:DetectCoffee()$/;"	f
s:DetectFiletype	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
s:Diff	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Diff(vert,keepfocus,...) abort$/;"	f
s:DirComplete	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:DirComplete(A,L,P) abort$/;"	f
s:DisableShellSlash	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:DisableShellSlash() " {{{2$/;"	f
s:Dispatch	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Dispatch(bang, args)$/;"	f
s:DoesBlockHaveDelim	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
s:DoesBlockHaveMultipartDelim	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
s:ELSE_COND	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:ELSE_COND = '\\C^\\s*else\\s\\+\\<\\%(if\\|unless\\)\\>'$/;"	v
s:EchoCommandHistory	.vim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoCommandHistory() abort$/;"	f
s:EchoError	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:EchoError(message)$/;"	f
s:EchoGlobalVariables	.vim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
s:EchoLinterAliases	.vim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterAliases(all_linters) abort$/;"	f
s:EchoLinterVariables	.vim/plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterVariables(variable_list) abort$/;"	f
s:EchoTruncated	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:EchoTruncated(msg)$/;"	f
s:EchoWithShortMess	.vim/plugged/ale/autoload/ale/cursor.vim	/^function! s:EchoWithShortMess(setting, message) abort$/;"	f
s:Edit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Edit(cmd,bang,...) abort$/;"	f
s:EditComplete	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:EditComplete(A,L,P) abort$/;"	f
s:EditRunComplete	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:EditRunComplete(A,L,P) abort$/;"	f
s:Esc	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
s:EscapeCtagsCmd	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
s:EscapePercents	.vim/plugged/ale/autoload/ale.vim	/^function! s:EscapePercents(str) abort$/;"	f
s:Event	.vim/plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event.New	.vim/plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:ExecuteCtags	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
s:ExecuteCtagsOnFile	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
s:ExecuteInTree	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ExecuteInTree(cmd) abort$/;"	f
s:ExitIfSingleCandidate	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ExitIfSingleCandidate()$/;"	f
s:FUNCTION	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:FUNCTION = '[-=]>$'$/;"	v
s:FileRead	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:FileRead() abort$/;"	f
s:FileUpdate	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:FileUpdate(fname)$/;"	f
s:FindBoundingLinesOfSexyCom	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
s:FindConfig	.vim/plugged/ale/autoload/ale/fixers/eslint.vim	/^function! s:FindConfig(buffer) abort$/;"	f
s:FindDUBConfig	.vim/plugged/ale/ale_linters/d/dmd.vim	/^function! s:FindDUBConfig(buffer) abort$/;"	f
s:FindDelimiterIndex	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
s:FindErrorInExpansion	.vim/plugged/ale/autoload/ale/handlers/rust.vim	/^function! s:FindErrorInExpansion(span, file_name) abort$/;"	f
s:FindHistoryItem	.vim/plugged/ale/autoload/ale/history.vim	/^function! s:FindHistoryItem(buffer, job_id) abort$/;"	f
s:FindItemAtCursor	.vim/plugged/ale/autoload/ale/cursor.vim	/^function! s:FindItemAtCursor() abort$/;"	f
s:FindPythonFiles	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:FindPythonFiles() " {{{1$/;"	f
s:FindPythonInterp	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:FindPythonInterp() " {{{1$/;"	f
s:FindRailsRoot	.vim/plugged/ale/ale_linters/ruby/brakeman.vim	/^function! s:FindRailsRoot(buffer) abort$/;"	f
s:FinishCommit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:FinishCommit() abort$/;"	f
s:FlagSet	.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	.vim/plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:ForceUpdate	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ForceUpdate()$/;"	f
s:GF	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
s:GFInit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:GFInit(...) abort$/;"	f
s:GatherOutput	.vim/plugged/ale/autoload/ale/engine.vim	/^function! s:GatherOutput(job_id, line) abort$/;"	f
s:GatherOutput	.vim/plugged/ale/autoload/ale/fix.vim	/^function! s:GatherOutput(job_id, line) abort$/;"	f
s:Get	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:Get(dict, key, prefix, default)$/;"	f
s:GetALEMatches	.vim/plugged/ale/autoload/ale/highlight.vim	/^function! s:GetALEMatches() abort$/;"	f
s:GetAliasedFiletype	.vim/plugged/ale/autoload/ale/linter.vim	/^function! s:GetAliasedFiletype(original_filetype) abort$/;"	f
s:GetCachedExtensionMap	.vim/plugged/ale/autoload/ale/filetypes.vim	/^function! s:GetCachedExtensionMap() abort$/;"	f
s:GetCallbacks	.vim/plugged/ale/autoload/ale/fix.vim	/^function! s:GetCallbacks() abort$/;"	f
s:GetConflictingPluginWarning	.vim/plugged/ale/after/plugin/ale.vim	/^function! s:GetConflictingPluginWarning(plugin_name) abort$/;"	f
s:GetCounts	.vim/plugged/ale/autoload/ale/statusline.vim	/^function! s:GetCounts(buffer) abort$/;"	f
s:GetCurrentMatchIDs	.vim/plugged/ale/autoload/ale/highlight.vim	/^function! s:GetCurrentMatchIDs(loclist) abort$/;"	f
s:GetDefaultPolicy	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:GetDefaultPolicy(curlnum)$/;"	f
s:GetDialectArgument	.vim/plugged/ale/ale_linters/sh/shellcheck.vim	/^function! s:GetDialectArgument() abort$/;"	f
s:GetDocLocations	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:GetDocLocations() "{{{$/;"	f
s:GetFileWinnr	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
s:GetItemsWithSignIDs	.vim/plugged/ale/autoload/ale/sign.vim	/^function! s:GetItemsWithSignIDs(loclist) abort$/;"	f
s:GetLineFromFile	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:GetLineFromFile(file, line)$/;"	f
s:GetLinterNames	.vim/plugged/ale/autoload/ale/linter.vim	/^function! s:GetLinterNames(original_filetype) abort$/;"	f
s:GetLinterVariables	.vim/plugged/ale/autoload/ale/debugging.vim	/^function! s:GetLinterVariables(filetype, linter_names) abort$/;"	f
s:GetMakePrg	.vim/plugged/vim-coffee-script/compiler/coffee.vim	/^function! s:GetMakePrg()$/;"	f
s:GetMatchingLineFromQuickfix	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:GetMatchingLineFromQuickfix(target, list)$/;"	f
s:GetMessage	.vim/plugged/ale/autoload/ale/cursor.vim	/^function! s:GetMessage(linter, type, text) abort$/;"	f
s:GetNearbyTag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(all, forcecurrent, ...) abort$/;"	f
s:GetPair	.vim/plugged/vim-javascript/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip,...)$/;"	f
s:GetPair	.vim/plugged/vim-javascript/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip,time,...)$/;"	f
s:GetPrevNormalLine	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:GetPrevNormalLine(startlnum)$/;"	f
s:GetQuickfixItemForCurrentLine	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:GetQuickfixItemForCurrentLine()$/;"	f
s:GetQuickfixList	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:GetQuickfixList()$/;"	f
s:GetSexyComLeft	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
s:GetSexyComMarker	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
s:GetSexyComRight	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
s:GetSourceLinesFromList	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:GetSourceLinesFromList(list)$/;"	f
s:GetSupportedFiletypes	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
s:GetTagInfo	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
s:GetTrimmedLine	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:GetTrimmedLine(lnum)$/;"	f
s:GetVersion	.vim/plugged/ale/ale_linters/python/flake8.vim	/^function! s:GetVersion(buffer, version_output) abort$/;"	f
s:Git	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Git(bang, args) abort$/;"	f
s:GitComplete	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:GitComplete(A, L, P) abort$/;"	f
s:GitStatusCacheTime	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:GitStatusCacheTime = 0$/;"	v
s:GitStatusCacheTimeExpiry	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:GitStatusCacheTimeExpiry = 2$/;"	v
s:GlobPath	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:GlobPath(dirs, depth)$/;"	f
s:GotoFileWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
s:GotoNextFold	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
s:GotoNextToplevelTag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
s:GotoPrevFold	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
s:Grep	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Grep(cmd,bang,arg) abort$/;"	f
s:GroupLoclistItems	.vim/plugged/ale/autoload/ale/sign.vim	/^function! s:GroupLoclistItems(loclist) abort$/;"	f
s:HL	.vim/colors/molotov.vim	/^function! s:HL(group, fg, ...)$/;"	f
s:HandleBufDelete	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
s:HandleBufWrite	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
s:HandleChannelMessage	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! s:HandleChannelMessage(channel, message) abort$/;"	f
s:HandleCommandMessage	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! s:HandleCommandMessage(job_id, message) abort$/;"	f
s:HandleExit	.vim/plugged/ale/autoload/ale/engine.vim	/^function! s:HandleExit(job_id, exit_code) abort$/;"	f
s:HandleExit	.vim/plugged/ale/autoload/ale/fix.vim	/^function! s:HandleExit(job_id, exit_code) abort$/;"	f
s:HandleOnlyWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
s:HandleSyntaxError	.vim/plugged/ale/autoload/ale/handlers/ruby.vim	/^function! s:HandleSyntaxError(buffer, lines) abort$/;"	f
s:HandleUnixFormat	.vim/plugged/ale/autoload/ale/handlers/unix.vim	/^function! s:HandleUnixFormat(buffer, lines, type) abort$/;"	f
s:HasCStyleComments	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
s:HasLeadingTabs	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
s:HasMultipartDelims	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
s:HasOpenFileWindows	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
s:HashIndent	.vim/plugged/vim-markdown/ftplugin/markdown.vim	/^function! s:HashIndent(lnum)$/;"	f
s:Highlight	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:Highlight(args) "{{{$/;"	f
s:HighlightTag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
s:I1	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:I1 = [ '#00005f' , '#00dfff' , 17  , 45  ]$/;"	v
s:I2	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:I2 = [ '#ffffff' , '#005fff' , 255 , 27  ]$/;"	v
s:I3	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:I3 = [ '#ffffff' , '#000080' , 15  , 17  ]$/;"	v
s:IA1	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:IA1 = [ '#4e4e4e' , '#1c1c1c' , 239 , 234 , '' ]$/;"	v
s:IA2	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:IA2 = [ '#4e4e4e' , '#262626' , 239 , 235 , '' ]$/;"	v
s:IA3	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:IA3 = [ '#4e4e4e' , '#303030' , 239 , 236 , '' ]$/;"	v
s:Init	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:Init(cmd) "{{{$/;"	f
s:Init	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
s:InitCustomFuncs	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:InitCustomFuncs()$/;"	f
s:InitTypes	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
s:InitVariable	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
s:InitWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
s:InitializeExternalCommand	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:InitializeExternalCommand() " {{{2$/;"	f
s:InitializePythonBuiltin	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:InitializePythonBuiltin(editorconfig_core_py_dir) " {{{2$/;"	f
s:InitializePythonExternal	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:InitializePythonExternal() " {{{2$/;"	f
s:InvertComment	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
s:InvokeChain	.vim/plugged/ale/autoload/ale/engine.vim	/^function! s:InvokeChain(buffer, linter, chain_index, input) abort$/;"	f
s:IsBlock	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:IsBlock(...)$/;"	f
s:IsBoolean	.vim/plugged/ale/autoload/ale/linter.vim	/^function! s:IsBoolean(value) abort$/;"	f
s:IsCallback	.vim/plugged/ale/autoload/ale/linter.vim	/^function! s:IsCallback(value) abort$/;"	f
s:IsComment	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:IsComment(lnum, col)$/;"	f
s:IsCommentOrString	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:IsCommentOrString(lnum, col)$/;"	f
s:IsCommented	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
s:IsCommentedFromStartOfLine	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
s:IsCommentedNormOrSexy	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
s:IsCommentedOutermost	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedOutermost(left, right, leftAlt, rightAlt, line)$/;"	f
s:IsDelimValid	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
s:IsDummySignSet	.vim/plugged/ale/autoload/ale/sign.vim	/^function! s:IsDummySignSet(current_id_list) abort$/;"	f
s:IsEscaped	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
s:IsExecutable	.vim/plugged/ale/autoload/ale/engine.vim	/^function! s:IsExecutable(executable) abort$/;"	f
s:IsHeaderFile	.vim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:IsHeaderFile(filename) abort$/;"	f
s:IsInSexyComment	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
s:IsNumEven	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
s:IsSexyComment	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
s:IsString	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:IsString(lnum, col)$/;"	f
s:IsValidFile	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
s:JumpInit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:JumpInit(...) abort$/;"	f
s:JumpToTag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar) abort$/;"	f
s:KEYWORD_PAIRS	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:KEYWORD_PAIRS = [$/;"	v
s:KeyLoop	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:KeyLoop()$/;"	f
s:KeyMap	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Create	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	.vim/plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:KillHandler	.vim/plugged/ale/autoload/ale/job.vim	/^function! s:KillHandler(timer) abort$/;"	f
s:LastIndexOfDelim	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
s:Left	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Left(...)$/;"	f
s:LeftMostIndx	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
s:List	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^let s:List = neocomplete#util#get_vital().import('Data.List')$/;"	v
s:LoadArgCount	.vim/plugged/ale/autoload/ale/util.vim	/^function! s:LoadArgCount(function) abort$/;"	f
s:LoadUserTypeDefs	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
s:Log	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Log(cmd, line1, line2, ...) abort$/;"	f
s:MAX_COL_SIZE	.vim/plugged/ale/autoload/ale/highlight.vim	/^let s:MAX_COL_SIZE = 1073741824 " pow(2, 30)$/;"	v
s:MAX_LOOKBACK	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:MAX_POS_VALUES	.vim/plugged/ale/autoload/ale/highlight.vim	/^let s:MAX_POS_VALUES = 8$/;"	v
s:MapKeys	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
s:MapNorms	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapNorms()$/;"	f
s:MapSpecs	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapSpecs()$/;"	f
s:MarkToOpen	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MarkToOpen()$/;"	f
s:MatchIt	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchIt(items, pat, limit, exc)$/;"	f
s:MatchedItems	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchedItems(items, pat, limit)$/;"	f
s:MenuController	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.showMenu	.vim/plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	.vim/plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:Merge	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Merge(cmd, bang, args) abort$/;"	f
s:MergeChangesUnderPaths	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:MergeChangesUnderPaths(list, sourceLines)$/;"	f
s:MinimizeMaxFoldLevel	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
s:Move	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Move(force,destination) abort$/;"	f
s:MoveComplete	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:MoveComplete(A,L,P) abort$/;"	f
s:Multipart	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
s:N1	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:N1   = [ '#00005f' , '#dfff00' , 17  , 190 ]$/;"	v
s:N2	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:N2   = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:N3	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:N3   = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:NERDFileNameEscape	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTree	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CloseIfQuitOnOpen	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CloseIfQuitOnOpen()$/;"	f
s:NERDTree.CursorToBookmarkTable	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin()$/;"	f
s:NERDTree.ExistsForBuf	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:NERDTreeCacheDirtyDir	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:NERDTreeCacheDirtyDir(pathStr)$/;"	f
s:NERDTreeGetFileGitStatusKey	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:NERDTreeGetFileGitStatusKey(us, them)$/;"	f
s:NERDTreeGetIndicator	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:NERDTreeGetIndicator(statusKey)$/;"	f
s:NERDTreeGitStatusKeyMapping	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:NERDTreeGitStatusKeyMapping()$/;"	f
s:NERDTreeIndicatorMap	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^    let s:NERDTreeIndicatorMap = {$/;"	v
s:NERDTreeSortStarIndex	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERDTreeTrimDoubleQuotes	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:NERDTreeTrimDoubleQuotes(pathStr)$/;"	f
s:NeoVimCallback	.vim/plugged/ale/autoload/ale/job.vim	/^function! s:NeoVimCallback(job, data, event) abort$/;"	f
s:NerdEcho	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
s:Nested	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Nested()$/;"	f
s:NewConnection	.vim/plugged/ale/autoload/ale/lsp.vim	/^function! s:NewConnection() abort$/;"	f
s:Notifier	.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	.vim/plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:NumLinesInBuf	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
s:NumberOfLeadingTabs	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
s:OneScope	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:OneScope(lnum)$/;"	f
s:Open	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Open()$/;"	f
s:OpenFold	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
s:OpenLineInPreviewWindow	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:OpenLineInPreviewWindow()$/;"	f
s:OpenMulti	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenMulti(...)$/;"	f
s:OpenNoMarks	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenNoMarks(md, line)$/;"	f
s:OpenParents	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
s:OpenWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
s:Opener	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	.vim/plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
s:POSTFIX_CONDITION	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:POSTFIX_CONDITION = '\\C\\S\\s\\+\\zs\\<\\%(if\\|unless\\|when\\|while\\|until\\)\\>'$/;"	v
s:ParseCoffeeError	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:ParseCoffeeError(output, src, startline)$/;"	f
s:ParseTagline	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
s:Path	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
s:Path.CopyingSupported	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(path)$/;"	f
s:Path.Resolve	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.Slash	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Slash()$/;"	f
s:Path.WinToUnixPath	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._str	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.bookmarkNames	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.compareTo	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.compareTo(path)$/;"	f
s:Path.copy	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(path)$/;"	f
s:Path.isUnder	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(path)$/;"	f
s:Path.isUnixHiddenFile	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
s:PlaceDelimitersAndInsBetween	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
s:PlaceNewSigns	.vim/plugged/ale/autoload/ale/sign.vim	/^function! s:PlaceNewSigns(buffer, grouped_items, current_sign_offset) abort$/;"	f
s:PrevCodeLine	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:PrevCodeLine(lnum)$/;"	f
s:PrintHelp	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
s:PrintKinds	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
s:PrintTag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
s:ProcessFile	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
s:ProcessTag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
s:PrtAdd	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtAdd(char)$/;"	f
s:PrtBS	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtBS()$/;"	f
s:PrtClear	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClear()$/;"	f
s:PrtClearCache	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClearCache()$/;"	f
s:PrtCurEnd	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurEnd()$/;"	f
s:PrtCurLeft	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurLeft()$/;"	f
s:PrtCurRight	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurRight()$/;"	f
s:PrtCurStart	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurStart()$/;"	f
s:PrtDelete	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDelete()$/;"	f
s:PrtDeleteEnt	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteEnt()$/;"	f
s:PrtDeleteMRU	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteMRU()$/;"	f
s:PrtDeleteWord	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteWord()$/;"	f
s:PrtExit	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExit()$/;"	f
s:PrtExpandDir	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExpandDir()$/;"	f
s:PrtFocusMap	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtFocusMap(char)$/;"	f
s:PrtHistory	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtHistory(...)$/;"	f
s:PrtInsert	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtInsert(...)$/;"	f
s:PrtSelectJump	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectJump(char)$/;"	f
s:PrtSelectMove	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectMove(dir)$/;"	f
s:PrtSwitcher	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSwitcher()$/;"	f
s:Pulse	.vimrc	/^  function! s:Pulse() " {{{$/;"	f
s:QUOTE	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:QUOTE  = '"'$/;"	v
s:QuickHelp	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:QuickHelp() "{{{$/;"	f
s:REPLAY	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:REPLAY = '@'$/;"	v
s:RecoverStateAfterLineComment	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RecoverStateAfterLineComment(state)$/;"	f
s:RehighlightBlame	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:RehighlightBlame() abort$/;"	f
s:RemoteComplete	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:RemoteComplete(A, L, P) abort$/;"	f
s:Remove	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Remove(force) abort$/;"	f
s:RemoveDelimiters	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
s:RemoveUnicodeQuotes	.vim/plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:Render	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Render(lines, pat)$/;"	f
s:RenderContent	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
s:RenderKeepView	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
s:ReopenWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
s:ReplaceCmd	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ReplaceCmd(cmd,...) abort$/;"	f
s:ReplaceDelims	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
s:ReplaceLeftMostDelim	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
s:ReplaceRightMostDelim	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
s:Reset	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Reset(args)$/;"	f
s:ResetShellSlash	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:ResetShellSlash() " {{{2$/;"	f
s:RestoreScreenState	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
s:RestoreSession	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
s:RevisionComplete	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:RevisionComplete(A, L, P) abort$/;"	f
s:RiAddFoldMarkers	.vim/ftplugin/ri.vim	/^function! s:RiAddFoldMarkers()$/;"	f
s:RiExecute	.vim/ftplugin/ri.vim	/^function! s:RiExecute(term)$/;"	f
s:RiExpandClass	.vim/ftplugin/ri.vim	/^function! s:RiExpandClass(term)$/;"	f
s:RiGetClassOrModule	.vim/ftplugin/ri.vim	/^function! s:RiGetClassOrModule()$/;"	f
s:RiGetOption	.vim/ftplugin/ri.vim	/^function! s:RiGetOption(name, default)$/;"	f
s:RiSetupBuffer	.vim/ftplugin/ri.vim	/^function! s:RiSetupBuffer(name)$/;"	f
s:Right	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Right(...)$/;"	f
s:RightMostIndx	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
s:RunFixer	.vim/plugged/ale/autoload/ale/fix.vim	/^function! s:RunFixer(options) abort$/;"	f
s:RunJob	.vim/plugged/ale/autoload/ale/engine.vim	/^function! s:RunJob(options) abort$/;"	f
s:RunJob	.vim/plugged/ale/autoload/ale/fix.vim	/^function! s:RunJob(options) abort$/;"	f
s:SEVERITY_ERROR	.vim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_ERROR = 1$/;"	v
s:SEVERITY_HINT	.vim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_HINT = 4$/;"	v
s:SEVERITY_INFORMATION	.vim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_INFORMATION = 3$/;"	v
s:SEVERITY_WARNING	.vim/plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_WARNING = 2$/;"	v
s:SID	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function s:SID()$/;"	f
s:SID	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function s:SID()$/;"	f
s:SID_PREFIX	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! s:SID_PREFIX() abort "{{{$/;"	f
s:SINGLE_LINE_ELSE	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:SINGLE_LINE_ELSE = '\\C^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:SNR	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val]))/;"	v
s:SNR	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val]))/;"	v
s:SYNTAX_COMMENT	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_COMMENT = 'coffee\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_STRING	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_STRING = 'coffee\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_STRING_COMMENT	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:SandboxCheck	.vim/plugged/ale/autoload/ale/util.vim	/^        function! s:SandboxCheck() abort$/;"	f
s:SaveScreenState	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
s:ScratchBufBuild	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:ScratchBufBuild(src, vert, size)$/;"	f
s:ScratchBufUpdate	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:ScratchBufUpdate(buf, text)$/;"	f
s:SearchCode	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:SearchCode(lnum, regex)$/;"	f
s:SearchMatchingKeyword	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:SearchMatchingKeyword(startlnum, open, close)$/;"	f
s:SearchPair	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:SearchPair(startlnum, lookback, skip, open, close)$/;"	f
s:SearchWithDispatch	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:SearchWithDispatch(grepprg, grepargs, grepformat) "{{{$/;"	f
s:SearchWithGrep	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:SearchWithGrep(grepcmd, grepprg, grepargs, grepformat) "{{{$/;"	f
s:SearchingFilepaths	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:SearchingFilepaths() "{{{$/;"	f
s:SelectJavascript	.vim/plugged/vim-javascript/ftdetect/javascript.vim	/^fun! s:SelectJavascript()$/;"	f
s:SetDefTxt	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetDefTxt()$/;"	f
s:SetDefault	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! s:SetDefault(var, val)$/;"	f
s:SetDummySignIfNeeded	.vim/plugged/ale/autoload/ale/sign.vim	/^function! s:SetDummySignIfNeeded(buffer, current_sign_list, new_signs) abort$/;"	f
s:SetFoldLevel	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
s:SetFoldLevelRecursive	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
s:SetMakePrg	.vim/plugged/vim-coffee-script/compiler/coffee.vim	/^function! s:SetMakePrg()$/;"	f
s:SetOption	.vim/colors/solarized.vim	/^function! s:SetOption(name,default)$/;"	f
s:SetSignColumnWithoutErrorsHighlight	.vim/plugged/ale/autoload/ale/sign.vim	/^    function! s:SetSignColumnWithoutErrorsHighlight() abort$/;"	f
s:SetStatusLine	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine()$/;"	f
s:SetUpForNewFiletype	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
s:SetWD	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetWD(args)$/;"	f
s:SetupListeners	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:SetupListeners()$/;"	f
s:SetupStateBeforeLineComment	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SetupStateBeforeLineComment(topLine, bottomLine)$/;"	f
s:SexyNested	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SexyNested()$/;"	f
s:ShiftWidth	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^  function! s:ShiftWidth()$/;"	f
s:ShiftWidth	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^  let s:ShiftWidth = function('shiftwidth')$/;"	v
s:ShouldSkip	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:ShouldSkip(startlnum, lnum, col)$/;"	f
s:ShouldSuggestForType	.vim/plugged/ale/autoload/ale/fix/registry.vim	/^function! s:ShouldSuggestForType(suggested_filetypes, type_list) abort$/;"	f
s:ShowInPreviewWin	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
s:ShowPrototype	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
s:ShrinkIfExpanded	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
s:SolarizedHiTrail	.vim/colors/solarized.vim	/^function! s:SolarizedHiTrail()$/;"	f
s:SolarizedOptions	.vim/colors/solarized.vim	/^function! s:SolarizedOptions()$/;"	f
s:SortByBufferAndLine	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:SortByBufferAndLine(i1, i2)$/;"	f
s:SourceFlowSyntax	.vim/plugged/vim-javascript/ftdetect/javascript.vim	/^fun! s:SourceFlowSyntax()$/;"	f
s:SourcedFile	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^let s:SourcedFile=expand("<sfile>")$/;"	v
s:SpawnExternalParser	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:SpawnExternalParser(cmd) " {{{2$/;"	f
s:SpecInputs	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SpecInputs(str)$/;"	f
s:SplitPattern	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SplitPattern(str)$/;"	f
s:StageDiff	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
s:StageDiffEdit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
s:StageNext	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageNext(count) abort$/;"	f
s:StagePatch	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
s:StagePrevious	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StagePrevious(count) abort$/;"	f
s:StageReloadSeek	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageReloadSeek(target,lnum1,lnum2) abort$/;"	f
s:StageToggle	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageToggle(lnum1,lnum2) abort$/;"	f
s:StageUndo	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageUndo() abort$/;"	f
s:State	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:State.New	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
s:State.getCurrent	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
s:State.setCurrentFile	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
s:State.setPaused	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
s:Status	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Status() abort$/;"	f
s:StatusForListFormat	.vim/plugged/ale/autoload/ale/statusline.vim	/^function! s:StatusForListFormat() abort$/;"	f
s:StopCursorTimer	.vim/plugged/ale/autoload/ale/cursor.vim	/^function! s:StopCursorTimer() abort$/;"	f
s:SupportsDisplayName	.vim/plugged/ale/ale_linters/python/flake8.vim	/^function! s:SupportsDisplayName(version) abort$/;"	f
s:SwapOuterMultiPartDelimsForPlaceHolders	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwapOuterMultiPartDelimsForPlaceHolders(line)$/;"	f
s:SwapOuterPlaceHoldersForMultiPartDelims	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwapOuterPlaceHoldersForMultiPartDelims(line)$/;"	f
s:SwitchToAlternativeDelimiters	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
s:SwitchWindow	.vim/plugged/vim-coffee-script/ftplugin/coffee.vim	/^function! s:SwitchWindow(buf)$/;"	f
s:SyntaxName	.vim/plugged/vim-coffee-script/indent/coffee.vim	/^function! s:SyntaxName(lnum, col)$/;"	f
s:TYPE	.vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE_DICT	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_DICT	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_LIST	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
s:TYPE_STRING	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
s:TabSpace	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
s:TabbedCol	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
s:TagbarBufName	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
s:TemporaryFilename	.vim/plugged/ale/autoload/ale/command.vim	/^function! s:TemporaryFilename(buffer) abort$/;"	f
s:ToggleAutoclose	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
s:ToggleByFname	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleByFname()$/;"	f
s:ToggleCaseInsensitive	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
s:ToggleFocus	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleFocus()$/;"	f
s:ToggleFold	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
s:ToggleHelp	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
s:ToggleHideNonPublicTags	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
s:ToggleKeyLoop	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleKeyLoop()$/;"	f
s:ToggleMRURelative	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleMRURelative()$/;"	f
s:ToggleRegex	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleRegex()$/;"	f
s:ToggleSort	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
s:ToggleType	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleType(dir)$/;"	f
s:ToggleWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
s:TransformUserTypeDef	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
s:TreeDirNode	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._initChildren	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode._openRecursively2	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
s:TreeDirNode.activate	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getChild	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getDirChildren	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
s:TreeDirNode.getVisibleChildCount	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	.vim/plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findOpenDirSiblingWithVisibleChildren	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
s:TreeFileNode.findSibling	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openInNewTab	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	.vim/plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:Trim	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:Trim(ln)$/;"	f
s:TrimTrailingWhitespace	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:TrimTrailingWhitespace() " {{{{$/;"	f
s:TrimTrailingWhitespace	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TrimTrailingWhitespace(line)$/;"	f
s:UI	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line, removeLeadingSpaces)$/;"	f
s:UI.centerView	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(file_node)$/;"	f
s:UI.getPath	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFiles	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowHidden	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFiles	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	.vim/plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:UnEsc	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
s:UncommentLineNormal	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
s:UncommentLines	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
s:UncommentLinesNormal	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
s:UncommentLinesSexy	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
s:UntabbedCol	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
s:Update	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Update(str)$/;"	f
s:UpdateLineNumbers	.vim/plugged/ale/autoload/ale/sign.vim	/^function! s:UpdateLineNumbers(current_sign_list, items_by_sign_id) abort$/;"	f
s:UpdateMakePrg	.vim/plugged/vim-coffee-script/compiler/coffee.vim	/^  function! s:UpdateMakePrg()$/;"	f
s:UseConfigFiles	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:UseConfigFiles()$/;"	f
s:UseConfigFiles_ExternalCommand	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:UseConfigFiles_ExternalCommand() " {{{2$/;"	f
s:UseConfigFiles_Python_Builtin	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:UseConfigFiles_Python_Builtin() " {{{2$/;"	f
s:UseConfigFiles_Python_External	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:UseConfigFiles_Python_External() " {{{2$/;"	f
s:UserCmd	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:UserCmd(lscmd)$/;"	f
s:UsingListMappings	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:UsingListMappings() "{{{$/;"	f
s:UsingLocList	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:UsingLocList() "{{{$/;"	f
s:UsingModule	.vim/plugged/ale/ale_linters/python/flake8.vim	/^function! s:UsingModule(buffer) abort$/;"	f
s:V1	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:V1 = [ '#000000' , '#ffaf00' , 232 , 214 ]$/;"	v
s:V2	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:V2 = [ '#000000' , '#ff5f00' , 232 , 202 ]$/;"	v
s:V3	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:V3 = [ '#ffffff' , '#5f0000' , 15  , 52  ]$/;"	v
s:VimCloseCallback	.vim/plugged/ale/autoload/ale/job.vim	/^function! s:VimCloseCallback(channel) abort$/;"	f
s:VimErrorCallback	.vim/plugged/ale/autoload/ale/job.vim	/^function! s:VimErrorCallback(channel, data) abort$/;"	f
s:VimExitCallback	.vim/plugged/ale/autoload/ale/job.vim	/^function! s:VimExitCallback(job, exit_code) abort$/;"	f
s:VimOutputCallback	.vim/plugged/ale/autoload/ale/job.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital = {}$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital = {}$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:Warn	.vim/plugged/ack.vim/autoload/ack.vim	/^function! s:Warn(msg) "{{{$/;"	f
s:Wq	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Wq(force,...) abort$/;"	f
s:Write	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Write(force,...) abort$/;"	f
s:WriteSourceLinesAgainstList	.vim/plugged/vim-enmasse/autoload/enmasse.vim	/^function! s:WriteSourceLinesAgainstList(list, sourceLines)$/;"	f
s:YankLine	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:YankLine(...)$/;"	f
s:ZoomWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
s:_SID	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^  function! s:_SID() abort$/;"	f
s:_compare	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
s:_compare	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
s:_create_hash	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_create_hash(dir, str) abort$/;"	f
s:_create_hash	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:_create_hash(dir, str) abort$/;"	f
s:_csscolor	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_csscolor   = s:_hexcolor . '\\|' . s:_funcexpr$/;"	v
s:_default_compare	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
s:_default_compare	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
s:_dot_to_sharp	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
s:_dot_to_sharp	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
s:_encode_name	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_encode_name(cache_dir, filename) abort$/;"	f
s:_encode_name	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:_encode_name(cache_dir, filename) abort$/;"	f
s:_exists_autoload_func_with_source	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_exists_autoload_func_with_source(funcname) abort$/;"	f
s:_exists_autoload_func_with_source	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_exists_autoload_func_with_source(funcname) abort$/;"	f
s:_extract_files	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
s:_extract_files	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
s:_file2module	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_file2module(file) abort$/;"	f
s:_file2module	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_file2module(file) abort$/;"	f
s:_funcexpr	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_funcexpr   = s:_funcname . '[(]' . s:_numval . s:_listsep . s:_numval . s:_listsep . s:_n/;"	v
s:_funcname	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_funcname   = '\\(rgb\\|hsl\\)a\\?' " submatch 2$/;"	v
s:_function	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^  function! s:_function(fstr) abort$/;"	f
s:_function	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^  function! s:_function(fstr) abort$/;"	f
s:_getPrefix	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
s:_get_builtin_module	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
s:_get_builtin_module	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
s:_get_module	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_get_module(name) abort dict$/;"	f
s:_get_module	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_get_module(name) abort dict$/;"	f
s:_global_vital_files	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_global_vital_files() abort$/;"	f
s:_global_vital_files	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_global_vital_files() abort$/;"	f
s:_handleOldOptions	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:_hexcolor	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_hexcolor   = '#\\(\\x\\{3}\\|\\x\\{6}\\)\\>' " submatch 1$/;"	v
s:_import	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_import(name) abort dict$/;"	f
s:_import	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_import(name) abort dict$/;"	f
s:_import_func_name	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
s:_import_func_name	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
s:_listsep	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_listsep    = s:_ws_ . ','$/;"	v
s:_module_path	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_module_path(name) abort$/;"	f
s:_module_path	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_module_path(name) abort$/;"	f
s:_module_sid	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_module_sid(name) abort$/;"	f
s:_module_sid	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_module_sid(name) abort$/;"	f
s:_module_sid_base_dir	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
s:_module_sid_base_dir	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
s:_numval	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_numval     = s:_ws_ . '\\(\\d\\{1,3}%\\?\\)' " submatch 3,4,5$/;"	v
s:_otherargs_	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_otherargs_ = '\\%(,[^)]*\\)\\?'$/;"	v
s:_pad_with_char	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
s:_pad_with_char	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
s:_path2project_directory_git	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
s:_path2project_directory_git	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
s:_path2project_directory_others	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
s:_path2project_directory_others	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
s:_path2project_directory_svn	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
s:_path2project_directory_svn	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
s:_plugin_name	.vim/plugged/neocomplete/autoload/vital/_neocomplete.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_plugin_name	.vim/plugged/neosnippet/autoload/vital/_neosnippet.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_redir	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_redir(cmd) abort$/;"	f
s:_redir	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_redir(cmd) abort$/;"	f
s:_replace	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
s:_replace	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
s:_runtime	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_runtime(path) abort$/;"	f
s:_runtime	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_runtime(path) abort$/;"	f
s:_s	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_s	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_self_vital_files	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_self_vital_files() abort$/;"	f
s:_self_vital_files	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_self_vital_files() abort$/;"	f
s:_sfuncname	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
s:_sfuncname	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
s:_sid	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
s:_sid	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
s:_source	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:_source(path) abort$/;"	f
s:_source	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:_source(path) abort$/;"	f
s:_split_by_wcswidth	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
s:_split_by_wcswidth	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
s:_split_by_wcswidth_once	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
s:_split_by_wcswidth_once	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
s:_unify_path	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:_unify_path	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:_unify_path_cache	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:_unify_path_cache	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:_uniq	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^  function! s:_uniq(list) abort$/;"	f
s:_uniq	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^  function! s:_uniq(list) abort$/;"	f
s:_vital_created	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
s:_vital_created	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
s:_vital_depends	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_depends	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_depends	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_depends	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_loaded	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_warn_deprecated	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
s:_warn_deprecated	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
s:_wcwidth	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:_wcwidth	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:_wcwidth	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:_wcwidth	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:_ws_	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:_ws_        = '\\s*'$/;"	v
s:abs	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:abs(v)$/;"	f
s:abstract_prototype	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:abstract_prototype = {}$/;"	v
s:accents	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:accents = {}$/;"	v
s:ack_mappings	.vim/plugged/ack.vim/plugin/ack.vim	/^let s:ack_mappings = {$/;"	v
s:action_table	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^let s:action_table = {}$/;"	v
s:action_table	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^let s:action_table.expand = {$/;"	v
s:action_table	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^let s:action_table.preview = {$/;"	v
s:action_table	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^let s:action_table.unite__new_candidate = {$/;"	v
s:action_table	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^let s:action_table = {}$/;"	v
s:action_table	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^let s:action_table.neosnippet_source = {$/;"	v
s:action_table.expand.func	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^function! s:action_table.expand.func(candidate) abort "{{{$/;"	f
s:action_table.neosnippet_source.func	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^function! s:action_table.neosnippet_source.func(candidates) abort "{{{$/;"	f
s:action_table.preview.func	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^function! s:action_table.preview.func(candidates) abort "{{{$/;"	f
s:action_table.unite__new_candidate.func	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^function! s:action_table.unite__new_candidate.func(candidate) abort "{{{$/;"	f
s:activateAll	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll()$/;"	f
s:activateBookmark	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm)$/;"	f
s:activateDirNode	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(node)$/;"	f
s:activateFileNode	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node)$/;"	f
s:active_cwd	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let s:active_cwd = ''$/;"	v
s:active_cwd_len	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let s:active_cwd_len = 0$/;"	v
s:active_patterns	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let s:active_patterns = []$/;"	v
s:active_winnr	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:active_winnr = -1$/;"	v
s:addChild	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
s:addTag	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
s:add_db	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_methods	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:add_section	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^  function! s:add_section(builder, context, key)$/;"	f
s:add_snippet_attribute	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! s:add_snippet_attribute(snippets_file, line, linenr, snippet_dict) abort "{{{$/;"	f
s:add_snr	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.vim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_tag_recursive	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
s:added_db_files	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addtomrufs	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:addtomrufs(fname)$/;"	f
s:after	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:after()$/;"	f
s:airline_initialized	.vim/plugged/vim-airline/plugin/airline.vim	/^let s:airline_initialized = 0$/;"	v
s:airline_refresh	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_refresh()$/;"	f
s:airline_tagbar_last_lookup_time	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_time = 0$/;"	v
s:airline_tagbar_last_lookup_val	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_val = ''$/;"	v
s:airline_theme	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_theme(...)$/;"	f
s:airline_toggle	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_toggle()$/;"	f
s:align	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:align(bang, live, visualmode, first_line, last_line, expr)$/;"	f
s:all	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
s:all	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
s:alternatePair	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:alternatePair()$/;"	f
s:alternating_modes	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:alternating_modes(mode)$/;"	f
s:and	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:and(xs) abort$/;"	f
s:and	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:and(xs) abort$/;"	f
s:any	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
s:any	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
s:append_group	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:append_group(title, regs)$/;"	f
s:append_ul	.vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:apply_highlight_fix	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_highlight_fix()$/;"	f
s:apply_user_input_next	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_user_input_next(mode)$/;"	f
s:argmaps	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:argmaps(md, i)$/;"	f
s:ars	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:ars = ['s:maxdepth', 's:maxfiles', 's:compare_lim', 's:glob', 's:caching']$/;"	v
s:ask	.vim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	.vim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assert	.vim/plugged/neocomplete/test/neocomplete.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	.vim/plugged/neosnippet/test/functions.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assign_name	.vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	.vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:async_dictionary_list	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^  let s:async_dictionary_list = {}$/;"	v
s:async_dictionary_list	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^  let s:async_dictionary_list = {}$/;"	v
s:async_load	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! s:async_load(argv, cache_dir, filename) abort "{{{$/;"	f
s:async_tags_list	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^  let s:async_tags_list = {}$/;"	v
s:at	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:at(str)$/;"	f
s:atoi	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:atoi(str)$/;"	f
s:attach_autocmds	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! s:attach_autocmds()$/;"	f
s:autocmds	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:autocmds()$/;"	f
s:autocommands_done	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:available	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:available = has('nvim') || ($/;"	v
s:b	.vim/colors/solarized.vim	/^    let s:b           = ""$/;"	v
s:b	.vim/colors/solarized.vim	/^    let s:b           = ",bold"$/;"	v
s:back	.vim/colors/solarized.vim	/^        let s:back    = s:base03$/;"	v
s:back	.vim/colors/solarized.vim	/^    let s:back        = "NONE"$/;"	v
s:back	.vim/colors/solarized.vim	/^    let s:back        = s:back$/;"	v
s:back	.vim/colors/solarized.vim	/^    let s:back        = s:base02$/;"	v
s:back	.vim/colors/solarized.vim	/^    let s:back        = s:base03$/;"	v
s:bad_input	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:bad_input = 0$/;"	v
s:bang	.vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	.vim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "#808080"$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "#839496"$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "12"$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "244"$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = "LightBlue"     " 4*$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = s:base1$/;"	v
s:base0	.vim/colors/solarized.vim	/^    let s:base0       = s:temp00$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "#585858"$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "#657b83"$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "11"$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "240"$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = "LightYellow"   " 3*$/;"	v
s:base00	.vim/colors/solarized.vim	/^    let s:base00      = s:base0$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "#4e4e4e"$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "#586e75"$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "10"$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "239"$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = "LightGreen"    " 2*$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = s:base00$/;"	v
s:base01	.vim/colors/solarized.vim	/^    let s:base01      = s:base1$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "#073642"$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "#262626"$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "0"$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "235"$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = "Black"         " 0$/;"	v
s:base02	.vim/colors/solarized.vim	/^    let s:base02      = s:base2$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "#002b36"$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "#1c1c1c"$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "234"$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "8"$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = "DarkGray"      " 0*$/;"	v
s:base03	.vim/colors/solarized.vim	/^    let s:base03      = s:base3$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "#8a8a8a"$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "#93a1a1"$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "14"$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "245"$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = "LightCyan"     " 6*$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = s:base2$/;"	v
s:base1	.vim/colors/solarized.vim	/^    let s:base1       = s:temp01$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "#d7d7af"$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "#eee8d5"$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "187"$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "7"$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = "LightGray"     " 7$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = s:base3$/;"	v
s:base2	.vim/colors/solarized.vim	/^    let s:base2       = s:temp02$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "#fdf6e3"$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "#ffffd7"$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "15"$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "230"$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = "White"         " 7*$/;"	v
s:base3	.vim/colors/solarized.vim	/^    let s:base3       = s:temp03$/;"	v
s:base_spec	.vim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:basic16	.vim/plugged/vim-airline/autoload/airline/msdos.vim	/^let s:basic16 = [$/;"	v
s:bb	.vim/colors/solarized.vim	/^    let s:bb          = ""$/;"	v
s:bb	.vim/colors/solarized.vim	/^    let s:bb          = ",bold"$/;"	v
s:beep	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
s:before	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:before()$/;"	f
s:before_function_called	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:before_function_called = 0$/;"	v
s:binary_search	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
s:binary_search	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
s:bins	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:bins = [$/;"	v
s:binsert_r	.vim/plugged/vim-misc/autoload/xolox/misc/list.vim	/^function! s:binsert_r(list, low, high, value, ignorecase)$/;"	f
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "#0087ff"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "#268bd2"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "33"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "4"$/;"	v
s:blue	.vim/colors/solarized.vim	/^    let s:blue        = "DarkBlue"      " 4$/;"	v
s:break	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
s:break	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
s:bright	.vim/colors/solarized.vim	/^    let s:bright      = "* term=bold cterm=bold"$/;"	v
s:buf_min_count	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:buf_min_count = get(g:, 'airline#extensions#tabline#buffer_min_count', 0)$/;"	v
s:buf_modified_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_modified_symbol = g:airline_symbols.modified$/;"	v
s:buf_nr_format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_nr_format = get(g:, 'airline#extensions#tabline#buffer_nr_format', '%s: ')$/;"	v
s:buf_nr_show	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_nr_show = get(g:, 'airline#extensions#tabline#buffer_nr_show', 0)$/;"	v
s:buf_peekaboo	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:buf_peekaboo = 0$/;"	v
s:buffer	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer(...) abort$/;"	f
s:buffer_commit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_commit() dict abort$/;"	f
s:buffer_compare_age	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_compare_age(commit) dict abort$/;"	f
s:buffer_containing_commit	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_containing_commit() dict abort$/;"	f
s:buffer_exec	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:buffer_exec(buffer, fn)$/;"	f
s:buffer_expand	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_expand(rev) dict abort$/;"	f
s:buffer_getline	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_getline(lnum) dict abort$/;"	f
s:buffer_getvar	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
s:buffer_highlights	.vim/plugged/ale/autoload/ale/highlight.vim	/^let s:buffer_highlights = {}$/;"	v
s:buffer_idx_mode	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:buffer_idx_mode = get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)$/;"	v
s:buffer_name	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_name() dict abort$/;"	f
s:buffer_path	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_path(...) dict abort$/;"	f
s:buffer_prototype	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_repo	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
s:buffer_restore_map	.vim/plugged/ale/autoload/ale/highlight.vim	/^let s:buffer_restore_map = {}$/;"	v
s:buffer_rev	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_rev() dict abort$/;"	f
s:buffer_seqno	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:buffer_setvar	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
s:buffer_sha1	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_sha1() dict abort$/;"	f
s:buffer_sources	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^  let s:buffer_sources = {}$/;"	v
s:buffer_spec	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:buffer_spec() dict abort$/;"	f
s:buffer_type	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
s:buffer_up	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_up(...) dict abort$/;"	f
s:buffers_label	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:buffers_label = get(g:, 'airline#extensions#tabline#buffers_label', 'buffers')$/;"	v
s:buffers_label	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:buffers_label = get(g:, 'airline#extensions#tabline#buffers_label', 'buffers')$/;"	v
s:buffunc	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buffunc(e)$/;"	f
s:bufnr	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:bufnr       = bufnr('')$/;"	v
s:bufnr_width	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:bufnr_width = 3$/;"	v
s:bufnrfilpath	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:bufnrfilpath(line)$/;"	f
s:bufparts	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:bufparts(bufnr)$/;"	f
s:buftab	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buftab(bufnr, md)$/;"	f
s:bufwins	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:bufwins(bufnr)$/;"	f
s:build_command	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:build_command(cmd)$/;"	f
s:build_dict	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:build_dict(delimiters, ch, regexp, opts)$/;"	f
s:build_mode_sequence	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:build_mode_sequence(expr, recur)$/;"	f
s:build_sections	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:build_sections(builder, context, keys)$/;"	f
s:builder	.vim/plugged/vim-airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 0})$/;"	v
s:builder	.vim/plugged/vim-airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
s:builder	.vim/plugged/vim-airline/t/extensions_default.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
s:buildpat	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buildpat(lst)$/;"	f
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc = {}$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.blackestgravel = ['141413', 232]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.blackgravel    = ['1c1b1a', 233]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.brightgravel   = ['d9cec3', 252]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.coal = ['000000', 0]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.coffee    = ['c7915b', 173]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.dalespale = ['fade3e', 221]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.darkgravel     = ['242321', 235]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.darkroast = ['88633f', 95]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.deepergravel   = ['35322d', 236]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.deepgravel     = ['45413b', 238]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.dirtyblonde = ['f4cf86', 222]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.dress = ['ff9eb8', 211]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.gravel         = ['857f78', 243]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.lightgravel    = ['998f84', 245]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.lime = ['aeee00', 148]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.mediumgravel   = ['666462', 241]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.orange = ['ffa724', 214]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.plain = ['f8f6f2', 15]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.snow = ['ffffff', 15]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.taffy = ['ff2c4b', 197]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.tardis = ['0a9dff', 39]$/;"	v
s:bwc	.vim/colors/badwolf.vim	/^let s:bwc.toffee = ['b88853', 137]$/;"	v
s:byfname	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:byfname()$/;"	f
s:c	.vim/colors/solarized.vim	/^    let s:c               = ",undercurl"$/;"	v
s:c_flag	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:c_flag = gitgutter#utility#git_supports_command_line_config_override()$/;"	v
s:c_like_langs	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:c_like_langs = get(g:, 'airline#extensions#c_like_langs', [ 'c', 'cpp', 'cuda', 'go', 'jav/;"	v
s:cache_project_root	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:cache_sid	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:cache_sid = {}$/;"	v
s:cache_sid	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:cache_sid = {}$/;"	v
s:cached_files	.vim/plugged/neocomplete/autoload/neocomplete/sources/file.vim	/^let s:cached_files = {}$/;"	v
s:cached_map	.vim/plugged/ale/autoload/ale/filetypes.vim	/^let s:cached_map = {}$/;"	v
s:cachefile	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:cachefile()$/;"	f
s:can_diffoff	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
s:can_use_dll	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^let s:can_use_dll = xolox#misc#os#can_use_dll()$/;"	v
s:ccex	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:ccex = s:pref.'clear_cache_on_exit'$/;"	v
s:ceil2	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:ceil2(v)$/;"	f
s:cfile	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:cfile() abort$/;"	f
s:chCwd	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node)$/;"	f
s:chRoot	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node)$/;"	f
s:changed_wildignore	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let s:changed_wildignore = 0$/;"	v
s:changelist	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:changelist(bufnr)$/;"	f
s:changesurround	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
s:channel_log	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:channel_log = s:plugin_dir.'channel.log'$/;"	v
s:char	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:char = ''$/;"	v
s:char_range	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
s:char_range	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
s:check_async_cache	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:check_async_cache(context) abort "{{{$/;"	f
s:check_changed_buffer	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:check_changed_buffer(bufnr) abort "{{{$/;"	f
s:check_defined	.vim/plugged/vim-airline/autoload/airline/init.vim	/^function! s:check_defined(variable, default)$/;"	f
s:check_defined_section	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:check_defined_section(name)$/;"	f
s:check_fallback	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:check_fallback(cur_text) abort "{{{$/;"	f
s:check_force_omni	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:check_force_omni(cur_text) abort "{{{$/;"	f
s:check_in_do_auto_complete	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:check_in_do_auto_complete(event) abort "{{{$/;"	f
s:check_in_path	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:check_in_path()$/;"	f
s:check_mixed_indent	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent()$/;"	f
s:check_mixed_indent_file	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent_file()$/;"	f
s:check_old_cache	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:check_old_cache(cache_dir, filename) abort$/;"	f
s:check_old_cache	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:check_old_cache(cache_dir, filename) abort$/;"	f
s:check_ruby	.vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:check_source	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:check_source() abort "{{{$/;"	f
s:checkbuf	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:checkbuf()$/;"	f
s:checked_ctags	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:checkout	.vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chknearby	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:chknearby(pat)$/;"	f
s:choices	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:choices(str, choices, func, args)$/;"	f
s:chomp	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
s:chomp	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
s:chop	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:chop(mrufs)$/;"	f
s:chop	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
s:chop	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
s:chsh	.vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:classpath_sep	.vim/plugged/ale/ale_linters/java/javac.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:classpath_sep	.vim/plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:clean	.vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clean	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:clean() abort "{{{$/;"	f
s:clear	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:clear(list) abort$/;"	f
s:clear	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:clear(list) abort$/;"	f
s:clear	.vim/plugged/vim-airline/t/init.vim	/^function! s:clear()$/;"	f
s:clearOldFolds	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
s:clear_matches	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:clear_matches()$/;"	f
s:clear_message	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^function! s:clear_message() " {{{1$/;"	f
s:close	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:close()$/;"	f
s:closeChildren	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node)$/;"	f
s:closeCurrentDir	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node)$/;"	f
s:closeFold	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeFold	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeKindFold	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
s:closeTreeWindow	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow()$/;"	f
s:close_preview_window	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:close_preview_window() abort "{{{$/;"	f
s:close_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:close_symbol = get(g:, 'airline#extensions#tabline#close_symbol', 'X')$/;"	v
s:closematch	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
s:cluster	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^func! s:cluster()$/;"	f
s:cm	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:cm = s:CursorManager.new()$/;"	v
s:coerce_argument	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^function! s:coerce_argument(value) " {{{1$/;"	f
s:coffeeIndentExpr	.vim/plugged/vim-coffee-script/after/indent/html.vim	/^let s:coffeeIndentExpr = &l:indentexpr$/;"	v
s:col_end_patterns	.vim/plugged/ale/ale_linters/javascript/eslint.vim	/^let s:col_end_patterns = [$/;"	v
s:color_bright	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:color_bright  = {}$/;"	v
s:color_idx	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:color_idx = {}$/;"	v
s:color_template	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^let s:color_template = get(g:, 'airline#extensions#ctrlp#color_template', 'insert')$/;"	v
s:color_template	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:color_template = get(g:, 'airline#extensions#promptline#color_template', 'normal')$/;"	v
s:color_template	.vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:color_template = get(g:, 'airline#extensions#tmuxline#color_template', 'normal')$/;"	v
s:colorscheme_list	.vim/colors/solarized.vim	/^let s:colorscheme_list=[$/;"	v
s:column_display	.vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^let s:column_display = get(g:, 'airline#extensions#csv#column_display', 'Number')$/;"	v
s:combinations	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
s:combinations	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
s:command	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:command(definition) abort$/;"	f
s:commands	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:commands = []$/;"	v
s:common_efm	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:common_efm = ''$/;"	v
s:common_head	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
s:common_head	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
s:compact_options	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:compact_options(opts)$/;"	f
s:compare	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^function! s:compare(i1, i2) abort$/;"	f
s:compare	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^function! s:compare(i1, i2) abort$/;"	f
s:compare_by_kind	.vim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
s:compare_by_line	.vim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
s:compare_git_uri	.vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_pos	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:compare_pos(l, r)$/;"	f
s:compare_source_rank	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! s:compare_source_rank(i1, i2) abort$/;"	f
s:compare_typeinfo	.vim/plugged/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:comparent	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comparent(...)$/;"	f
s:compfnlen	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compfnlen(...)$/;"	f
s:complete_delay	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:complete_delay(timer) abort "{{{$/;"	f
s:complete_key	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:complete_key(key) abort "{{{$/;"	f
s:compmatlen	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmatlen(...)$/;"	f
s:compmreb	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmreb(...)$/;"	f
s:compmref	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmref(...)$/;"	f
s:comptime	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comptime(...)$/;"	f
s:compval	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compval(...)$/;"	f
s:compval	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:compval(...)$/;"	f
s:concat	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:concat(list) abort$/;"	f
s:concat	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:concat(list) abort$/;"	f
s:concealends	.vim/plugged/vim-markdown/syntax/markdown.vim	/^  let s:concealends = ' concealends'$/;"	v
s:concealends	.vim/plugged/vim-markdown/syntax/markdown.vim	/^let s:concealends = ''$/;"	v
s:configured_tree	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:configured_tree(git_dir) abort$/;"	f
s:conj	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
s:conj	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
s:connections	.vim/plugged/ale/autoload/ale/lsp.vim	/^let s:connections = []$/;"	v
s:cons	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
s:cons	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
s:contains_multibyte	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
s:contains_multibyte	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
s:contexts	.vim/plugged/vim-airline/autoload/airline.vim	/^let s:contexts = {}$/;"	v
s:continuation	.vim/plugged/vim-javascript/indent/javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
s:continues	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:continues(ln,con)$/;"	f
s:converter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_abbr.vim	/^let s:converter = {$/;"	v
s:converter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_add_paren.vim	/^let s:converter = {$/;"	v
s:converter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_case.vim	/^let s:converter = {$/;"	v
s:converter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^let s:converter = {$/;"	v
s:converter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_disable_abbr.vim	/^let s:converter = {$/;"	v
s:converter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^let s:converter = {$/;"	v
s:converter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^let s:converter = {$/;"	v
s:converter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_abbr.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:converter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_add_paren.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:converter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_case.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:converter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:converter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_disable_abbr.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:converter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:converter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:core_funcrefs	.vim/plugged/vim-airline/autoload/airline.vim	/^let s:core_funcrefs = [$/;"	v
s:coretype_names	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:coretype_names = {$/;"	v
s:coretypes	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:coretypes = map(copy(g:ctrlp_types), '[s:coretype_names[v:val], v:val]')$/;"	v
s:count	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:count(index)$/;"	f
s:cpath	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:cpath(path) abort$/;"	f
s:cpo_save	.vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.vim/plugged/vim-javascript/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.vim/plugged/vim-sneak/plugin/sneak.vim	/^let s:cpo_save = &cpo$/;"	v
s:create	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! s:create(parts, append)$/;"	f
s:createKinddict	.vim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
s:create_highlight	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	function! s:create_highlight(color, is_bright)$/;"	f
s:create_matches	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:create_matches()$/;"	f
s:create_pseudotag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
s:create_syn_match	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:create_syn_match()$/;"	f
s:ctags_is_uctags	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:ctrlspace	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:ctrlspace = get(g:, 'CtrlSpaceLoaded', 0)$/;"	v
s:cubergb	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:cubergb = [ 0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF ]$/;"	v
s:current_bufnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_bufnr = -1$/;"	v
s:current_dir	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:current_dir = expand('%:p:h')$/;"	v
s:current_modified	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_modified = 0$/;"	v
s:current_syntax_save	.vim/plugged/vim-coffee-script/after/syntax/haml.vim	/^  let s:current_syntax_save = b:current_syntax$/;"	v
s:current_syntax_save	.vim/plugged/vim-coffee-script/after/syntax/html.vim	/^  let s:current_syntax_save = b:current_syntax$/;"	v
s:current_tabcnt	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:current_tabcnt = -1$/;"	v
s:current_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_tabnr = -1$/;"	v
s:current_visible_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_visible_buffers = []$/;"	v
s:cursor_timer	.vim/plugged/ale/autoload/ale/cursor.vim	/^let s:cursor_timer = -1$/;"	v
s:curtype	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:curtype()$/;"	f
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "#00afaf"$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "#2aa198"$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "37"$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "6"$/;"	v
s:cyan	.vim/colors/solarized.vim	/^    let s:cyan        = "DarkCyan"      " 6$/;"	v
s:dbgfeat	.vim/plugged/vim-sneak/autoload/sneak/debug.vim	/^func! s:dbgfeat(featurename)$/;"	f
s:dbgflag	.vim/plugged/vim-sneak/autoload/sneak/debug.vim	/^func! s:dbgflag(settingname)$/;"	f
s:dbgfunc	.vim/plugged/vim-sneak/autoload/sneak/debug.vim	/^func! s:dbgfunc(funcname)$/;"	f
s:debug_enabled	.vim/plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	.vim/plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:default_ale_linter_aliases	.vim/plugged/ale/autoload/ale/linter.vim	/^let s:default_ale_linter_aliases = {$/;"	v
s:default_ale_linters	.vim/plugged/ale/autoload/ale/linter.vim	/^let s:default_ale_linters = {$/;"	v
s:default_checks	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:default_checks = ['indent', 'trailing', 'mixed-indent-file']$/;"	v
s:default_color	.vim/plugged/vim-sneak/autoload/sneak/hl.vim	/^func! s:default_color(hlgroup, what, mode) abort$/;"	f
s:default_compact	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:default_compact = 0$/;"	v
s:default_delay	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:default_delay = 0$/;"	v
s:default_insert_maps	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_insert_maps = {}$/;"	v
s:default_normal_maps	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_normal_maps = {'!':1, '@':1, '=':1, 'q':1, 'r':1, 't':1, 'T':1, 'y':1, '[':1, ']':/;"	v
s:default_options	.vim/plugged/ale/ale_linters/html/tidy.vim	/^let s:default_options = get(g:, 'ale_html_tidy_args', '-q -e -language en')$/;"	v
s:default_options	.vim/plugged/ale/ale_linters/python/flake8.vim	/^let s:default_options = get(g:, 'ale_python_flake8_args', '')$/;"	v
s:default_registry	.vim/plugged/ale/autoload/ale/fix/registry.vim	/^let s:default_registry = {$/;"	v
s:default_visual_maps	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_visual_maps = {'i':1, 'a':1, 'f':1, 'F':1, 't':1, 'T':1}$/;"	v
s:default_window	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:default_window = 'vertical botright 30new'$/;"	v
s:defaults_list	.vim/colors/solarized.vim	/^let s:defaults_list=[$/;"	v
s:define_commands	.vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:define_commands	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:define_commands() abort$/;"	f
s:delayed_update_files	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:delbuf	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:delbuf()$/;"	f
s:delbufcond	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:delbufcond(bufnr)$/;"	f
s:delent	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:delent(rfunc)$/;"	f
s:delete	.vim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:delete(cache_dir, filename) abort$/;"	f
s:delete	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:delete(cache_dir, filename) abort$/;"	f
s:deleteBookmark	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bm)$/;"	f
s:delete_op	.vim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:deletefile	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:deletefile(cache_dir, filename) abort$/;"	f
s:deletefile	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:deletefile(cache_dir, filename) abort$/;"	f
s:delimit_output	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! s:delimit_output() " {{{1$/;"	f
s:delimiterMap	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let s:delimiterMap = {$/;"	v
s:detect_bad_input	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:detect_bad_input()$/;"	f
s:dict2list	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:dict2list(dict)$/;"	f
s:dictindex	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dictindex(dict, expr)$/;"	f
s:dictionary_cache	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^  let s:dictionary_cache = {}$/;"	v
s:did_check_exe	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff	.vim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:diff_modifier	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
s:diff_restore	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
s:diff_window_count	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
s:diffidx	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
s:diffidx	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
s:diffoff	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diffoff() abort$/;"	f
s:diffoff_all	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
s:diffthis	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diffthis() abort$/;"	f
s:dirArrows	.vim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpand/;"	v
s:dir_for_worktree	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:dircompl	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dircompl(be, sd)$/;"	f
s:dircounts	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:dircounts = {}$/;"	v
s:dirpath	.vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:disable_conceal_in_other_windows	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:disable_conceal_in_other_windows()$/;"	f
s:dismrk	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dismrk()$/;"	f
s:displayHelp	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp()$/;"	f
s:display_error	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:display_error()$/;"	f
s:do	.vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doWhile	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:doWhile()$/;"	f
s:do_align	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:do_align(todo, modes, all_tokens, all_delims, fl, ll, fc, lc, nth, recur, dict)$/;"	f
s:do_auto_complete	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:do_auto_complete(event) abort "{{{$/;"	f
s:do_delayed_update	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
s:do_label	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:do_label(s, v, reverse) "{{{$/;"	f
s:doautocmd	.vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	.vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:dohighlight	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dohighlight()$/;"	f
s:done	.vim/plugged/vim-gitgutter/test/runner.vim	/^  let s:done += 1$/;"	v
s:done	.vim/plugged/vim-gitgutter/test/runner.vim	/^let s:done = 0$/;"	v
s:done_include	.vim/plugged/vim-markdown/syntax/markdown.vim	/^    let s:done_include[matchstr(s:type,'[^.]*')] = 1$/;"	v
s:done_include	.vim/plugged/vim-markdown/syntax/markdown.vim	/^  let s:done_include = {}$/;"	v
s:done_include	.vim/plugged/vim-markdown/syntax/markdown.vim	/^  let s:done_include[matchstr(s:type,'[^.]*')] = 1$/;"	v
s:done_include	.vim/plugged/vim-markdown/syntax/markdown.vim	/^let s:done_include = {}$/;"	v
s:dosigns	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dosigns()$/;"	f
s:dosurround	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
s:dstring	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
s:dstring	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
s:dummy_sign_id	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:dummy_sign_id = s:first_sign_id - 1$/;"	v
s:easy_align_delimiters_default	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:easy_align_delimiters_default = {$/;"	v
s:easy_align_op	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:easy_align_op(type, ...)$/;"	f
s:easy_align_repeat	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:easy_align_repeat()$/;"	f
s:echon	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:echon(l, n, r, d, o, warn)$/;"	f
s:echon_	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:echon_(tokens)$/;"	f
s:edit_options	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^let s:edit_options = [$/;"	v
s:editorconfig_core_mode	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^            let s:editorconfig_core_mode = 'external_command'$/;"	v
s:editorconfig_core_mode	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^        let s:editorconfig_core_mode = 'external_command'$/;"	v
s:editorconfig_core_mode	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^        let s:editorconfig_core_mode = 'python_builtin'$/;"	v
s:editorconfig_core_mode	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^        let s:editorconfig_core_mode = 'python_external'$/;"	v
s:editorconfig_core_mode	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let s:editorconfig_core_mode = ''$/;"	v
s:editorconfig_core_mode	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let s:editorconfig_core_mode = g:EditorConfig_core_mode$/;"	v
s:editorconfig_core_py_dir	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^        let s:editorconfig_core_py_dir = s:FindPythonFiles()$/;"	v
s:editorconfig_core_py_dir	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let s:editorconfig_core_py_dir = s:FindPythonFiles()$/;"	v
s:elapsed	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:elapsed(nr)$/;"	f
s:emoji_code	.vim/plugged/vim-emoji/autoload/emoji/data.vim	/^let s:emoji_code = {$/;"	v
s:enable_neovim	.vim/plugged/ale/ale_linters/vim/vint.vim	/^let s:enable_neovim = has('nvim') ? ' --enable-neovim ' : ''$/;"	v
s:enabled	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:enabled = get(g:, 'airline#extensions#whitespace#enabled', 1)$/;"	v
s:enabled_completed_snippet	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! s:enabled_completed_snippet() abort "{{{$/;"	f
s:end_latency_measure	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:end_latency_measure()$/;"	f
s:ends_with	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
s:ends_with	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
s:enoimpl	.vim/plugged/vim-misc/autoload/xolox/misc/open.vim	/^let s:enoimpl = "vim-misc %s: %s() hasn't been implemented for your platform! If you have sugges/;"	v
s:err	.vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:error_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^let s:error_symbol = get(g:, 'airline#extensions#ale#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:error_symbol = get(g:, 'airline#extensions#neomake#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:error_symbol = get(g:, 'airline#extensions#ycm#error_symbol', 'E:')$/;"	v
s:errored	.vim/plugged/vim-gitgutter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:errored	.vim/plugged/vim-gitgutter/test/runner.vim	/^let s:errored = 0$/;"	v
s:errors	.vim/plugged/vim-gitgutter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errors	.vim/plugged/vim-gitgutter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:errors	.vim/plugged/vim-gitgutter/test/runner.vim	/^let s:errors = 0$/;"	v
s:esc	.vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escape	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! s:escape(path) abort"{{{$/;"	f
s:escape	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! s:escape(s)$/;"	f
s:escape_file_searching	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
s:escape_file_searching	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
s:escape_pattern	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escape_pattern	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escape_pattern	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escape_pattern	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escape_tags	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! s:escape_tags(s)$/;"	f
s:escrtp	.vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:esctagscmd	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:esctagscmd(bin, args, ...)$/;"	f
s:eval_snippet	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! s:eval_snippet(snippet_text) abort "{{{$/;"	f
s:excl	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:excl(fn)$/;"	f
s:exec_separator	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:exec_separator(dict, from, to, inverse, suffix)$/;"	f
s:execextvar	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:execextvar(key)$/;"	f
s:exectags	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectags(cmd)$/;"	f
s:exectagsonfile	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectagsonfile(fname, ftype)$/;"	f
s:executable_cache_map	.vim/plugged/ale/autoload/ale/engine.vim	/^let s:executable_cache_map = {}$/;"	v
s:exists	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:exists(name) abort dict$/;"	f
s:exists	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:exists(name) abort dict$/;"	f
s:exists_context_filetype	.vim/plugged/neocomplete/autoload/neocomplete/context_filetype.vim	/^  let s:exists_context_filetype = exists('*context_filetype#version')$/;"	v
s:exists_current_source	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:exists_current_source() abort "{{{$/;"	f
s:exit	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:exit(msg)$/;"	f
s:exit	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit()$/;"	f
s:exit_code	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:exit_code = 0$/;"	v
s:exit_visual_mode	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit_visual_mode()$/;"	f
s:expand_bufnr	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:expand_placeholder	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! s:expand_placeholder(start, end, holder_cnt, line, ...) abort "{{{$/;"	f
s:expand_target_placeholder	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! s:expand_target_placeholder(line, col) abort "{{{$/;"	f
s:expr_col	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:expr_col()$/;"	f
s:ext	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext = {}$/;"	v
s:ext	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext._theme_funcrefs = []$/;"	v
s:ext.add_inactive_statusline_func	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_inactive_statusline_func(name) dict$/;"	f
s:ext.add_statusline_func	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_func(name) dict$/;"	f
s:ext.add_statusline_funcref	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_funcref(function) dict$/;"	f
s:ext.add_theme_func	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_theme_func(name) dict$/;"	f
s:extend	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^func! s:extend()$/;"	f
s:extract_name	.vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:extractafter	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
s:extractbefore	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
s:fail	.vim/plugged/vim-gitgutter/test/runner.vim	/^      let s:fail += 1$/;"	v
s:fail	.vim/plugged/vim-gitgutter/test/runner.vim	/^let s:fail = 0$/;"	v
s:feed	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:feed(count, mode, reg, rest)$/;"	f
s:feedkeys	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:feedkeys(keys)$/;"	f
s:fg_pdef	.vim/colors/solarized.vim	/^let s:fg_pdef = s:fg_violet$/;"	v
s:fg_phead	.vim/colors/solarized.vim	/^let s:fg_phead = s:fg_orange$/;"	v
s:fg_ptable	.vim/colors/solarized.vim	/^let s:fg_ptable = s:fg_blue$/;"	v
s:ficounts	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:ficounts = {}$/;"	v
s:file	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:file = ''$/;"	v
s:filecounts	.vim/plugged/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:filecounts = {}$/;"	v
s:filereadable	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:filereadable(cache_dir, filename) abort$/;"	f
s:filereadable	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:filereadable(cache_dir, filename) abort$/;"	f
s:filetype_overrides	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_overrides = {$/;"	v
s:filetype_regex_overrides	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_regex_overrides = {}$/;"	v
s:filter	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:filter(tags)$/;"	f
s:find	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
s:find	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
s:findAndRevealPath	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath()$/;"	f
s:find_index	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
s:find_index	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
s:find_indices	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
s:find_indices	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
s:find_last_index	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
s:find_last_index	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
s:find_name	.vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_next	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:find_next(text)$/;"	f
s:findcommon	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findcommon(items, seed)$/;"	f
s:findcount	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:findcount(str, tgaddr)$/;"	f
s:findroot	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findroot(curr, mark, depth, type)$/;"	f
s:finish	.vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	.vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_rtp	.vim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:first_sign_id	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:first_sign_id = 3000$/;"	v
s:fixindent	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
s:flags	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:flags = get(g:, 'airline#extensions#tagbar#flags', '')$/;"	v
s:flatten	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:flatten(tree, cur)$/;"	f
s:flatten	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
s:flatten	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
s:floor2	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:floor2(v)$/;"	f
s:fnamecollapse	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)$/;"	v
s:fnameescape	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnametruncate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:fnametruncate = get(g:, 'airline#extensions#tabline#fnametruncate', 0)$/;"	v
s:fnesc	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:fnesc(...)$/;"	f
s:foldl	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
s:foldl	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
s:foldl1	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
s:foldl1	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
s:foldr	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
s:foldr	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
s:foldr1	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
s:foldr1	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
s:format	.vim/plugged/ale/ale_linters/vim/vint.vim	/^let s:format = '-f "{file_path}:{line_number}:{column_number}: {severity}: {description} (see {r/;"	v
s:format	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:format(...)$/;"	f
s:format	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:format = get(g:, 'airline#extensions#wordcount#format', '%d words')$/;"	v
s:format_for_log	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:format_for_log(data) abort$/;"	f
s:format_git_log	.vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_message	.vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_name	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
s:formatline	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:formatline(str)$/;"	f
s:formatter	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:formatter = get(g:, 'airline#extensions#tabline#formatter', 'default')$/;"	v
s:formatter	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:formatter = get(g:, 'airline#extensions#wordcount#formatter', 'default')$/;"	v
s:formatul	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:formatul(...)$/;"	f
s:fpats	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:fpats = {$/;"	v
s:from_mode	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:from_mode = ''$/;"	v
s:ft_hook	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! s:ft_hook() "set up temporary mappings to 'hook' into f\/F\/t\/T$/;"	f
s:function	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:function(name) abort$/;"	f
s:fuzzy_lu	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:fuzzy_lu(key)$/;"	f
s:generic_easy_align_op	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:generic_easy_align_op(type, vmode, live)$/;"	f
s:get	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
s:getChildren	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
s:getChildrenByName	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
s:getClosedParentTline	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
s:getKind	.vim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
s:getPrototype	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	.vim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getTags	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
s:getTagsByName	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
s:get_accented_line	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_accented_line(self, group, contents)$/;"	f
s:get_airline_themes	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:get_airline_themes(a, l, p)$/;"	f
s:get_array	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:get_array(fg, bg, opts)$/;"	f
s:get_candidates	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:get_candidates(complete_results, complete_pos, complete_str) abort "{{{$/;"	f
s:get_char	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_char()$/;"	f
s:get_complete_pos	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:get_complete_pos(complete_results) abort "{{{$/;"	f
s:get_convert_candidates	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_case.vim	/^function! s:get_convert_candidates(candidates) abort$/;"	f
s:get_ctags_executable	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_decimal_group	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! s:get_decimal_group()$/;"	f
s:get_glob_files	.vim/plugged/neocomplete/autoload/neocomplete/sources/file.vim	/^function! s:get_glob_files(complete_str, path) abort "{{{$/;"	f
s:get_hunks	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks()$/;"	f
s:get_hunks_changes	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_changes()$/;"	f
s:get_hunks_empty	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_empty()$/;"	f
s:get_hunks_gitgutter	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitgutter()$/;"	f
s:get_hunks_signify	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_signify()$/;"	f
s:get_keyword_pos	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^function! s:get_keyword_pos(cur_text) abort "{{{$/;"	f
s:get_last_status	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:get_last_status() abort$/;"	f
s:get_last_status	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^function! s:get_last_status() abort$/;"	f
s:get_list	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! s:get_list() abort "{{{$/;"	f
s:get_list	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! s:get_list() abort "{{{$/;"	f
s:get_list	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! s:get_list() abort "{{{$/;"	f
s:get_map_str	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
s:get_member_list	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:get_member_list(context, cur_text, var_name) abort "{{{$/;"	f
s:get_member_pattern	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:get_member_pattern(filetype) abort "{{{$/;"	f
s:get_mq_async	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:get_mq_async(cmd, file)$/;"	f
s:get_ms_since	.vim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! s:get_ms_since(time)$/;"	f
s:get_msgfmt_stat_async	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^  function! s:get_msgfmt_stat_async(cmd, file)$/;"	f
s:get_omni_funcs	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:get_omni_funcs(filetype) abort "{{{$/;"	f
s:get_omni_list	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:get_omni_list(list) abort "{{{$/;"	f
s:get_prelude	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! s:get_prelude() abort "{{{$/;"	f
s:get_prelude	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! s:get_prelude() abort "{{{$/;"	f
s:get_prev_group	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_prev_group(sections, i)$/;"	f
s:get_process	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! s:get_process() abort "{{{$/;"	f
s:get_process	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! s:get_process() abort "{{{$/;"	f
s:get_project_patterns	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^function! s:get_project_patterns(root_dir) abort$/;"	f
s:get_section	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:get_section(winnr, key, ...)$/;"	f
s:get_seperator	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_seperator(self, prev_group, group, side)$/;"	f
s:get_snippet_candidates	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^function! s:get_snippet_candidates(dirs) abort "{{{$/;"	f
s:get_snippet_files	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! s:get_snippet_files(path, filetype) abort "{{{$/;"	f
s:get_snippets_files	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! s:get_snippets_files(path, filetype) abort "{{{$/;"	f
s:get_sources_filetypes	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! s:get_sources_filetypes(filetype) abort "{{{$/;"	f
s:get_sources_list	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:get_sources_list(context) abort "{{{$/;"	f
s:get_sources_list	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:get_sources_list(context) abort "{{{$/;"	f
s:get_string	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^function! s:get_string() abort "{{{$/;"	f
s:get_string	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^function! s:get_string() abort "{{{$/;"	f
s:get_syn	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:get_syn(group, what)$/;"	f
s:get_text	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! s:get_text()$/;"	f
s:get_text	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_text(region)$/;"	f
s:get_transitioned_seperator	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_transitioned_seperator(self, prev_group, group, side)$/;"	f
s:get_unix_cmd	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:get_unix_cmd(for_job, proj_options, db_path) abort$/;"	f
s:get_vcs_untracked_async	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:get_vcs_untracked_async(config, file)$/;"	f
s:get_visible_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:get_visible_buffers()$/;"	f
s:get_visual_region	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_visual_region(pos)$/;"	f
s:get_win32_cmd	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:get_win32_cmd(for_job, proj_options, db_path) abort$/;"	f
s:getbookmarks	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getbookmarks()$/;"	f
s:getchar	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:getchar(...) abort$/;"	f
s:getchar	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:getchar(...) abort$/;"	f
s:getchar	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
s:getchar_safe	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
s:getchar_safe	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
s:getenv	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getenv()$/;"	f
s:getextvar	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getextvar(key)$/;"	f
s:getfilename	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:getfilename(cache_dir, filename) abort$/;"	f
s:getfilename	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:getfilename(cache_dir, filename) abort$/;"	f
s:gethistdata	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistdata()$/;"	f
s:gethistloc	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistloc()$/;"	f
s:getinput	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getinput(...)$/;"	f
s:getinput	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getinput(str, ...)$/;"	f
s:getnchars	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! s:getnchars(n, mode)$/;"	f
s:getnewmix	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:getnewmix(cwd, clim)$/;"	f
s:getparent	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getparent(item)$/;"	f
s:getpos	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:getpos()$/;"	f
s:getregs	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getregs()$/;"	f
s:gettime	.vim/plugged/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
s:getundo	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:getundo()$/;"	f
s:git_command	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:git_command() abort$/;"	f
s:git_diff	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff()$/;"	f
s:git_diff_staged	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff_staged()$/;"	f
s:git_dirs	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:git_dirs = {}$/;"	v
s:git_validate	.vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	.vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_versions	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:github_url	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:github_url(opts, ...) abort$/;"	f
s:glbpath	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:glbpath(...)$/;"	f
s:glbs	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,$/;"	v
s:glob	.vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
s:glob	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
s:glob_dir	.vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:global_variable_list	.vim/plugged/ale/autoload/ale/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:globdirs	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:globdirs(dirs, depth)$/;"	f
s:globpath	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:globpath(path, expr) abort$/;"	f
s:globpath	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:globpath(path, expr) abort$/;"	f
s:go	.vim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:go(type,...) abort$/;"	f
s:goto_markedwin	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
s:goto_tagbar	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
s:goto_win	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
s:green	.vim/colors/solarized.vim	/^    let s:green       = "#5f8700"$/;"	v
s:green	.vim/colors/solarized.vim	/^    let s:green       = "#719e07" "experimental$/;"	v
s:green	.vim/colors/solarized.vim	/^    let s:green       = "2"$/;"	v
s:green	.vim/colors/solarized.vim	/^    let s:green       = "64"$/;"	v
s:green	.vim/colors/solarized.vim	/^    let s:green       = "DarkGreen"     " 2$/;"	v
s:grep_available	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^  let s:grep_available = 1$/;"	v
s:grep_available	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^  let s:grep_available = executable('grep')$/;"	v
s:grep_command	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^      let s:grep_command .= ' --color=never'$/;"	v
s:grep_command	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^    let s:grep_command = 'grep'$/;"	v
s:grep_command	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^  let s:grep_command = g:gitgutter_grep_command$/;"	v
s:group_by	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
s:group_by	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
s:gsub	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:gui2cui	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:gui2cui(rgb, fallback)$/;"	f
s:gutter	.vim/colors/badwolf.vim	/^    let s:gutter = 'blackestgravel'$/;"	v
s:gutter	.vim/colors/badwolf.vim	/^    let s:gutter = 'blackgravel'$/;"	v
s:gv	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:gv(visualmode, visible)$/;"	f
s:handleLeftClick	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick()$/;"	f
s:handleMiddleMouse	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse()$/;"	f
s:handle_error	.vim/plugged/vim-misc/autoload/xolox/misc/open.vim	/^function! s:handle_error(cmd, output) " {{{1$/;"	f
s:handle_special_key	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_special_key(key, mode)$/;"	f
s:handle_visual_IA_to_insert	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_insert()$/;"	f
s:handle_visual_IA_to_normal	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_normal()$/;"	f
s:handlers	.vim/plugged/vim-misc/autoload/xolox/misc/open.vim	/^let s:handlers = ['gnome-open', 'kde-open', 'exo-open', 'xdg-open', 'cygstart']$/;"	v
s:has	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
s:has	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
s:has_async	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:has_async = airline#util#async$/;"	v
s:has_async	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^let s:has_async = airline#util#async$/;"	v
s:has_common_items	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
s:has_common_items	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
s:has_conceal	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:has_conceal = has('conceal')$/;"	v
s:has_features	.vim/plugged/ale/plugin/ale.vim	/^    let s:has_features = has('timers') && exists('*job_start') && exists('*ch_close_in')$/;"	v
s:has_features	.vim/plugged/ale/plugin/ale.vim	/^    let s:has_features = has('timers')$/;"	v
s:has_fugitive	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:has_fugitive = exists('*fugitive#head')$/;"	v
s:has_index	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
s:has_index	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
s:has_lawrencium	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:has_lawrencium = exists('*lawrencium#statusline')$/;"	v
s:has_reltime	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^let s:has_reltime = has('reltime')$/;"	v
s:has_vcscommand	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:has_vcscommand = get(g:, 'airline#extensions#branch#use_vcscommand', 0) && exists('*VCSCom/;"	v
s:has_vimproc	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:has_vimproc() abort$/;"	f
s:has_vimproc	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^function! s:has_vimproc() abort$/;"	f
s:hash	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:hash(str) abort$/;"	f
s:hash	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:hash(str) abort$/;"	f
s:hash_colors	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:hash_match	.vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:head_format	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:head_format = get(g:, 'airline#extensions#branch#format', 0)$/;"	v
s:headntail	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:headntail(str)$/;"	f
s:hex	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:hex[ printf( '%02x', i ) ] = i$/;"	v
s:hex	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:hex={}$/;"	v
s:hi_group_cursor	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_cursor = 'multiple_cursors_cursor'$/;"	v
s:hi_group_visual	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_visual = 'multiple_cursors_visual'$/;"	v
s:highlight	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:highlight(pat, grp)$/;"	f
s:highlight_cursor	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_cursor(pos)$/;"	f
s:highlight_region	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_region(region)$/;"	f
s:highlighted_as	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:highlighted_as(line, col, groups)$/;"	f
s:hlgrps	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:hlgrps = {$/;"	v
s:hook_list	.vim/plugged/editorconfig-vim/autoload/editorconfig.vim	/^let s:hook_list = []$/;"	v
s:hsl2color	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:hsl2color(h,s,l)$/;"	f
s:htmlIndentExpr	.vim/plugged/vim-coffee-script/after/indent/html.vim	/^let s:htmlIndentExpr = &l:indentexpr$/;"	v
s:hunk_re	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:hunk_re = '^@@ -\\(\\d\\+\\),\\?\\(\\d*\\) +\\(\\d\\+\\),\\?\\(\\d*\\) @@'$/;"	v
s:hunk_symbols	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:hunk_symbols = get(g:, 'airline#extensions#hunks#hunk_symbols', ['+', '~', '-'])$/;"	v
s:i	.vim/colors/solarized.vim	/^    let s:i           = ""$/;"	v
s:i	.vim/colors/solarized.vim	/^    let s:i           = ",italic"$/;"	v
s:iconv	.vim/plugged/neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:iconv	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:iconv	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:iconv	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:iconv	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:ics	.vim/plugged/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/line.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:ifilter	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ifilter(list, str)$/;"	f
s:ignore	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ignore()$/;"	f
s:ignore_bufadd_pat	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:ignore_bufadd_pat = get(g:, 'airline#extensions#tabline#ignore_bufadd_pat', '\\c\\vgundo|u/;"	v
s:ignored_syntax	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:ignored_syntax()$/;"	f
s:import	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:import(name, ...) abort dict$/;"	f
s:import	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:import(name, ...) abort dict$/;"	f
s:inactive_funcrefs	.vim/plugged/vim-airline/autoload/airline.vim	/^let s:inactive_funcrefs = []$/;"	v
s:indent	.vim/plugged/vim-gitgutter/test/runner.vim	/^let s:indent = ''$/;"	v
s:indent	.vim/plugged/vim-gitgutter/test/runner.vim	/^let s:indent = max(map(copy(s:tests), {_, val -> len(FriendlyName(val))}))$/;"	v
s:indent_algo	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:indent_algo = get(g:, 'airline#extensions#whitespace#mixed_indent_algo', 0)$/;"	v
s:indent_current_line	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:indent_current_line() abort "{{{$/;"	f
s:indent_snippet	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! s:indent_snippet(begin, end) abort "{{{$/;"	f
s:infer_properties	.vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:init	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:init()$/;"	f
s:init	.vim/plugged/vim-sneak/autoload/sneak/hl.vim	/^func! s:init() abort$/;"	f
s:initFoldState	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
s:initVariable	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
s:init_buffer	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:init_buffer()$/;"	f
s:init_done	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:init_settings	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^function! s:init_settings(settings)$/;"	f
s:init_var	.vim/plugged/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
s:initialize_cache	.vim/plugged/neosnippet/autoload/neosnippet/init.vim	/^function! s:initialize_cache() abort "{{{$/;"	f
s:initialize_options	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^function! s:initialize_options(options) abort "{{{$/;"	f
s:initialize_others	.vim/plugged/neosnippet/autoload/neosnippet/init.vim	/^function! s:initialize_others() abort "{{{$/;"	f
s:initialize_source	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:initialize_source(srcname) abort "{{{$/;"	f
s:initialize_source	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:initialize_source(srcname, filetype) abort "{{{$/;"	f
s:initialize_tags	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^function! s:initialize_tags(filename) abort "{{{$/;"	f
s:input	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:input(str, default, vis)$/;"	f
s:input_helper	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
s:input_helper	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
s:input_safe	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
s:input_safe	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
s:inputreplacement	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
s:inputtarget	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
s:insert	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
s:insertcache	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertcache(str)$/;"	f
s:insertstr	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertstr()$/;"	f
s:install	.vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:instaweb_url	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:instaweb_url(opts) abort$/;"	f
s:interactive	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:interactive(range, modes, n, d, opts, rules, vis, bvis)$/;"	f
s:interactive_modes	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:interactive_modes(bang)$/;"	f
s:intersect	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
s:intersect	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
s:invoke_funcrefs	.vim/plugged/vim-airline/autoload/airline.vim	/^function! s:invoke_funcrefs(context, funcrefs)$/;"	f
s:isFoldable	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFoldable	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFolded	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isFolded	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isKindheader	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isKindheader	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isNormalTag	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isNormalTag	.vim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isPseudoTag	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isPseudoTag	.vim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isSplitTag	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:isSplitTag	.vim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:is_beginning_of_line	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^function! s:is_beginning_of_line(cur_text) abort "{{{$/;"	f
s:is_branch_empty	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:is_branch_empty()$/;"	f
s:is_cygwin	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
s:is_cygwin	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
s:is_cygwin	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_delimiter	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:is_delimiter() abort "{{{$/;"	f
s:is_dict	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
s:is_dict	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
s:is_empty	.vim/plugged/neosnippet/indent/neosnippet.vim	/^function! s:is_empty(line)$/;"	f
s:is_enabled	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^  let s:is_enabled = 0$/;"	v
s:is_excluded_window	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:is_excluded_window()$/;"	f
s:is_float	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
s:is_float	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
s:is_funcref	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
s:is_funcref	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
s:is_list	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
s:is_list	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
s:is_local_plug	.vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_mac	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_mac() abort$/;"	f
s:is_mac	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_mac	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_mac() abort$/;"	f
s:is_mac	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_managed	.vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_maximized	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_number	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
s:is_number	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
s:is_numeric	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
s:is_numeric	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
s:is_open	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:is_open()$/;"	f
s:is_preview_window_open	.vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_skip_auto_complete	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:is_skip_auto_complete(cur_text) abort "{{{$/;"	f
s:is_special_key	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:is_special_key(key)$/;"	f
s:is_string	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
s:is_string	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
s:is_unix	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_unix() abort$/;"	f
s:is_unix	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_unix() abort$/;"	f
s:is_unix	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_updated	.vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_visible	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:is_visible(pos)$/;"	f
s:is_vital_vim	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:is_vital_vim	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:is_win	.vim/autoload/plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win32term	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:is_win32term = (has('win32') || has('win64')) && !has('gui_running') && (empty($CONEMUBUIL/;"	v
s:is_windows	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_windows() abort$/;"	f
s:is_windows	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_windows() abort$/;"	f
s:is_windows	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:isabs	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:isabs(path)$/;"	f
s:iscmdwin	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:iscmdwin()$/;"	f
s:iscontOne	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:iscontOne(i,num,cont)$/;"	f
s:isneovimterminal	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:isneovimterminal(buf)$/;"	f
s:ispathitem	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ispathitem()$/;"	f
s:job_abort	.vim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	.vim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_db_files	.vim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:job_db_files = []$/;"	v
s:job_exit_cb	.vim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_info_map	.vim/plugged/ale/autoload/ale/engine.vim	/^    let s:job_info_map = {}$/;"	v
s:job_info_map	.vim/plugged/ale/autoload/ale/fix.vim	/^    let s:job_info_map = {}$/;"	v
s:job_kill_timers	.vim/plugged/ale/autoload/ale/job.vim	/^    let s:job_kill_timers = {}$/;"	v
s:job_map	.vim/plugged/ale/autoload/ale/job.vim	/^    let s:job_map = {}$/;"	v
s:job_out_cb	.vim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:jobs	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  let s:jobs = {}$/;"	v
s:jobs	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^  let s:jobs = {}$/;"	v
s:join_posix_lines	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
s:join_posix_lines	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
s:jumpToChild	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(currentNode, direction)$/;"	f
s:jumpToFirstChild	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node)$/;"	f
s:jumpToLastChild	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node)$/;"	f
s:jumpToNextHunk	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToNextHunk(node)$/;"	f
s:jumpToNextSibling	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node)$/;"	f
s:jumpToParent	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node)$/;"	f
s:jumpToPrevHunk	.vim/plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToPrevHunk(node)$/;"	f
s:jumpToPrevSibling	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
s:jumpToRoot	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot()$/;"	f
s:jumpToSibling	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(currentNode, forward)$/;"	f
s:jump_to_tab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:jump_to_tab(offset)$/;"	f
s:justify_equal_spacing	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
s:justify_equal_spacing	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
s:keyword_filter	.vim/plugged/neosnippet/autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:keyword_filter(snippets, cur_keyword_str) abort "{{{$/;"	f
s:known_files	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_files.get	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
s:known_files.has	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
s:known_files.put	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
s:known_files.rm	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
s:known_options	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:known_options = {$/;"	v
s:known_projects	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:kprange	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:kprange = {$/;"	v
s:lash	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lash(...)$/;"	f
s:lash	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! s:lash(...)$/;"	f
s:last_alt_bufnr	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_char	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:last_char()$/;"	f
s:last_command	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^let s:last_command = 'EasyAlign'$/;"	v
s:last_highlight_tline	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_non_empty_line	.vim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_pos	.vim/plugged/ale/autoload/ale/cursor.vim	/^let s:last_pos = [0, 0, 0]$/;"	v
s:last_rtp	.vim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:lastline	.vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lastvisual	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lastvisual()$/;"	f
s:latency_debug_file	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:latency_debug_file = ''$/;"	v
s:layout	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:layout = get(g:, 'airline#extensions#default#layout', [$/;"	v
s:lazycat_list	.vim/colors/solarized.vim	/^let s:lazycat_list=[$/;"	v
s:leavepre	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:leavepre()$/;"	f
s:lenSpaceStr	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:levenshtein_distance	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
s:levenshtein_distance	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
s:linechars	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
s:lineout	.vim/plugged/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:lineout(dict)$/;"	f
s:lines	.vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:lines	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:lines(str) abort$/;"	f
s:lines	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:lines(str) abort$/;"	f
s:lint_timer	.vim/plugged/ale/autoload/ale.vim	/^let s:lint_timer = -1$/;"	v
s:linters	.vim/plugged/ale/autoload/ale/linter.vim	/^let s:linters = {}$/;"	v
s:live_easy_align_op	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:live_easy_align_op(type, ...)$/;"	f
s:load	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:load(...) abort dict$/;"	f
s:load	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:load(...) abort dict$/;"	f
s:load_from_file	.vim/plugged/neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:load_from_file(filename, pattern_file_name, mark, minlen, fileencoding, is_string) a/;"	f
s:load_from_tags	.vim/plugged/neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:load_from_tags(filename, pattern_file_name, mark, minlen, fileencoding) abort "{{{$/;"	f
s:load_plugin	.vim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:load_project_patterns	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^function! s:load_project_patterns(root_dir) abort$/;"	f
s:loaded	.vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:loaded = {}$/;"	v
s:loaded	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:loaded = {}$/;"	v
s:loaded	.vim/plugged/vim-airline/autoload/airline/init.vim	/^let s:loaded = 0$/;"	v
s:loaded_names	.vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:loadtgl	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^let s:loadtgl = exists('g:rbpt_loadcmd_toggle') ? g:rbpt_loadcmd_toggle : 0$/;"	v
s:lod	.vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	.vim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	.vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	.vim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	.vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:log(m)$/;"	f
s:log4	.vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:log_file	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:log_file    = s:plugin_dir.'gitgutter.log'$/;"	v
s:logpos	.vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:long_format	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:long_format = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')$/;"	v
s:looking_at	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:looking_at()$/;"	f
s:lpad	.vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:lsCmd	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lsCmd()$/;"	f
s:ltrim	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:ltrim(str)$/;"	f
s:mac_gui	.vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "#af005f"$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "#d33682"$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "125"$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "5"$/;"	v
s:magenta	.vim/colors/solarized.vim	/^    let s:magenta     = "DarkMagenta"   " 5$/;"	v
s:main	.vim/plugged/neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:main(argv) abort "{{{$/;"	f
s:make_cache	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! s:make_cache(filetype) abort "{{{$/;"	f
s:make_cache_buffer	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_buffer(srcname) abort "{{{$/;"	f
s:make_cache_current_buffer	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_current_buffer(start, end) abort "{{{$/;"	f
s:make_cache_current_buffer	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:make_cache_current_buffer(start, end) abort "{{{$/;"	f
s:make_cache_current_line	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^function! s:make_cache_current_line() abort "{{{$/;"	f
s:make_cache_file	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_file(srcname) abort "{{{$/;"	f
s:make_cache_lines	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:make_cache_lines(srcname, filetype, lines) abort "{{{$/;"	f
s:manual_update_tags	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:map_accum	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
s:map_accum	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
s:map_keys	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:map_keys()$/;"	f
s:map_netrw_key	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  func! s:map_netrw_key(key)$/;"	f
s:map_reset_key	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! s:map_reset_key(key, mode)$/;"	f
s:mark_window	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
s:match_window_opts	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:match_window_opts()$/;"	f
s:matchbuf	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchbuf(item, pat)$/;"	f
s:matcher	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_fuzzy.vim	/^let s:matcher = {$/;"	v
s:matcher	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_head.vim	/^let s:matcher = {$/;"	v
s:matcher	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_length.vim	/^let s:matcher = {$/;"	v
s:matcher	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_nothing.vim	/^let s:matcher = {$/;"	v
s:matcher.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_fuzzy.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
s:matcher.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_head.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
s:matcher.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_length.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
s:matcher.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_nothing.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
s:matchfname	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchfname(item, pat)$/;"	f
s:matchlens	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchlens(str, pat, ...)$/;"	f
s:matchtabe	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabe(item, pat)$/;"	f
s:matchtabs	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabs(item, pat)$/;"	f
s:max	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:max(len, max)$/;"	f
s:max	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^let s:max = exists('g:rbpt_max') ? g:rbpt_max : max([len(s:pairs), 16])$/;"	v
s:max_by	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
s:max_by	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
s:max_lines	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)$/;"	v
s:max_score	.vim/plugged/vim-emoji/autoload/emoji.vim	/^let s:max_score = 1000$/;"	v
s:maxf	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:maxf(len)$/;"	f
s:maxmarks	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^let s:maxmarks = sneak#util#strlen(g:sneak#target_labels)$/;"	v
s:maybe_in_progress	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:maybe_in_progress[module] = {}$/;"	v
s:maybe_in_progress	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:maybe_in_progress = {}$/;"	v
s:me	.vim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:member_sources	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^  let s:member_sources = {}$/;"	v
s:mergelists	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:mergelists()$/;"	f
s:messages	.vim/plugged/vim-gitgutter/test/runner.vim	/^let s:messages = []$/;"	v
s:mfunc	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mfunc()$/;"	f
s:min_by	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
s:min_by	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
s:mixed_indent_file_format	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:mixed_indent_file_format = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format/;"	v
s:mixed_indent_format	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:mixed_indent_format = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mi/;"	v
s:mixedsort	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mixedsort(...)$/;"	f
s:mlc	.vim/colors/molotov.vim	/^let s:mlc = {}$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.alizarin       = ['E74C3C', 160]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.blackestgravel = ['141413', 232]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.blackgravel    = ['1C1B1A', 233]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.brightgravel   = ['D9CEC3', 252]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.clouds         = ['ECF0F1',  15]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.coal           = ['000000',   0]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.darkgravel     = ['242321', 235]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.deepergravel   = ['35322D', 236]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.deepgravel     = ['45413B', 238]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.dirtyblonde    = ['F4CF86', 229]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.emerald        = ['2ECC71',  47]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.gravel         = ['857F78', 243]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.greensea       = ['16A085',  29]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.lightgravel    = ['998F84', 245]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.mediumgravel   = ['666462', 241]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.orange         = ['F39C12', 208]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.peter_river    = ['3498DB',  33]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.pomegranate    = ['C0392B', 196]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.pumpkin        = ['D35400', 202]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.snow           = ['FFFFFF',  15]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.sunflower      = ['F1C40F', 220]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.turqoise       = ['1ABC9C',  36]$/;"	v
s:mlc	.vim/colors/molotov.vim	/^let s:mlc.waspyellow     = ['FCB82B', 214]$/;"	v
s:mmode	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mmode()$/;"	f
s:mode_labels	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:mode_labels = { 'l': '', 'r': '[R]', 'c': '[C]' }$/;"	v
s:modevar	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:modevar()$/;"	f
s:modify	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:modify(entry, type)$/;"	f
s:molokai_original	.vim/colors/molokai.vim	/^    let s:molokai_original = 0$/;"	v
s:molokai_original	.vim/colors/molokai.vim	/^    let s:molokai_original = g:molokai_original$/;"	v
s:mruf_map_string	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^let s:mruf_map_string = '!stridx(v:val, cwd) ? strpart(v:val, idx) : v:val'$/;"	v
s:msg	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:msg(name, cwd)$/;"	f
s:mtype	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mtype()$/;"	f
s:multipliers	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:multipliers(...)$/;"	f
s:my_cr_function	.vimrc	/^  function! s:my_cr_function()$/;"	f
s:n	.vim/colors/solarized.vim	/^    let s:n               = "NONE"$/;"	v
s:names	.vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:narrowable	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:narrowable()$/;"	f
s:nearby_disabled	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:need_trans	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:need_trans	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:neocomplete_source	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^let s:neocomplete_source = {$/;"	v
s:neocomplete_source.gather_candidates	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^function! s:neocomplete_source.gather_candidates(args, context) abort "{{{$/;"	f
s:neocomplete_source.hooks.on_init	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^function! s:neocomplete_source.hooks.on_init(args, context) abort "{{{$/;"	f
s:new	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:new(plugin_name) abort$/;"	f
s:new	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:new(plugin_name) abort$/;"	f
s:new_log_session	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:new_log_session = 1$/;"	v
s:new_window	.vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:new_window	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:newcache	.vim/plugged/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:newcache(cwd)$/;"	f
s:next_sign_id	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:next_sign_id  = s:first_sign_id$/;"	v
s:nocache	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nocache(...)$/;"	f
s:nocache	.vim/plugged/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:nocache()$/;"	f
s:nocache	.vim/plugged/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! s:nocache()$/;"	f
s:nomodeline	.vim/plugged/vim-gitgutter/autoload/gitgutter.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' :/;"	v
s:non_zero_only	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:non_zero_only = get(g:, 'airline#extensions#hunks#non_zero_only', 0)$/;"	v
s:none	.vim/colors/solarized.vim	/^    let s:none            = "NONE"$/;"	v
s:normalize_options	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:normalize_options(opts)$/;"	f
s:nosort	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosort()$/;"	f
s:nosplit	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosplit()$/;"	f
s:nr2byte	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
s:nr2byte	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
s:nr2enc_char	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
s:nr2enc_char	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
s:nr2hex	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
s:nr2hex	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
s:nsplit	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
s:nsplit	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
s:number_map	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = &encoding == 'utf-8'$/;"	v
s:number_map	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = {$/;"	v
s:nvim	.vim/autoload/plug.vim	/^let s:nvim = has('nvim') && exists('*jobwait') && !s:is_win$/;"	v
s:nvim_cb	.vim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:ob	.vim/colors/solarized.vim	/^    let s:ob              = ""$/;"	v
s:offset	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:offset(lines, height)$/;"	f
s:old_cpo	.vim/plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:on_colorscheme_changed	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_colorscheme_changed()$/;"	f
s:on_exit	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:on_exit(channel) dict abort$/;"	f
s:on_exit	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^  function! s:on_exit(channel) dict abort$/;"	f
s:on_exit_mq	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:on_exit_mq(channel) dict abort$/;"	f
s:on_exit_nvim	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_nvim(_job_id, _data, _event) dict abort$/;"	f
s:on_exit_vim	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_vim(_channel) dict abort$/;"	f
s:on_stderr_nvim	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_nvim(_job_id, _data, _event) dict abort$/;"	f
s:on_stderr_vim	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_vim(_channel, _data) dict abort$/;"	f
s:on_stdout	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:on_stdout(channel, msg) dict abort$/;"	f
s:on_stdout	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^  function! s:on_stdout(channel, msg) dict abort$/;"	f
s:on_stdout_nvim	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_nvim(_job_id, data, _event) dict abort$/;"	f
s:on_stdout_vim	.vim/plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_vim(_channel, data) dict abort$/;"	f
s:on_window_changed	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_window_changed()$/;"	f
s:open	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:open(mode)$/;"	f
s:openExplorer	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node)$/;"	f
s:openFold	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
s:openFold	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
s:openHSplit	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target)$/;"	f
s:openInNewTab	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target)$/;"	f
s:openInNewTabSilent	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target)$/;"	f
s:openKindFold	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
s:openNodeRecursively	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node)$/;"	f
s:openParents	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
s:openVSplit	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target)$/;"	f
s:openfile	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:openfile(cmd, fid, tail, chkmod, ...)$/;"	f
s:opfirst	.vim/plugged/vim-javascript/indent/javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:opfunc	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
s:opfunc2	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
s:option_values	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:option_values = {$/;"	v
s:options_list	.vim/colors/solarized.vim	/^let s:options_list=[$/;"	v
s:opts	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:opts(...)$/;"	f
s:or	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:or(xs) abort$/;"	f
s:or	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:or(xs) abort$/;"	f
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "#cb4b16"$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "#d75f00"$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "166"$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "9"$/;"	v
s:orange	.vim/colors/solarized.vim	/^    let s:orange      = "LightRed"      " 1*$/;"	v
s:ou	.vim/colors/solarized.vim	/^    let s:ou              = ""$/;"	v
s:ou	.vim/colors/solarized.vim	/^    let s:ou          = ",underline"$/;"	v
s:overwrite	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^let s:overwrite = get(g:, 'airline#extensions#bufferline#overwrite_variables', 1)$/;"	v
s:pad_between_letters	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
s:pad_between_letters	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
s:pad_both_sides	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
s:pad_both_sides	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
s:pad_left	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
s:pad_left	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
s:pad_right	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
s:pad_right	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
s:padding	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^let s:padding = s:spc . s:spc . s:spc$/;"	v
s:padding_by_displaywidth	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
s:padding_by_displaywidth	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
s:pairs	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^let s:pairs = [$/;"	v
s:pairs	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^let s:pairs = exists('g:rbpt_colorpairs') ? g:rbpt_colorpairs : s:pairs$/;"	v
s:parse	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! s:parse(snippets_file) abort "{{{$/;"	f
s:parse_args	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:parse_args(args)$/;"	f
s:parse_cino	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:parse_cino(f)$/;"	f
s:parse_filter	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:parse_filter(f)$/;"	f
s:parse_nth	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:parse_nth(n)$/;"	f
s:parse_options	.vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_screen	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:parse_screen()$/;"	f
s:parse_shorthand_opts	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:parse_shorthand_opts(expr)$/;"	f
s:parse_snippet_name	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! s:parse_snippet_name(snippets_file, line, linenr, dup_check) abort "{{{$/;"	f
s:parseline	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:parseline(line)$/;"	f
s:partition	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
s:partition	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
s:parts	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:parts(str)$/;"	f
s:parts	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^let s:parts = {}$/;"	v
s:paste_buffer_temporary_text	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_text = ''$/;"	v
s:paste_buffer_temporary_type	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_type = ''$/;"	v
s:pat	.vim/plugged/vim-coffee-script/compiler/coffee.vim	/^let s:pat = '^' . current_compiler$/;"	v
s:pat_for_type	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:pat_for_type = [ '^$', s:_hexcolor, s:_csscolor, '^$' ]$/;"	v
s:path	.vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path2directory	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
s:path2directory	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
s:path2project_directory	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
s:path2project_directory	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
s:pathshorten	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:pathshorten(str)$/;"	f
s:pattern	.vim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.vim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.vim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.vim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? /;"	v
s:pattern	.vim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	.vim/plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:pattern_color	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:pattern_color = {}$/;"	v
s:paused	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:permutations	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
s:permutations	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
s:placematch	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:placematch(c, pos)$/;"	f
s:plug_buf	.vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	.vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	.vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_window_exists	.vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plugin_dir	.vim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:plugin_dir  = expand('<sfile>:p:h:h:h').'\/'$/;"	v
s:plugin_name	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:plugin_name() abort dict$/;"	f
s:plugin_name	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:plugin_name	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:plugin_name() abort dict$/;"	f
s:plugin_name	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:plugin_path	.vim/plugged/ctrlp-py-matcher/autoload/pymatcher.vim	/^let s:plugin_path = escape(expand('<sfile>:p:h'), '\\')$/;"	v
s:pop	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:pop(list) abort$/;"	f
s:pop	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:pop(list) abort$/;"	f
s:pos	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:pos(mark)$/;"	f
s:pragma_error	.vim/plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:pragma_error = '#pragma once in main file'$/;"	v
s:prepare	.vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prev_wildignore	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let s:prev_wildignore = ''$/;"	v
s:previewNodeCurrent	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node)$/;"	f
s:previewNodeHSplit	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node)$/;"	f
s:previewNodeVSplit	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node)$/;"	f
s:preview_commit	.vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:previous_token	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:previous_token()$/;"	f
s:print_feedback	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! s:print_feedback() " {{{1$/;"	f
s:process	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:process(entries, type)$/;"	f
s:process	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:process(fname, ftype)$/;"	f
s:process	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:process(clines, ...)$/;"	f
s:process	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:process(range, mode, n, ch, opts, regexp, rules, bvis)$/;"	f
s:process	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
s:process_delimiter	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^function! s:process_delimiter(context, candidate, delimiter, delim_cnt) abort$/;"	f
s:process_options_file	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:process_user_input	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:process_user_input()$/;"	f
s:product	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:product(lists) abort$/;"	f
s:product	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:product(lists) abort$/;"	f
s:progress_bar	.vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	.vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:proj_cache	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^let s:proj_cache = {}$/;"	v
s:project_root	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:project_root	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:promptToDelBuffer	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:promptToRenameBuffer	.vim/plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToRenameBuffer(bufnum, msg, newFileName)$/;"	f
s:prompt_snapshot_file	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:prompt_snapshot_file = get(g:, 'airline#extensions#promptline#snapshot_file', '')$/;"	v
s:prototype	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype.add_raw	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_raw(text) dict$/;"	f
s:prototype.add_section	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section(group, contents) dict$/;"	f
s:prototype.add_section_spaced	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section_spaced(group, contents) dict$/;"	f
s:prototype.build	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.build() dict$/;"	f
s:prototype.split	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.split(...) dict$/;"	f
s:push	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
s:push	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
s:pwin_by_tagbar	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:pyscript_path	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^let s:pyscript_path = expand('<sfile>:p:r') . '.py'$/;"	v
s:queued_buffer_number	.vim/plugged/ale/autoload/ale.vim	/^let s:queued_buffer_number = -1$/;"	v
s:r	.vim/colors/solarized.vim	/^    let s:r               = ",reverse"$/;"	v
s:rand	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^function! s:rand(max) abort "{{{$/;"	f
s:readfile	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:readfile(cache_dir, filename) abort$/;"	f
s:readfile	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:readfile(cache_dir, filename) abort$/;"	f
s:readfile	.vim/plugged/vim-misc/autoload/xolox/misc/os.vim	/^function! s:readfile(fname, label, cmd) " {{{1$/;"	f
s:reap	.vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:recall	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:recall() abort$/;"	f
s:record	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:record(bufnr)$/;"	f
s:red	.vim/colors/solarized.vim	/^    let s:red         = "#af0000"$/;"	v
s:red	.vim/colors/solarized.vim	/^    let s:red         = "#dc322f"$/;"	v
s:red	.vim/colors/solarized.vim	/^    let s:red         = "1"$/;"	v
s:red	.vim/colors/solarized.vim	/^    let s:red         = "124"$/;"	v
s:red	.vim/colors/solarized.vim	/^    let s:red         = "DarkRed"       " 1$/;"	v
s:redraw	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
s:reformat	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:reformat(mrufs, ...)$/;"	f
s:refreshCurrent	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node)$/;"	f
s:refreshRoot	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot()$/;"	f
s:regexfilter	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regexfilter(str)$/;"	f
s:region	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:region(start_mark, end_mark)$/;"	f
s:regisfilter	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regisfilter(reg)$/;"	f
s:regress_bar	.vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reindent	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
s:reload_plugins	.vim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remarksigns	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:remarksigns()$/;"	f
s:remember_visual	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:remember_visual(mode)$/;"	f
s:removeChild	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
s:removeTag	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
s:remove_ansi_sequences	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
s:remove_ansi_sequences	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
s:remove_rtp	.vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	.vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	.vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:repair_posix_text	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
s:repair_posix_text	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
s:repeat_in_visual	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:repeat_in_visual()$/;"	f
s:repeat_visual	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:repeat_visual()$/;"	f
s:replace	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
s:replace	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
s:replace_first	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
s:replace_first	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
s:repo	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo(...) abort$/;"	f
s:repo_aliases	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_aliases() dict abort$/;"	f
s:repo_bare	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
s:repo_config	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_config(conf) dict abort$/;"	f
s:repo_dir	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
s:repo_dirglob	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_dirglob(base) dict abort$/;"	f
s:repo_git_chomp	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
s:repo_git_chomp_in_tree	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
s:repo_git_command	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
s:repo_head	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
s:repo_head_ref	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_head_ref() dict abort$/;"	f
s:repo_keywordprg	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_keywordprg() dict abort$/;"	f
s:repo_prototype	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repo_rev_parse	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
s:repo_superglob	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
s:repo_translate	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_translate(spec) dict abort$/;"	f
s:repo_tree	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
s:repo_user	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
s:repos	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:repos = {}$/;"	v
s:reset	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
s:reset_summary	.vim/plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:reset_summary() abort$/;"	f
s:reset_untracked_cache	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:reset_untracked_cache(shellcmdpost)$/;"	f
s:restore_conceal_in_other_windows	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:restore_conceal_in_other_windows()$/;"	f
s:retry	.vim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:retry_keys	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:retry_keys = ""$/;"	v
s:reuseWin	.vim/plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:reverse	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
s:reverse	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
s:revert	.vim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:revert_highlight_fix	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_highlight_fix()$/;"	f
s:revert_mode	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_mode(from, to)$/;"	f
s:rgb2color	.vim/plugged/vim-css-color/autoload/css_color.vim	/^function! s:rgb2color(r,g,b)$/;"	f
s:rgb2xterm	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	function! s:rgb2xterm(color)$/;"	f
s:rm_rf	.vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rtp	.vim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:rtrim	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:rtrim(str)$/;"	f
s:run	.vim/plugged/vim-misc/autoload/xolox/misc/perm.vim	/^function! s:run(command, ...)$/;"	f
s:runner_exe	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = gutentags#get_plat_file('update_tags')$/;"	v
s:s	.vim/colors/solarized.vim	/^    let s:s               = ",standout"$/;"	v
s:samerootsyml	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:samerootsyml(each, isfile, cwd)$/;"	f
s:sanstail	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sanstail(str)$/;"	f
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/async_cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/context_filetype.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/custom.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_add_paren.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_case.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_delimiter.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_disable_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/converter_remove_overlap.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_fuzzy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_head.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_length.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/matcher_nothing.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_filename.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_rank.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/handler.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/helper.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/init.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/mappings.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/sources/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/neocomplete/variables.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/plugin/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/plugin/neocomplete/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/plugin/neocomplete/dictionary.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/plugin/neocomplete/member.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neocomplete/plugin/neocomplete/tag.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neocomplcache/sources/snippets_complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neocomplete/sources/neosnippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/commands.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/handlers.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/helpers.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/init.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/variables.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/ftplugin/neosnippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/indent/neosnippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/plugin/neosnippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/neosnippet/syntax/neosnippet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^let s:save_cpo = &cpo$/;"	v
s:savebookmark	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:savebookmark(name, cwd)$/;"	f
s:saved_char	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_char = ''$/;"	v
s:saved_cpo	.vim/plugged/editorconfig-vim/autoload/editorconfig.vim	/^let s:saved_cpo = &cpo$/;"	v
s:saved_cpo	.vim/plugged/editorconfig-vim/plugin/editorconfig.vim	/^let s:saved_cpo = &cpo$/;"	v
s:saved_keys	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_keys = ""$/;"	v
s:saved_line	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_line = 0$/;"	v
s:saved_linecount	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_linecount = -1$/;"	v
s:savetofile	.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:savetofile(mrufs)$/;"	f
s:scan	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
s:scan	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
s:score	.vim/plugged/vim-emoji/autoload/emoji.vim	/^function! s:score(haystack, needle)$/;"	f
s:script_path	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:script_path = tolower(resolve(expand('<sfile>:p:h')))$/;"	v
s:scroll	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^let s:scroll = {$/;"	v
s:sdir	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^let s:sdir = neocomplete#util#substitute_path_separator($/;"	v
s:search	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:search(pattern) abort dict$/;"	f
s:search	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:search(pattern) abort dict$/;"	f
s:search_sync_placeholder	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! s:search_sync_placeholder(start, end, number) abort "{{{$/;"	f
s:search_vim_path	.vim/plugged/neocomplete/autoload/neocomplete/cache.vim	/^function! s:search_vim_path() abort "{{{$/;"	f
s:section	.vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section_is_empty	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:section_is_empty(self, content)$/;"	f
s:section_truncate_width	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_truncate_width = get(g:, 'airline#extensions#default#section_truncate_width', {$/;"	v
s:section_use_groups	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_use_groups     = get(g:, 'airline#extensions#default#section_use_groupitems', 1)$/;"	v
s:sectionmovement	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^function! s:sectionmovement(pattern,flags,mode,count)$/;"	f
s:sections	.vim/plugged/vim-airline/autoload/airline.vim	/^let s:sections = ['a','b','c','gutter','x','y','z', 'error', 'warning']$/;"	v
s:sections	.vim/plugged/vim-airline/t/init.vim	/^let s:sections = ['a', 'b', 'c', 'gutter', 'x', 'y', 'z', 'warning']$/;"	v
s:select_in_visual_mode	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:select_in_visual_mode(region)$/;"	f
s:select_tab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:select_tab(buf_index)$/;"	f
s:separators	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:separators = {}$/;"	v
s:set	.vim/plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:set(var, default) abort$/;"	f
s:setFolded	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
s:set_auto_completion_length	.vim/plugged/neocomplete/autoload/neocomplete/commands.vim	/^function! s:set_auto_completion_length(len) abort "{{{$/;"	f
s:set_complete_results_pos	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:set_complete_results_pos(funcs, cur_text) abort "{{{$/;"	f
s:set_complete_results_words	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:set_complete_results_words(complete_results) abort "{{{$/;"	f
s:set_default	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
s:set_default	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
s:set_default_menu	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! s:set_default_menu(words, source) abort "{{{$/;"	f
s:set_repeat	.vim/plugged/vim-easy-align/plugin/easy_align.vim	/^function! s:set_repeat()$/;"	f
s:set_snippet_dict	.vim/plugged/neosnippet/autoload/neosnippet/parser.vim	/^function! s:set_snippet_dict(snippet_dict, snippets, dup_check, snippets_file) abort "{{{$/;"	f
s:setentries	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:setentries()$/;"	f
s:settings	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings = {$/;"	v
s:settings_if_default	.vim/plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings_if_default = {$/;"	v
s:settype	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:settype(type)$/;"	f
s:setup_keymaps	.vim/plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
s:setup_options	.vim/plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
s:setupblank	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:setupblank()$/;"	f
s:shellesc	.vim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellescape	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
s:shellescape	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^  function! s:shellescape(command) abort$/;"	f
s:shellescape	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
s:shellescape	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^  function! s:shellescape(command) abort$/;"	f
s:shellslash	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:shellslash(path) abort$/;"	f
s:shift	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:shift(list) abort$/;"	f
s:shift	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:shift(list) abort$/;"	f
s:shift	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:shift(modes, cycle)$/;"	f
s:shift_opts	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:shift_opts(opts, key, vals)$/;"	f
s:short_help	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:shorten	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! s:shorten()$/;"	f
s:shortest	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:shortest(lens)$/;"	f
s:shorthand	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:shorthand = {$/;"	v
s:shorthand_regex	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^let s:shorthand_regex =$/;"	v
s:should_change_group	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:should_change_group(group1, group2)$/;"	f
s:should_create_cache	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:should_create_cache(bufnr) " {{{$/;"	f
s:should_lint_file_for_buffer	.vim/plugged/ale/autoload/ale.vim	/^let s:should_lint_file_for_buffer = {}$/;"	v
s:showMenu	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node)$/;"	f
s:show_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:show_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:show_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:show_close_button	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:show_close_button = get(g:, 'airline#extensions#tabline#show_close_button', 1)$/;"	v
s:show_message	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:show_message = get(g:, 'airline#extensions#whitespace#show_message', 1)$/;"	v
s:show_message	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^function! s:show_message(hlgroup, args) " {{{1$/;"	f
s:show_splits	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:show_splits = get(g:, 'airline#extensions#tabline#show_splits', 1)$/;"	v
s:show_tab_nr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:show_tab_nr = get(g:, 'airline#extensions#tabline#show_tab_nr', 1)$/;"	v
s:show_tab_type	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:show_tab_type = get(g:, 'airline#extensions#tabline#show_tab_type', 1)$/;"	v
s:show_tab_type	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:show_tab_type = get(g:, 'airline#extensions#tabline#show_tab_type', 1)$/;"	v
s:show_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! s:show_tabline(min_count, total_count)$/;"	f
s:show_tabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:show_tabs = get(g:, 'airline#extensions#tabline#show_tabs', 1)$/;"	v
s:show_tabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:show_tabs = get(g:, 'airline#extensions#tabline#show_tabs', 1)$/;"	v
s:sid2sfuncs	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
s:sid2sfuncs	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
s:signs	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:signs(filename)$/;"	f
s:skip_check_ft	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:skip_check_ft = {'make': ['indent', 'mixed-indent-file'] }$/;"	v
s:skip_expr	.vim/plugged/vim-javascript/indent/javascript.vim	/^let s:skip_expr = "s:syn_at(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:skip_func	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:skip_func()$/;"	f
s:skip_latency_measure	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:skip_latency_measure()$/;"	f
s:skip_next_auto_completion	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! s:skip_next_auto_completion() abort "{{{$/;"	f
s:skip_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^let s:skip_symbol = '‚Ä¶'$/;"	v
s:smart_execute_command	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
s:smart_execute_command	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
s:smooth_scroll	.vim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! s:smooth_scroll(dir, dist, duration, speed)$/;"	f
s:snapshot	.vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:snippets_expand	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! s:snippets_expand(cur_text, col) abort "{{{$/;"	f
s:snippets_expand_or_jump	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! s:snippets_expand_or_jump(cur_text, col) abort "{{{$/;"	f
s:snippets_jump_or_expand	.vim/plugged/neosnippet/autoload/neosnippet/mappings.vim	/^function! s:snippets_jump_or_expand(cur_text, col) abort "{{{$/;"	f
s:solarized_termtrans_default	.vim/colors/solarized.vim	/^    let s:solarized_termtrans_default = 0$/;"	v
s:solarized_termtrans_default	.vim/colors/solarized.vim	/^    let s:solarized_termtrans_default = 1$/;"	v
s:sort	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
s:sort	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
s:sortKeyFormat	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^    let s:sortKeyFormat = "%0" . float2nr(ceil(log10(len(g:NERDTreeSortOrder)))) . "d"$/;"	v
s:sortKeyFormat	.vim/plugged/nerdtree/lib/nerdtree/path.vim	/^    let s:sortKeyFormat = "%04d"$/;"	v
s:sortTags	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
s:sort_by	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
s:sort_by	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
s:sorter	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_filename.vim	/^let s:sorter = {$/;"	v
s:sorter	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^let s:sorter = {$/;"	v
s:sorter	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_rank.vim	/^let s:sorter = {$/;"	v
s:sorter	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^let s:sorter = {$/;"	v
s:sorter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_filename.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
s:sorter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_length.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
s:sorter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_rank.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
s:sorter.filter	.vim/plugged/neocomplete/autoload/neocomplete/filters/sorter_word.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
s:source	.vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:source	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neocomplete/autoload/neocomplete/sources/file.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neosnippet/autoload/neocomplcache/sources/snippets_complete.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neosnippet/autoload/neocomplete/sources/neosnippet.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^let s:source = {$/;"	v
s:source	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^let s:source.action_table = s:action_table$/;"	v
s:source.gather_candidates	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:source.gather_candidates	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:source.gather_candidates	.vim/plugged/neocomplete/autoload/neocomplete/sources/file.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:source.gather_candidates	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:source.gather_candidates	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:source.gather_candidates	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:source.gather_candidates	.vim/plugged/neosnippet/autoload/neocomplete/sources/neosnippet.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:source.gather_candidates	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
s:source.get_complete_position	.vim/plugged/neocomplete/autoload/neocomplete/sources/file.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
s:source.get_complete_position	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
s:source.get_complete_position	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
s:source.get_complete_words	.vim/plugged/neosnippet/autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str) abort "{{{$/;"	f
s:source.get_keyword_pos	.vim/plugged/neosnippet/autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.get_keyword_pos(cur_text) abort "{{{$/;"	f
s:source.hooks.on_final	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
s:source.hooks.on_final	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
s:source.hooks.on_final	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
s:source.hooks.on_init	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
s:source.hooks.on_init	.vim/plugged/neocomplete/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
s:source.hooks.on_init	.vim/plugged/neocomplete/autoload/neocomplete/sources/member.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
s:source.hooks.on_init	.vim/plugged/neocomplete/autoload/neocomplete/sources/omni.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
s:source.hooks.on_init	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
s:source.hooks.on_init	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
s:source.hooks.on_post_filter	.vim/plugged/neocomplete/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_post_filter(context) abort "{{{$/;"	f
s:source.hooks.on_post_filter	.vim/plugged/neosnippet/autoload/neocomplete/sources/neosnippet.vim	/^function! s:source.hooks.on_post_filter(context) abort "{{{$/;"	f
s:source.initialize	.vim/plugged/neosnippet/autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.initialize() abort "{{{$/;"	f
s:source_runtime	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^let s:source_runtime = {$/;"	v
s:source_runtime	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^let s:source_runtime.action_table.unite__new_candidate = {$/;"	v
s:source_runtime.action_table.unite__new_candidate.func	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^function! s:source_runtime.action_table.unite__new_candidate.func(candidate) abort "{{{$/;"	f
s:source_runtime.gather_candidates	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^function! s:source_runtime.gather_candidates(args, context) abort "{{{$/;"	f
s:source_user	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^let s:source_user = {$/;"	v
s:source_user	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^let s:source_user.action_table.unite__new_candidate = {$/;"	v
s:source_user.action_table.unite__new_candidate.func	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^function! s:source_user.action_table.unite__new_candidate.func(candidate) abort "{{{$/;"	f
s:source_user.gather_candidates	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^function! s:source_user.gather_candidates(args, context) abort "{{{$/;"	f
s:sp_back	.vim/colors/solarized.vim	/^    let s:sp_back      = ""$/;"	v
s:sp_base0	.vim/colors/solarized.vim	/^    let s:sp_base0     = ""$/;"	v
s:sp_base00	.vim/colors/solarized.vim	/^    let s:sp_base00    = ""$/;"	v
s:sp_base01	.vim/colors/solarized.vim	/^    let s:sp_base01    = ""$/;"	v
s:sp_base02	.vim/colors/solarized.vim	/^    let s:sp_base02    = ""$/;"	v
s:sp_base03	.vim/colors/solarized.vim	/^    let s:sp_base03    = ""$/;"	v
s:sp_base1	.vim/colors/solarized.vim	/^    let s:sp_base1     = ""$/;"	v
s:sp_base2	.vim/colors/solarized.vim	/^    let s:sp_base2     = ""$/;"	v
s:sp_base3	.vim/colors/solarized.vim	/^    let s:sp_base3     = ""$/;"	v
s:sp_blue	.vim/colors/solarized.vim	/^    let s:sp_blue      = ""$/;"	v
s:sp_cyan	.vim/colors/solarized.vim	/^    let s:sp_cyan      = ""$/;"	v
s:sp_green	.vim/colors/solarized.vim	/^    let s:sp_green     = ""$/;"	v
s:sp_magenta	.vim/colors/solarized.vim	/^    let s:sp_magenta   = ""$/;"	v
s:sp_none	.vim/colors/solarized.vim	/^    let s:sp_none      = ""$/;"	v
s:sp_orange	.vim/colors/solarized.vim	/^    let s:sp_orange    = ""$/;"	v
s:sp_red	.vim/colors/solarized.vim	/^    let s:sp_red       = ""$/;"	v
s:sp_violet	.vim/colors/solarized.vim	/^    let s:sp_violet    = ""$/;"	v
s:sp_yellow	.vim/colors/solarized.vim	/^    let s:sp_yellow    = ""$/;"	v
s:spaceStr	.vim/plugged/nerdcommenter/plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:span	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
s:span	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
s:spawn	.vim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:spawn	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
s:spawn	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/section.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/util.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:special_keys	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:special_keys = {$/;"	v
s:split3	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
s:split3	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
s:split_by_displaywidth	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
s:split_by_displaywidth	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
s:split_leftright	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
s:split_leftright	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
s:split_line	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:split_line(line, nth, modes, cycle, fc, lc, pattern, stick_to_left, ignore_unmatched/;"	f
s:split_posix_text	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
s:split_posix_text	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
s:split_rtp	.vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:st	.vim/plugged/vim-sneak/plugin/sneak.vim	/^let s:st = { 'rst':1, 'input':'', 'inputlen':0, 'reverse':0, 'bounds':[0,0], 'inclusive':0 }$/;"	v
s:stage_info	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:stage_info(lnum) abort$/;"	f
s:start_complete	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^function! s:start_complete(is_quick_match) abort "{{{$/;"	f
s:start_latency_measure	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:start_latency_measure()$/;"	f
s:starts_with	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
s:starts_with	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
s:status	.vim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	.vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	.vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:statusline_in_use	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:str	.vim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
s:strchars	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
s:strchars	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
s:strchars	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
s:strchars	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
s:strfmt	.vim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strfmt	.vim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strip_white_space	.vim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
s:strwidth	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:strwidth(str)$/;"	f
s:strwidth	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^  function! s:strwidth(str)$/;"	f
s:strwidth	.vim/plugged/vim-emoji/autoload/emoji.vim	/^  function! s:strwidth(str)$/;"	f
s:strwidthpart	.vim/plugged/neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:strwidthpart(str, width) abort "{{{$/;"	f
s:strwidthpart	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart_reverse	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:strwidthpart_reverse	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:strwidthpart_reverse	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:strwidthpart_reverse	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:sub	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:sublist	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist(l, s, e)$/;"	f
s:sublist7071	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist7071(l, s, e)$/;"	f
s:substitute_last	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
s:substitute_last	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
s:substitute_path_separator	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
s:substitute_path_separator	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
s:substitute_placeholder_marker	.vim/plugged/neosnippet/autoload/neosnippet/view.vim	/^function! s:substitute_placeholder_marker(start, end, snippet_holder_cnt) abort "{{{$/;"	f
s:suite	.vim/plugged/neocomplete/test/neocomplete.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:suite	.vim/plugged/neosnippet/test/functions.vim	/^let s:suite = themis#suite('toml')$/;"	v
s:suite.escape	.vim/plugged/neocomplete/test/neocomplete.vim	/^function! s:suite.escape() abort$/;"	f
s:suite.fuzzy	.vim/plugged/neocomplete/test/neocomplete.vim	/^function! s:suite.fuzzy() abort$/;"	f
s:suite.get_completed_snippet	.vim/plugged/neosnippet/test/functions.vim	/^function! s:suite.get_completed_snippet() abort$/;"	f
s:suite.get_in_paren	.vim/plugged/neosnippet/test/functions.vim	/^function! s:suite.get_in_paren() abort$/;"	f
s:suite.overlap	.vim/plugged/neocomplete/test/neocomplete.vim	/^function! s:suite.overlap() abort$/;"	f
s:suite.sort	.vim/plugged/neocomplete/test/neocomplete.vim	/^function! s:suite.sort() abort$/;"	f
s:summarize	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function s:summarize(opts, recur, mode_sequence)$/;"	f
s:supports_star	.vim/plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:supports_star = v:version > 703 || (v:version == 703 && has("patch596"))$/;"	v
s:surroundings	.vim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
s:sw	.vim/plugged/vim-javascript/indent/javascript.vim	/^  function s:sw()$/;"	f
s:switch_buffers_and_tabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:switch_buffers_and_tabs = get(g:, 'airline#extensions#tabline#switch_buffers_and_tabs', 0)$/;"	v
s:switch_in	.vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	.vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:symbol	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:symbol = get(g:, 'airline#extensions#whitespace#symbol', g:airline_symbols.whitespace)$/;"	v
s:syn_at	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:syn_at(l,c)$/;"	f
s:sync_active_winnr	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:sync_active_winnr()$/;"	f
s:syng_com	.vim/plugged/vim-javascript/indent/javascript.vim	/^let s:syng_com = 'comment\\|doc'$/;"	v
s:syntax	.vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntax	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/plugged/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/plugged/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/plugged/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/plugged/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:syntax()$/;"	f
s:syntax	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:syntax()$/;"	f
s:system	.vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^function! s:system(str, ...) abort$/;"	f
s:system	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^function! s:system(str, ...) abort$/;"	f
s:system_chomp	.vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:system_job_handler	.vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! s:system_job_handler(job_id, data, event) dict$/;"	f
s:t_none	.vim/colors/solarized.vim	/^    let s:t_none          = "NONE"$/;"	v
s:tab_min_count	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:tab_min_count = get(g:, 'airline#extensions#tabline#tab_min_count', 0)$/;"	v
s:tab_nr_type	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:tab_nr_type = get(g:, 'airline#extensions#tabline#tab_nr_type', 0)$/;"	v
s:taboo	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:taboo = get(g:, 'airline#extensions#taboo#enabled', 1) && get(g:, 'loaded_taboo', 0)$/;"	v
s:tabs_label	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:tabs_label = get(g:, 'airline#extensions#tabline#tabs_label', 'tabs')$/;"	v
s:tabs_label	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:tabs_label = get(g:, 'airline#extensions#tabline#tabs_label', 'tabs')$/;"	v
s:tags_list	.vim/plugged/neocomplete/autoload/neocomplete/sources/tag.vim	/^  let s:tags_list = {}$/;"	v
s:tail	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:tail()$/;"	f
s:take_while	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
s:take_while	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
s:temp00	.vim/colors/solarized.vim	/^    let s:temp00      = s:base00$/;"	v
s:temp01	.vim/colors/solarized.vim	/^    let s:temp01      = s:base01$/;"	v
s:temp02	.vim/colors/solarized.vim	/^    let s:temp02      = s:base02$/;"	v
s:temp03	.vim/colors/solarized.vim	/^    let s:temp03      = s:base03$/;"	v
s:temp_buffer	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_buffer = tempname()$/;"	v
s:temp_files	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_index	.vim/plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_index = tempname()$/;"	v
s:terminal_italic	.vim/colors/solarized.vim	/^            let s:terminal_italic=1$/;"	v
s:terminal_italic	.vim/colors/solarized.vim	/^    let s:terminal_italic=0 " terminals will be guilty until proven compatible$/;"	v
s:terminal_italic	.vim/colors/solarized.vim	/^    let s:terminal_italic=1 " TODO: could refactor to not require this at all$/;"	v
s:terms_italic	.vim/colors/solarized.vim	/^let s:terms_italic=[$/;"	v
s:terms_noitalic	.vim/colors/solarized.vim	/^let s:terms_noitalic=[$/;"	v
s:test_command_execution	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! s:test_command_execution()$/;"	f
s:test_list_handling	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! s:test_list_handling()$/;"	f
s:test_option_handling	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! s:test_option_handling()$/;"	f
s:test_regexp	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:test_regexp(regexp)$/;"	f
s:test_repo	.vim/plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:test_repo   = s:current_dir.'\/test-repo'$/;"	v
s:test_string_escaping	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! s:test_string_escaping()$/;"	f
s:test_string_handling	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! s:test_string_handling()$/;"	f
s:test_version_handling	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! s:test_version_handling()$/;"	f
s:tests	.vim/plugged/vim-gitgutter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:tests	.vim/plugged/vim-gitgutter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:text	.vim/plugged/ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:text = map(['second', 'seconds', 'minutes', 'hours', 'days', 'weeks',$/;"	v
s:textdialog	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:textdialog(str)$/;"	f
s:textobject	.vim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
s:this_version	.vim/plugin/visSum.vim	/^let s:this_version = '1.0'$/;"	v
s:throw	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:throw(string) abort$/;"	f
s:tick	.vim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:tmuxline_snapshot_file	.vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:tmuxline_snapshot_file = get(g:, 'airline#extensions#tmuxline#snapshot_file', '')$/;"	v
s:to_a	.vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_mode	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:to_mode = ''$/;"	v
s:to_s	.vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:toggleFold	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
s:toggleIgnoreFilter	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter()$/;"	f
s:toggleShowBookmarks	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks()$/;"	f
s:toggleShowFiles	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles()$/;"	f
s:toggleShowHidden	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden()$/;"	f
s:toggleZoom	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom()$/;"	f
s:toggle_off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:toggle_off()$/;"	f
s:toggle_on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:toggle_on()$/;"	f
s:token	.vim/plugged/vim-javascript/indent/javascript.vim	/^function s:token()$/;"	f
s:trace	.vim/plugged/ctrlp.vim/autoload/ctrlp/autoignore.vim	/^function! s:trace(message) abort$/;"	f
s:trailing_format	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:trailing_format = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')$/;"	v
s:tree_up_dir_line	.vim/plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:triggers	.vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	.vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trim	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim(str) abort$/;"	f
s:trim	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:trim(str) abort$/;"	f
s:trim	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:trim(str)$/;"	f
s:trim_end	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
s:trim_end	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
s:trim_start	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
s:trim_start	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
s:truncate	.vim/plugged/neocomplete/autoload/neocomplete/async_cache.vim	/^function! s:truncate(str, width) abort "{{{$/;"	f
s:truncate	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate_skipping	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:truncate_skipping	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:truncate_skipping	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:truncate_skipping	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:type	.vim/plugged/vim-css-color/autoload/css_color.vim	/^let s:type         = [ 'none', 'hex', 'css', 'none' ] " with wraparound for index() == -1$/;"	v
s:type_init_done	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:types	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^let s:types = ['fil', 'buf', 'mru']$/;"	v
s:types	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:types = {$/;"	v
s:types	.vim/plugged/rainbow_parentheses.vim/autoload/rainbow_parentheses.vim	/^let s:types = [['(',')'],['\\[','\\]'],['{','}'],['<','>']]$/;"	v
s:u	.vim/colors/solarized.vim	/^    let s:u           = ""$/;"	v
s:u	.vim/colors/solarized.vim	/^    let s:u           = ",underline"$/;"	v
s:unescape	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
s:unescape	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
s:unescape	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! s:unescape(s)$/;"	f
s:unescape_pattern	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
s:unescape_pattern	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
s:unescape_tags	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! s:unescape_tags(s)$/;"	f
s:uniq	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq_by	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
s:uniq_by	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
s:unique_marker	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^let s:unique_marker = 'xolox#misc#timer#value'$/;"	v
s:unix_redir	.vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	.vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unload	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:unload() abort dict$/;"	f
s:unload	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:unload() abort dict$/;"	f
s:unmarksigns	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:unmarksigns()$/;"	f
s:unshift	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
s:unshift	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
s:upDirCurrentRootClosed	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
s:upDirCurrentRootOpen	.vim/plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
s:update	.vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:update()$/;"	f
s:update_branch	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_branch()$/;"	f
s:update_finish	.vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_git_branch	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_git_branch(path)$/;"	f
s:update_hg_branch	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_hg_branch(path)$/;"	f
s:update_impl	.vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_lines	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:update_lines(todo)$/;"	f
s:update_python	.vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_queue	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_ruby	.vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:update_tabline()$/;"	f
s:update_tags	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:update_untracked	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_untracked()$/;"	f
s:update_untracked_in_buffer_config	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_untracked_in_buffer_config(file, vcs)$/;"	f
s:update_vim	.vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:update_visual_markers	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:update_visual_markers(region)$/;"	f
s:upgrade	.vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	.vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:use_dll	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^let s:use_dll = 0$/;"	v
s:use_previous_result	.vim/plugged/neocomplete/autoload/neocomplete/complete.vim	/^function! s:use_previous_result(source, context) abort "{{{$/;"	f
s:use_word_boundary	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:use_word_boundary = 1$/;"	v
s:using_xolox_shell	.vim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:using_xolox_shell = -1$/;"	v
s:usrign	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:usrign(item, type)$/;"	f
s:vacantdict	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:vacantdict(dict)$/;"	f
s:valid_regexp	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:valid_regexp(regexp)$/;"	f
s:validate_options	.vim/plugged/vim-easy-align/autoload/easy_align.vim	/^function! s:validate_options(opts)$/;"	f
s:validfile	.vim/plugged/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:validfile(fname, ftype)$/;"	f
s:vcs_config	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:vcs_config = {$/;"	v
s:version	.vim/plugged/ale/ale_linters/cpp/gcc.vim	/^    let s:version = ale#handlers#gcc#ParseGCCVersion(systemlist('gcc --version'))$/;"	v
s:version_cache	.vim/plugged/ale/ale_linters/python/flake8.vim	/^let s:version_cache = {}$/;"	v
s:version_requirement	.vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vim8	.vim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_quitting	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "#5f5faf"$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "#6c71c4"$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "13"$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "61"$/;"	v
s:violet	.vim/colors/solarized.vim	/^    let s:violet      = "LightMagenta"  " 5*$/;"	v
s:visibility_symbols	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:vital_base_dir	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:vital_base_dir	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:vital_files	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! s:vital_files() abort$/;"	f
s:vital_files	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! s:vital_files() abort$/;"	f
s:vmode	.vim/colors/solarized.vim	/^    let s:vmode       = "cterm"$/;"	v
s:vmode	.vim/colors/solarized.vim	/^    let s:vmode       = "gui"$/;"	v
s:wait_for_user_input	.vim/plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:wait_for_user_input(mode)$/;"	f
s:wait_with_timeout	.vim/plugged/vim-peekaboo/autoload/peekaboo.vim	/^function! s:wait_with_timeout(timeout)$/;"	f
s:walker	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:walker(m, p, d)$/;"	f
s:warn	.vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warn	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:warn(str) abort$/;"	f
s:warning	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
s:warning_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#ale#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#neomake#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#ycm#warning_symbol', 'W:')$/;"	v
s:warnings	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:wcswidth	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:wcswidth	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
s:wcswidth	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:wcswidth	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:wcswidth	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
s:wcswidth	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:wig_cond	.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim	/^let s:wig_cond = v:version > 702 || ( v:version == 702 && has('patch051') )$/;"	v
s:window_expanded	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:windows_compatible	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^let s:windows_compatible = xolox#misc#os#is_win()$/;"	v
s:winrestcmd	.vim/plugged/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:winshell	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:winshell() abort$/;"	f
s:with_cd	.vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:with_index	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
s:with_index	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
s:wordcount	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! s:wordcount()$/;"	f
s:worktree_for_dir	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:wrap	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
s:wrap	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
s:wrap	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
s:wrap_accent	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! s:wrap_accent(part, value)$/;"	f
s:wrap_around	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^function! s:wrap_around()$/;"	f
s:wrap_exec_test	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! s:wrap_exec_test(function)$/;"	f
s:wrap_inside	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^function! s:wrap_inside()$/;"	f
s:wrapreg	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
s:write_triggered_update_tags	.vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:writecache	.vim/plugged/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:writecache(cafile)$/;"	f
s:writecache	.vim/plugged/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:writecache(lines)$/;"	f
s:writefile	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:writefile(cache_dir, filename, list) abort$/;"	f
s:writefile	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:writefile(cache_dir, filename, list) abort$/;"	f
s:ws_refresh	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:ws_refresh()$/;"	f
s:xtermcolor	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xtermcolor += map(range(24),'repeat([10*v:val+8],3) + [v:val+232]')$/;"	v
s:xtermcolor	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xtermcolor = [$/;"	v
s:xvquant	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant = repeat([0],48)$/;"	v
s:xvquant	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[2]] = 2$/;"	v
s:xvquant	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[3]] = 3$/;"	v
s:xvquant	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[4]] = 4$/;"	v
s:xvquant	.vim/plugged/vim-css-color/autoload/css_color.vim	/^	let s:xvquant[s:cubergb[5]] = 5$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "#af8700"$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "#b58900"$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "136"$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "3"$/;"	v
s:yellow	.vim/colors/solarized.vim	/^    let s:yellow      = "DarkYellow"    " 3$/;"	v
s:z	.vim/plugged/vim-javascript/indent/javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
s:zip	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:zip(...) abort$/;"	f
s:zip	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:zip(...) abort$/;"	f
s:zip_fill	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
s:zip_fill	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
s:{s	.vim/plugged/vim-javascript/indent/javascript.vim	/^  function s:{s:__}(...)$/;"	f
score	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^score = 0$/;"	v
semi	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def semi(snip):$/;"	f
set	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def set(self, x, y):$/;"	m	class:Canvas
set_file_content	.vim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def set_file_content(string)$/;"	f
set_file_content	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def set_file_content(string)$/;"	f
set_text	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def set_text(self, x, y, text):$/;"	m	class:Canvas
setdefault	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def setdefault(self, key, defval=None):$/;"	m	class:OrderedDict
setitems	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def setitems(self, items):$/;"	m	class:OrderedDict
setkeys	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def setkeys(self, keys):$/;"	m	class:OrderedDict
setmmautocmd	.vim/plugged/vim-minimap/autoload/minimap.py	/^def setmmautocmd(clear = False):$/;"	f
setvalues	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def setvalues(self, values):$/;"	m	class:OrderedDict
showminimap	.vim/plugged/vim-minimap/autoload/minimap.py	/^def showminimap():$/;"	f
singlehtml	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^singlehtml:$/;"	t
sizes	.vim/plugged/vim-minimap/autoload/drawille/examples/speed_test.py	/^sizes = ((0, 0),$/;"	v
smooth_scroll#down	.vim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! smooth_scroll#down(dist, duration, speed)$/;"	f
smooth_scroll#up	.vim/plugged/vim-smooth-scroll/autoload/smooth_scroll.vim	/^function! smooth_scroll#up(dist, duration, speed)$/;"	f
sneak#cancel	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#cancel()$/;"	f
sneak#debug#profile	.vim/plugged/vim-sneak/autoload/sneak/debug.vim	/^func! sneak#debug#profile()$/;"	f
sneak#debug#report	.vim/plugged/vim-sneak/autoload/sneak/debug.vim	/^func! sneak#debug#report()$/;"	f
sneak#hl#get	.vim/plugged/vim-sneak/autoload/sneak/hl.vim	/^func! sneak#hl#get(hlgroup) abort "gets the definition of the specified highlight$/;"	f
sneak#hl#links_to	.vim/plugged/vim-sneak/autoload/sneak/hl.vim	/^func! sneak#hl#links_to(hlgroup) abort$/;"	f
sneak#hl#removehl	.vim/plugged/vim-sneak/autoload/sneak/hl.vim	/^func! sneak#hl#removehl() abort "remove highlighting$/;"	f
sneak#init	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#init()$/;"	f
sneak#is_sneaking	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#is_sneaking()$/;"	f
sneak#label#sanitize_target_labels	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! sneak#label#sanitize_target_labels()$/;"	f
sneak#label#to	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^func! sneak#label#to(s, v, reverse)$/;"	f
sneak#reset	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#reset(key)$/;"	f
sneak#rpt	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#rpt(op, reverse) abort$/;"	f
sneak#search#get_cs	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^func! sneak#search#get_cs(input, use_ic_scs)$/;"	f
sneak#search#new	.vim/plugged/vim-sneak/autoload/sneak/search.vim	/^func! sneak#search#new()$/;"	f
sneak#state	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#state()$/;"	f
sneak#to	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#to(op, input, inputlen, count, repeatmotion, reverse, inclusive, label) abort "{{{$/;"	f
sneak#util#echo	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#echo(msg)$/;"	f
sneak#util#getc	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#getc()$/;"	f
sneak#util#getchar	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#getchar()$/;"	f
sneak#util#has_upper	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#has_upper(s)$/;"	f
sneak#util#isvisualop	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#isvisualop(op)$/;"	f
sneak#util#nudge	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#nudge(right)$/;"	f
sneak#util#skipfold	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#skipfold(current_line, reverse)$/;"	f
sneak#util#strlen	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^  func! sneak#util#strlen(s)$/;"	f
sneak#util#wincol1	.vim/plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#wincol1()$/;"	f
sneak#wrap	.vim/plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#wrap(op, inputlen, reverse, inclusive, label) abort$/;"	f
sneak_colorscheme	.vim/plugged/vim-sneak/autoload/sneak/hl.vim	/^augroup sneak_colorscheme " re-init if :colorscheme is changed at runtime. #108$/;"	a
sneak_label_cleanup	.vim/plugged/vim-sneak/autoload/sneak/label.vim	/^  augroup sneak_label_cleanup$/;"	a
sort	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def sort(self, *args, **kwargs):$/;"	m	class:OrderedDict
source_suffix	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^source_suffix = '.rst'$/;"	v
space_before_function_paren	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def space_before_function_paren(snip):$/;"	f
speed	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^speed = 0.0$/;"	v
split_version	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/versiontools.py	/^def split_version(version):$/;"	f
stdscr	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^stdscr = curses.initscr()$/;"	v
stdscr	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^stdscr = curses.initscr()$/;"	v
stl	.vim/plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	.vim/plugged/vim-airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
style	.vim/plugged/vim-css-color/tests/example.jsx	/^		var style = {$/;"	c	class:AnonymousFunctione8eca1130100
summary	.vim/plugged/vim-gitgutter/test/runner.vim	/^let summary = [$/;"	v
syntastic_config	.vimrc	/^augroup syntastic_config$/;"	a
t	.vim/plugged/vim-minimap/autoload/drawille/examples/turtle.py	/^t = Turtle()$/;"	v
tagbar#CloseWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#OpenWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#ToggleWindow	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#autoopen	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#debug#enabled	.vim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	.vim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	.vim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	.vim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	.vim/plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#prototypes#basetag#new	.vim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	.vim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	.vim/plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	.vim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	.vim/plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	.vim/plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	.vim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	.vim/plugged/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	.vim/plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	.vim/plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	.vim/plugged/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	.vim/plugged/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
tagbar_config	.vimrc	/^augroup tagbar_config$/;"	a
templates_path	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^templates_path = ['_templates']$/;"	v
test	.vim/plugged/vim-sneak/Makefile	/^test: tests\/vader tests\/repeat$/;"	t
test_brush	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_brush(self):$/;"	m	class:TurtleTestCase
test_clear	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_clear(self):$/;"	m	class:CanvasTestCase
test_column	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_column(self):$/;"	m	class:LineTestCase
test_diagonal	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_diagonal(self):$/;"	m	class:LineTestCase
test_editorconfig	.vim/plugged/editorconfig-vim/tests/spec/editorconfig_spec.rb	/^def test_editorconfig(file_name, expected_values)$/;"	f
test_frame	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_frame(self):$/;"	m	class:CanvasTestCase
test_get	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_get(self):$/;"	m	class:CanvasTestCase
test_max_min_limits	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_max_min_limits(self):$/;"	m	class:CanvasTestCase
test_position	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_position(self):$/;"	m	class:TurtleTestCase
test_rotation	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_rotation(self):$/;"	m	class:TurtleTestCase
test_row	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_row(self):$/;"	m	class:LineTestCase
test_set	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_set(self):$/;"	m	class:CanvasTestCase
test_set_text	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_set_text(self):$/;"	m	class:CanvasTestCase
test_single_pixel	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_single_pixel(self):$/;"	m	class:LineTestCase
test_toggle	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_toggle(self):$/;"	m	class:CanvasTestCase
test_unset_empty	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_unset_empty(self):$/;"	m	class:CanvasTestCase
test_unset_nonempty	.vim/plugged/vim-minimap/autoload/drawille/tests.py	/^    def test_unset_nonempty(self):$/;"	m	class:CanvasTestCase
testinteractive	.vim/plugged/vim-sneak/Makefile	/^testinteractive: tests\/vader tests\/repeat$/;"	t
testnvim	.vim/plugged/vim-sneak/Makefile	/^testnvim: tests\/vader tests\/repeat$/;"	t
tests/repeat	.vim/plugged/vim-sneak/Makefile	/^tests\/repeat:$/;"	t
tests/vader	.vim/plugged/vim-sneak/Makefile	/^tests\/vader:$/;"	t
text	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/Makefile	/^text:$/;"	t
text_type	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/compat.py	/^    text_type = unicode$/;"	v
th	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    tw, th = getTerminalSize()$/;"	v
toggle	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def toggle(self, x, y):$/;"	m	class:Canvas
toggleminimap	.vim/plugged/vim-minimap/autoload/minimap.py	/^def toggleminimap():$/;"	f
translate	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/fnmatch.py	/^def translate(pat, nested=False):$/;"	f
tw	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    tw, th = getTerminalSize()$/;"	v
type	.vim/plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def type(string)$/;"	f
type	.vim/plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def type(string)$/;"	f
type	.vim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	s	object:repository
u	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/compat.py	/^    u = lambda s: codecs.unicode_escape_decode(s)[0]$/;"	f
u	.vim/plugged/vim-css-color/tests/example.css	/^u { background: rgba(144, 0, 0, .5) }$/;"	s
u	.vim/plugged/vim-repeat/autoload/repeat.vim	/^    nmap u <Plug>(RepeatUndo)$/;"	m
ul	.vim/plugged/vim-css-color/tests/example.css	/^ul {$/;"	s
ul li	.vim/plugged/vim-css-color/tests/example.css	/^ul li {$/;"	s
ultisnips_config	.vimrc	/^augroup ultisnips_config$/;"	a
unichr	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    unichr = chr$/;"	v
unite#sources#neocomplete#define	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#define() abort "{{{$/;"	f
unite#sources#neocomplete#start_complete	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#start_complete() abort "{{{$/;"	f
unite#sources#neocomplete#start_quick_match	.vim/plugged/neocomplete/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#start_quick_match() abort "{{{$/;"	f
unite#sources#neosnippet#define	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^function! unite#sources#neosnippet#define() abort "{{{$/;"	f
unite#sources#neosnippet#start_complete	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet.vim	/^function! unite#sources#neosnippet#start_complete() abort "{{{$/;"	f
unite#sources#neosnippet_file#define	.vim/plugged/neosnippet/autoload/unite/sources/neosnippet_file.vim	/^function! unite#sources#neosnippet_file#define() abort "{{{$/;"	f
unset	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def unset(self, x, y):$/;"	m	class:Canvas
up	.vim/plugged/vim-minimap/autoload/drawille/drawille.py	/^    def up(self):$/;"	m	class:Turtle
update	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def update(self, from_od):$/;"	m	class:OrderedDict
updateminimap	.vim/plugged/vim-minimap/autoload/minimap.py	/^def updateminimap():$/;"	f
url	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^        url = 'http:\/\/xkcd.com\/'$/;"	v
url	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^        url = argv[1]$/;"	v
url	.vim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	s	object:repository
usage	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/main.py	/^def usage(command, error=False):$/;"	f
usage	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^def usage():$/;"	f
use_raw_list	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	.vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
values	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/odict.py	/^    def values(self, values=None):$/;"	m	class:OrderedDict
version	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/docs/conf.py	/^version = __version__$/;"	v
version	.vim/plugged/editorconfig-vim/plugin/editorconfig-core-py/editorconfig/main.py	/^def version():$/;"	f
vertices	.vim/plugged/vim-minimap/autoload/drawille/examples/rotating_cube.py	/^vertices = [$/;"	v
vim_script_nr	.vim/plugged/vim-misc/addon-info.json	/^{"vim_script_nr": 4597, "dependencies": {}, "homepage": "http:\/\/peterodding.com\/code\/vim\/mi/;"	n
vim_snippets#Filename	.vim/plugged/neosnippet/autoload/vim_snippets.vim	/^function! vim_snippets#Filename(...) abort$/;"	f
vim_snippets#Filename	.vim/plugged/vim-snippets/autoload/vim_snippets.vim	/^fun! vim_snippets#Filename(...)$/;"	f
vital#	.vim/plugged/neocomplete/autoload/vital/_neocomplete.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
vital#	.vim/plugged/neocomplete/autoload/vital/neocomplete.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital#	.vim/plugged/neosnippet/autoload/vital/_neosnippet.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
vital#	.vim/plugged/neosnippet/autoload/vital/neosnippet.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital#_neocomplete#Data#List#import	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/List.vim	/^  function! vital#_neocomplete#Data#List#import() abort$/;"	f
vital#_neocomplete#Data#String#import	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Data/String.vim	/^  function! vital#_neocomplete#Data#String#import() abort$/;"	f
vital#_neocomplete#Prelude#import	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Prelude.vim	/^  function! vital#_neocomplete#Prelude#import() abort$/;"	f
vital#_neocomplete#Process#import	.vim/plugged/neocomplete/autoload/vital/_neocomplete/Process.vim	/^  function! vital#_neocomplete#Process#import() abort$/;"	f
vital#_neocomplete#System#Cache#Deprecated#import	.vim/plugged/neocomplete/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^  function! vital#_neocomplete#System#Cache#Deprecated#import() abort$/;"	f
vital#_neosnippet#Data#List#import	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/List.vim	/^  function! vital#_neosnippet#Data#List#import() abort$/;"	f
vital#_neosnippet#Data#String#import	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Data/String.vim	/^  function! vital#_neosnippet#Data#String#import() abort$/;"	f
vital#_neosnippet#Prelude#import	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Prelude.vim	/^  function! vital#_neosnippet#Prelude#import() abort$/;"	f
vital#_neosnippet#Process#import	.vim/plugged/neosnippet/autoload/vital/_neosnippet/Process.vim	/^  function! vital#_neosnippet#Process#import() abort$/;"	f
vital#_neosnippet#System#Cache#Deprecated#import	.vim/plugged/neosnippet/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^  function! vital#_neosnippet#System#Cache#Deprecated#import() abort$/;"	f
vital#of	.vim/plugged/neocomplete/autoload/vital.vim	/^function! vital#of(name) abort$/;"	f
vital#of	.vim/plugged/neosnippet/autoload/vital.vim	/^function! vital#of(name) abort$/;"	f
w	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^        w = tw$/;"	v
w	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    w, h = i.size$/;"	v
width	.vim/plugged/vim-minimap/autoload/drawille/examples/flappy_birds.py	/^width = 100$/;"	v
word_processor_mode	.vimrc	/^augroup word_processor_mode$/;"	a
x	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^            x = 0$/;"	v
x	.vim/plugged/vim-minimap/autoload/drawille/examples/xkcd.py	/^    x = y = 0$/;"	v
xolox#misc#async#call	.vim/plugged/vim-misc/autoload/xolox/misc/async.vim	/^function! xolox#misc#async#call(options) " {{{1$/;"	f
xolox#misc#async#callback_to_parent	.vim/plugged/vim-misc/autoload/xolox/misc/async.vim	/^function! xolox#misc#async#callback_to_parent(response) " {{{1$/;"	f
xolox#misc#async#inside_child	.vim/plugged/vim-misc/autoload/xolox/misc/async.vim	/^function! xolox#misc#async#inside_child(request) " {{{1$/;"	f
xolox#misc#async#periodic_callback	.vim/plugged/vim-misc/autoload/xolox/misc/async.vim	/^function! xolox#misc#async#periodic_callback() " {{{1$/;"	f
xolox#misc#buffer#is_empty	.vim/plugged/vim-misc/autoload/xolox/misc/buffer.vim	/^function! xolox#misc#buffer#is_empty() " {{{1$/;"	f
xolox#misc#buffer#lock	.vim/plugged/vim-misc/autoload/xolox/misc/buffer.vim	/^function! xolox#misc#buffer#lock() " {{{1$/;"	f
xolox#misc#buffer#prepare	.vim/plugged/vim-misc/autoload/xolox/misc/buffer.vim	/^function! xolox#misc#buffer#prepare(...) " {{{1$/;"	f
xolox#misc#buffer#unlock	.vim/plugged/vim-misc/autoload/xolox/misc/buffer.vim	/^function! xolox#misc#buffer#unlock() " {{{1$/;"	f
xolox#misc#complete#keywords	.vim/plugged/vim-misc/autoload/xolox/misc/complete.vim	/^function! xolox#misc#complete#keywords(arglead, cmdline, cursorpos)$/;"	f
xolox#misc#cursorhold#autocmd	.vim/plugged/vim-misc/autoload/xolox/misc/cursorhold.vim	/^function! xolox#misc#cursorhold#autocmd()$/;"	f
xolox#misc#cursorhold#register	.vim/plugged/vim-misc/autoload/xolox/misc/cursorhold.vim	/^function! xolox#misc#cursorhold#register(options)$/;"	f
xolox#misc#escape#pattern	.vim/plugged/vim-misc/autoload/xolox/misc/escape.vim	/^function! xolox#misc#escape#pattern(string) " {{{1$/;"	f
xolox#misc#escape#shell	.vim/plugged/vim-misc/autoload/xolox/misc/escape.vim	/^function! xolox#misc#escape#shell(string) " {{{1$/;"	f
xolox#misc#escape#substitute	.vim/plugged/vim-misc/autoload/xolox/misc/escape.vim	/^function! xolox#misc#escape#substitute(string) " {{{1$/;"	f
xolox#misc#format#pluralize	.vim/plugged/vim-misc/autoload/xolox/misc/format.vim	/^function! xolox#misc#format#pluralize(count, singular, plural) " {{{1$/;"	f
xolox#misc#format#timestamp	.vim/plugged/vim-misc/autoload/xolox/misc/format.vim	/^function! xolox#misc#format#timestamp(ts) " {{{1$/;"	f
xolox#misc#list#binsert	.vim/plugged/vim-misc/autoload/xolox/misc/list.vim	/^function! xolox#misc#list#binsert(list, value, ...) " {{{1$/;"	f
xolox#misc#list#unique	.vim/plugged/vim-misc/autoload/xolox/misc/list.vim	/^function! xolox#misc#list#unique(list) " {{{1$/;"	f
xolox#misc#msg#debug	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^function! xolox#misc#msg#debug(...) " {{{1$/;"	f
xolox#misc#msg#info	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^function! xolox#misc#msg#info(...) " {{{1$/;"	f
xolox#misc#msg#warn	.vim/plugged/vim-misc/autoload/xolox/misc/msg.vim	/^function! xolox#misc#msg#warn(...) " {{{1$/;"	f
xolox#misc#open#file	.vim/plugged/vim-misc/autoload/xolox/misc/open.vim	/^function! xolox#misc#open#file(location, ...) " {{{1$/;"	f
xolox#misc#open#url	.vim/plugged/vim-misc/autoload/xolox/misc/open.vim	/^function! xolox#misc#open#url(url) " {{{1$/;"	f
xolox#misc#option#eval_tags	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! xolox#misc#option#eval_tags(value, ...) " {{{1$/;"	f
xolox#misc#option#get	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! xolox#misc#option#get(name, ...) " {{{1$/;"	f
xolox#misc#option#join	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! xolox#misc#option#join(values) " {{{1$/;"	f
xolox#misc#option#join_tags	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! xolox#misc#option#join_tags(values) " {{{1$/;"	f
xolox#misc#option#split	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! xolox#misc#option#split(value) " {{{1$/;"	f
xolox#misc#option#split_tags	.vim/plugged/vim-misc/autoload/xolox/misc/option.vim	/^function! xolox#misc#option#split_tags(value) " {{{1$/;"	f
xolox#misc#os#can_use_dll	.vim/plugged/vim-misc/autoload/xolox/misc/os.vim	/^function! xolox#misc#os#can_use_dll() " {{{1$/;"	f
xolox#misc#os#exec	.vim/plugged/vim-misc/autoload/xolox/misc/os.vim	/^function! xolox#misc#os#exec(options) " {{{1$/;"	f
xolox#misc#os#find_vim	.vim/plugged/vim-misc/autoload/xolox/misc/os.vim	/^function! xolox#misc#os#find_vim(...) " {{{1$/;"	f
xolox#misc#os#is_mac	.vim/plugged/vim-misc/autoload/xolox/misc/os.vim	/^function! xolox#misc#os#is_mac() " {{{1$/;"	f
xolox#misc#os#is_win	.vim/plugged/vim-misc/autoload/xolox/misc/os.vim	/^function! xolox#misc#os#is_win() " {{{1$/;"	f
xolox#misc#path#absolute	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#absolute(path) " {{{1$/;"	f
xolox#misc#path#commonprefix	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#commonprefix(paths) " {{{1$/;"	f
xolox#misc#path#decode	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#decode(encoded_path) " {{{1$/;"	f
xolox#misc#path#directory_separator	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#directory_separator() " {{{1$/;"	f
xolox#misc#path#encode	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#encode(path) " {{{1$/;"	f
xolox#misc#path#equals	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^  function! xolox#misc#path#equals(a, b)$/;"	f
xolox#misc#path#is_relative	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#is_relative(path) " {{{1$/;"	f
xolox#misc#path#join	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#join(parts) " {{{1$/;"	f
xolox#misc#path#merge	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#merge(parent, child, ...) " {{{1$/;"	f
xolox#misc#path#relative	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#relative(path, base) " {{{1$/;"	f
xolox#misc#path#split	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#split(path) " {{{1$/;"	f
xolox#misc#path#starts_with	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#starts_with(a, b) " {{{1$/;"	f
xolox#misc#path#tempdir	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#tempdir() " {{{1$/;"	f
xolox#misc#path#which	.vim/plugged/vim-misc/autoload/xolox/misc/path.vim	/^function! xolox#misc#path#which(...) " {{{1$/;"	f
xolox#misc#perm#get	.vim/plugged/vim-misc/autoload/xolox/misc/perm.vim	/^function! xolox#misc#perm#get(fname)$/;"	f
xolox#misc#perm#set	.vim/plugged/vim-misc/autoload/xolox/misc/perm.vim	/^function! xolox#misc#perm#set(fname, perms)$/;"	f
xolox#misc#perm#update	.vim/plugged/vim-misc/autoload/xolox/misc/perm.vim	/^function! xolox#misc#perm#update(fname, contents)$/;"	f
xolox#misc#persist#load	.vim/plugged/vim-misc/autoload/xolox/misc/persist.vim	/^function! xolox#misc#persist#load(filename, ...) " {{{1$/;"	f
xolox#misc#persist#save	.vim/plugged/vim-misc/autoload/xolox/misc/persist.vim	/^function! xolox#misc#persist#save(filename, value) " {{{1$/;"	f
xolox#misc#str#compact	.vim/plugged/vim-misc/autoload/xolox/misc/str.vim	/^function! xolox#misc#str#compact(s) " {{{1$/;"	f
xolox#misc#str#dedent	.vim/plugged/vim-misc/autoload/xolox/misc/str.vim	/^function! xolox#misc#str#dedent(text) " {{{1$/;"	f
xolox#misc#str#indent	.vim/plugged/vim-misc/autoload/xolox/misc/str.vim	/^function! xolox#misc#str#indent(text, num_spaces) " {{{1$/;"	f
xolox#misc#str#slug	.vim/plugged/vim-misc/autoload/xolox/misc/str.vim	/^function! xolox#misc#str#slug(s) " {{{1$/;"	f
xolox#misc#str#trim	.vim/plugged/vim-misc/autoload/xolox/misc/str.vim	/^function! xolox#misc#str#trim(s) " {{{1$/;"	f
xolox#misc#str#ucfirst	.vim/plugged/vim-misc/autoload/xolox/misc/str.vim	/^function! xolox#misc#str#ucfirst(s) " {{{1$/;"	f
xolox#misc#str#unescape	.vim/plugged/vim-misc/autoload/xolox/misc/str.vim	/^function! xolox#misc#str#unescape(s) " {{{1$/;"	f
xolox#misc#test#assert_equals	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! xolox#misc#test#assert_equals(expected, received) " {{{1$/;"	f
xolox#misc#test#assert_same_type	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! xolox#misc#test#assert_same_type(expected, received) " {{{1$/;"	f
xolox#misc#test#assert_true	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! xolox#misc#test#assert_true(expr) " {{{1$/;"	f
xolox#misc#test#failed	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! xolox#misc#test#failed() " {{{1$/;"	f
xolox#misc#test#passed	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! xolox#misc#test#passed() " {{{1$/;"	f
xolox#misc#test#reset	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! xolox#misc#test#reset() " {{{1$/;"	f
xolox#misc#test#summarize	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! xolox#misc#test#summarize() " {{{1$/;"	f
xolox#misc#test#wrap	.vim/plugged/vim-misc/autoload/xolox/misc/test.vim	/^function! xolox#misc#test#wrap(function) " {{{1$/;"	f
xolox#misc#tests#asynchronous_command_execution	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#asynchronous_command_execution() " {{{2$/;"	f
xolox#misc#tests#binary_insertion	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#binary_insertion() " {{{2$/;"	f
xolox#misc#tests#finding_vim_on_the_search_path	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#finding_vim_on_the_search_path() " {{{2$/;"	f
xolox#misc#tests#getting_configuration_options	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#getting_configuration_options() " {{{2$/;"	f
xolox#misc#tests#joining_of_multi_valued_options	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#joining_of_multi_valued_options() " {{{2$/;"	f
xolox#misc#tests#making_a_list_unique	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#making_a_list_unique() " {{{2$/;"	f
xolox#misc#tests#multiline_string_dedent	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#multiline_string_dedent()$/;"	f
xolox#misc#tests#pattern_escaping	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#pattern_escaping() " {{{2$/;"	f
xolox#misc#tests#run	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#run() " {{{1$/;"	f
xolox#misc#tests#shell_escaping	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#shell_escaping() " {{{2$/;"	f
xolox#misc#tests#splitting_of_multi_valued_options	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#splitting_of_multi_valued_options() " {{{2$/;"	f
xolox#misc#tests#string_case_transformation	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#string_case_transformation()$/;"	f
xolox#misc#tests#string_whitespace_compaction	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#string_whitespace_compaction()$/;"	f
xolox#misc#tests#string_whitespace_trimming	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#string_whitespace_trimming()$/;"	f
xolox#misc#tests#substitute_escaping	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#substitute_escaping() " {{{2$/;"	f
xolox#misc#tests#synchronous_command_execution	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#synchronous_command_execution() " {{{2$/;"	f
xolox#misc#tests#synchronous_command_execution_with_raising_of_errors	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#synchronous_command_execution_with_raising_of_errors() " {{{2$/;"	f
xolox#misc#tests#synchronous_command_execution_with_stderr	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#synchronous_command_execution_with_stderr() " {{{2$/;"	f
xolox#misc#tests#synchronous_command_execution_without_raising_errors	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#synchronous_command_execution_without_raising_errors() " {{{2$/;"	f
xolox#misc#tests#version_string_comparison	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#version_string_comparison() " {{{2$/;"	f
xolox#misc#tests#version_string_parsing	.vim/plugged/vim-misc/autoload/xolox/misc/tests.vim	/^function! xolox#misc#tests#version_string_parsing() " {{{2$/;"	f
xolox#misc#timer#convert	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^function! xolox#misc#timer#convert(value) " {{{1$/;"	f
xolox#misc#timer#force	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^function! xolox#misc#timer#force(...) " {{{1$/;"	f
xolox#misc#timer#resumable	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^function! xolox#misc#timer#resumable() " {{{1$/;"	f
xolox#misc#timer#start	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^function! xolox#misc#timer#start() " {{{1$/;"	f
xolox#misc#timer#stop	.vim/plugged/vim-misc/autoload/xolox/misc/timer.vim	/^function! xolox#misc#timer#stop(...) " {{{1$/;"	f
xolox#misc#version#at_least	.vim/plugged/vim-misc/autoload/xolox/misc/version.vim	/^function! xolox#misc#version#at_least(expected_version, available_version)$/;"	f
xolox#misc#version#parse	.vim/plugged/vim-misc/autoload/xolox/misc/version.vim	/^function! xolox#misc#version#parse(version_string)$/;"	f
y<C-G>	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^      nnoremap <buffer> <silent> y<C-G> :call setreg(v:register, <SID>recall())<CR>$/;"	m
yS	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
ys	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
z	.vim/plugged/vim-sneak/plugin/sneak.vim	/^  omap z <Plug>Sneak_s$/;"	m
{{	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  inoremap <buffer> {{ {{}}<left><left>$/;"	m
{{!	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  inoremap <buffer> {{! {{!}}<left><left>$/;"	m
{{#	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  inoremap <buffer> {{# {{#}}<cr>{{\/}}<up><left><left>$/;"	m
{{<	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  inoremap <buffer> {{< {{<}}<left><left>$/;"	m
{{>	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  inoremap <buffer> {{> {{>}}<left><left>$/;"	m
{{if	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  inoremap <buffer> {{if {{#if }}<cr>{{\/if}}<up><left>$/;"	m
{{ife	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  inoremap <buffer> {{ife {{#if }}<cr>{{else}}<cr>{{\/if}}<up><up><left>$/;"	m
{{{	.vim/plugged/vim-mustache-handlebars/ftplugin/mustache.vim	/^  inoremap <buffer> {{{ {{{}}}<left><left><left>$/;"	m
~	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^        nnoremap <buffer> <silent> ~    :<C-U>exe <SID>BlameJump('~'.v:count1)<CR>$/;"	m
~	.vim/plugged/vim-fugitive/plugin/fugitive.vim	/^    nnoremap <buffer> <silent> ~     :<C-U>exe <SID>Edit('edit',0,<SID>buffer().commit().'~'.v:c/;"	m
